Application Description: SQLWindows version 5.0 starter application
	Outline Version - 4.0.32
	Design-time Settings
.data VIEWINFO
0000: 6F00000001000000 FFFF01000D004347 5458566965775374 6174650400010000
0020: 00000000002F0100 002C000000020000 0003000000FFFFFF FFFFFFFFFFFCFFFF
0040: FFE9FFFFFF400000 00240000004C0400 00DD020000010000 0001000000010000
0060: 000F4170706C6963 6174696F6E497465 6D00000000
.enddata
		Outline Window State: Maximized
		Outline Window Location and Size
.data VIEWINFO
0000: 6600040003001B00 02000000C9040000 0000081ECD120500 1D00FFFF4D61696E
0020: 001E000000040043 0400000000081ECD 120000F400FFFF43 6C61737365730029
0040: 0001000400CB0300 000000E91E800A00 008600FFFF496E74 65726E616C204675
0060: 6E6374696F6E7300 2000010004006F03 00000000E91E800A 0000DF00FFFF5661
0080: 726961626C657300
.enddata
.data VIEWSIZE
0000: 8800
.enddata
			Left: -0.013"
			Top: 0.0"
			Width:  8.013"
			Height: 4.969"
		Options Box Location
.data VIEWINFO
0000: D4181509B80B1A00
.enddata
.data VIEWSIZE
0000: 0800
.enddata
			Visible? Yes
			Left: 4.15"
			Top: 1.885"
			Width:  3.8"
			Height: 2.073"
		Class Editor Location
			Visible? No
			Left: 0.225"
			Top: 0.042"
			Width:  5.063"
			Height: 2.719"
		Tool Palette Location
			Visible? No
			Left: 9.275"
			Top: 3.01"
		Fully Qualified External References? No
		Reject Multiple Window Instances? Yes
		Enable Runtime Checks Of External References? Yes
		Use Release 4.0 Scope Rules? No
	Libraries
		! /##### LS : 16/04/2007
		File Include: envvar.apl
		! \##### LS : 16/04/2007
		File Include: salmisc.APL
		!
		!
		! File Include: salmdi.apl
		! File Include: salsys.apl
		! File Include: salmisc.apl
		! File Include: saldynamic.apl
		!
		!
		File Include: cstste.apl
		File Include: steutl.apl
		! Twee libraries voor tabs
		File Include: QCKTABS.APL
		! CTD2000
		!
		File Include: ttmngr.apl
		!
		! CTD2000
		!
		File Include: erreur.apl
		File Include: shell.apl
		!
		File Include: Mailslots.apl
		File Include: email.apl
		File Include: excel.apl
		File Include: rtf4.apl
		File Include: WinSDKcst.apl
		File Include: WinSDKfct.apl
		File Include: blatmail.apl
		File Include: util.apl
	Global Declarations
		Window Defaults
			Tool Bar
				Display Style? Etched
				Font Name: System Default
				Font Size: System Default
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Form Window
				Display Style? Etched
				Font Name: System Default
				Font Size: System Default
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Dialog Box
				Display Style? Etched
				Font Name: System Default
				Font Size: System Default
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Top Level Table Window
				Font Name: System Default
				Font Size: System Default
				Font Enhancement: System Default
				Text Color: System Default
				Background Color: System Default
			Data Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Multiline Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Spin Field
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Background Text
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Pushbutton
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
			Radio Button
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Check Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Option Button
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
			Group Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Child Table Window
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			List Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Combo Box
				Font Name: Use Parent
				Font Size: Use Parent
				Font Enhancement: Use Parent
				Text Color: Use Parent
				Background Color: Use Parent
			Line
				Line Color: Use Parent
			Frame
				Border Color: Use Parent
				Background Color: Use Parent
			Picture
				Border Color: Use Parent
				Background Color: Use Parent
		Formats
			Number: 0'%'
			Number: #0
			Number: ###000
			Number: ###000;'($'###000')'
			Date/Time: dd/MM/yyyy hh:mm
			Date/Time: dd/MM/yyyy
		External Functions
			!
			! Mis en commentaire et déplacé dans SHELL.APL
			!
			!
			!
			!
			Library name: KERNEL32.DLL
				ThreadSafe: No
				Function: FileTimeToSystemTime
					Description: 
							example:
							 Call FileTimeToSystemTime( nCreationTime, nYear, nMonth, nDayOfWeek, nDay, nHour, nMinute, nSecond, nMilisecond )
					Export Ordinal: 0
					Returns
					Parameters
						Number: LONG
						structPointer
							Receive Number: WORD
							Receive Number: WORD
							Receive Number: WORD
							Receive Number: WORD
							Receive Number: WORD
							Receive Number: WORD
							Receive Number: WORD
							Receive Number: WORD
				Function: GetFileTime
					Description: 
							example:
							Call GetFileTime( nFile, nCreationTime, nAccessTime, nWriteTime)
					Export Ordinal: 0
					Returns
					Parameters
						Number: HANDLE
						Number: LONG
						Number: LONG
						Number: LONG
				Function: OpenFile
					Description: 
							example:
							Set nStructSize = 136
							Set nFile =  OpenFile( psFile, nStructSize ,nDummy,nDummy,nDummy,nDummy, s, 0x00000000 )
					Export Ordinal: 0
					Returns
						Number: HANDLE
					Parameters
						String: LPCSTR
						structPointer
							Number: BYTE
							Receive Number: BYTE
							Receive Number: DWORD
							Receive Number: DWORD
							Receive Number: DWORD
							Receive String: char[255]
						Number: UINT
				!
				Function: _lclose
					Description: 
							example:
							Call _lclose( nFile )
					Export Ordinal: 0
					Returns
					Parameters
						Number: HANDLE
			Library name: WSOCK32.DLL
				ThreadSafe: No
				Function: accept
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						! the listening socket
						Number: INT
						! the client address
						Receive String: LPVOID
						! length of the client address
						Receive Number: LPINT
				Function: AcceptEx
					Description:
					Export Ordinal: 0
					Returns
						Boolean: BOOL
					Parameters
						Number: INT
						Number: INT
						Receive String: LPVOID
						Number: DWORD
						Number: DWORD
						Number: DWORD
						Receive Number: LPDWORD
						Receive String: LPVOID
				Function: GetAcceptExSockaddrs
					Description:
					Export Ordinal: 0
					Returns
					Parameters
						String: LPVOID
						Number: DWORD
						Number: DWORD
						Number: DWORD
						Receive String: LPVOID
						Receive Number: LPINT
						Receive String: LPVOID
						Receive Number: LPINT
				Function: getpeername
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						! the client address
						Receive String: LPVOID
						! length of the client address
						Receive Number: LPINT
				Function: bind
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						String: LPVOID
						Number: INT
				Function: closesocket
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
				Function: connect
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						String: LPVOID
						Number: INT
				Function: gethostbyaddr
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						Number: LONG
						Number: INT
						Number: INT
				Function: gethostbyname
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						String: LPSTR
				Function: gethostname
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						String: LPSTR
						Number: INT
				Function: getservbyname
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						String: LPSTR
						String: LPVOID
				Function: getsockname
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						! the listening socket
						Number: INT
						! the client address
						Receive String: LPVOID
						! length of the client address
						Receive Number: LPINT
				Function: htonl
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						Number: LONG
				Function: htons
					Description:
					Export Ordinal: 0
					Returns
						Number: SHORT
					Parameters
						Number: SHORT
				Function: inet_addr
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						String: LPSTR
				Function: inet_ntoa
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						Number: LONG
				Function: listen
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						Number: INT
				Function: ntohl
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						Number: LONG
				Function: ntohs
					Description:
					Export Ordinal: 0
					Returns
						Number: SHORT
					Parameters
						Number: SHORT
				Function: recv
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						Receive String: LPVOID
						Number: INT
						Number: INT
				Function: recvfrom
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						Receive String: LPVOID
						Number: INT
						Number: INT
						Receive String: LPVOID
						Receive Number: LPINT
				Function: send
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						String: LPVOID
						Number: INT
						Number: INT
				Function: sendto
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						String: LPVOID
						Number: INT
						Number: INT
						String: LPVOID
						Number: INT
				Function: setsockopt
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						Number: INT
						Number: INT
						Receive String: LPVOID
						Number: INT
				Function: socket
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						Number: INT
						Number: INT
				Function: WSAAsyncGetHostByName
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: UINT
						String: LPSTR
						Receive String: LPVOID
						Number: INT
				Function: WSAAsyncGetServByName
					Description:
					Export Ordinal: 0
					Returns
						Number: LONG
					Parameters
						Window Handle: HWND
						Number: UINT
						String: LPSTR
						Number: LONG
						Receive String: LPVOID
						Number: INT
				Function: WSAAsyncSelect
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: INT
						Window Handle: HWND
						Number: INT
						Number: LONG
				Function: WSACleanup
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
				Function: WSAGetLastError
					Description:
					Export Ordinal: 0
					Returns
						Number: SHORT
					Parameters
				Function: WSAStartup
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: WORD
						structPointer
							Receive Number: WORD
							Receive Number: WORD
							Receive String: char[255]
							Receive String: char[1]
							Receive String: char[129]
							Receive Number: USHORT
							Receive Number: USHORT
							Receive Number: LONG
			Library name: KERNEL32.DLL
				ThreadSafe: No
				Function: lstrlen
					Description:
					Export Ordinal: 0
					Returns
						Number: INT
					Parameters
						Number: LONG
				!
		Constants
.data CCDATA
0000: 3000000000000000 0000000000000000 00000000
.enddata
.data CCSIZE
0000: 1400
.enddata
			System
				! WINDOW Messages
				Number: WM_CREATE 		= 0x0001
				Number: WM_NCCREATE 			= 0x0081
				! Number: GWL_STYLE 			= -16
				Number: NO_WS_CAPTION 			= 0xFF3FFFFF
				Number: SM_CXSCREEN			= 0
				Number: SM_CYSCREEN			= 1
				! -----------------
				Number: WM_SETREDRAW 			= 0x000B
				Number: WM_MOVE 		= 0x0003
				Number: WM_SIZE 		= 0x0005
				Number: WM_ACTIVATE 		= 0x0006
				Number: WM_SETFOCUS 		= 0x0007
				Number: WM_KILLFOCUS 		= 0x0008
				Number: WM_PAINT 		= 0x000F
				Number: WM_CLOSE 		= 0x0010
				Number: WM_ACTIVATEAPP 	= 0x001C
				Number: WM_SETCURSOR        	= 0x0020
				Number: WM_WININICHANGE	= 0x001A
				Number: WM_WinIniChange	= 0x001A
				Number: WM_QUERYENDSESSION	= 0x0011
				Number: WM_QueryEndSession	= 0x0011
				!
				Number: WM_ICONERASEBKGND	= 0x0027
				! Number: WM_GETFONT		= 0x0031
				!
				Number: WM_WINDOWPOSCHANGED 	= 0x0047
				Number: WM_WINDOWPOSCHANGING 	= 0x0046
				!
				Number: WM_NCPAINT		= 0x0085
				Number: WM_NCACTIVATE 		= 0x0086
				!
				Number: WM_KEYDOWN		= 0x0100
				Number: WM_KEYUP		= 0x0101
				Number: WM_CHAR		= 0x0102
				Number: WM_DEADCHAR		= 0x0103
				Number: WM_SYSKEYDOWN	= 0x0104
				Number: WM_SYSKEYUP		= 0x0105
				Number: WM_SYSCHAR		= 0x0106
				Number: WM_SYSDEADCHAR	= 0x0107
				!
				Number: WM_COMMAND		= 0x0111
				Number: WM_SYSCOMMAND	= 0x0112
				! Number: WM_HSCROLL 		= 0x0114
				! Number: WM_VSCROLL 		= 0x0115
				!
				Number: WM_MOUSEMOVE 		= 0x0200
				Number: WM_LBUTTONDOWN      	= 0x0201
				Number: WM_LBUTTONUP        	= 0x0202
				Number: WM_LBUTTONDBLCLK    	= 0x0203
				Number: WM_RBUTTONDOWN     	= 0x0204
				Number: WM_RBUTTONUP        	= 0x0205
				Number: WM_RBUTTONDBLCLK    	= 0x0206
				Number: WM_MBUTTONDOWN      	= 0x0207
				Number: WM_MBUTTONUP        	= 0x0208
				Number: WM_MBUTTONDBLCLK   	= 0x0209
				!
				Number: WM_PARENTNOTIFY 	= 0x0210
				!
				! /* MDI messages */
				Number: WM_MDICREATE		= 0x0220
				Number: WM_MDIDESTROY		= 0x0221
				Number: WM_MDIACTIVATE		= 0x0222
				Number: WM_MDIRESTORE		= 0x0223
				Number: WM_MDINEXT		= 0x0224
				Number: WM_MDIMAXIMIZE		= 0x0225
				Number: WM_MDITILE		= 0x0226
				Number: WM_MDICASCADE		= 0x0227
				Number: WM_MDIICONARRANGE	= 0x0228
				Number: WM_MDIGETACTIVE	= 0x0229
				Number: WM_MDISETMENU		= 0x0230
				Number: WM_MDIREFRESHMENU	= 0x0234
				!
				Number: WM_USER 		= 0x0400
				!
				! Number: EM_GETSEL 		= WM_USER + 0
				! Number: EM_SETSEL 		= WM_USER + 1
				! Number: EM_FMTLINES 		= WM_USER + 24
				! Number: EM_SETREADONLY 	= WM_USER + 31
					! Example, how to set Edit fields (as well as mulitilines) to READ ONLY
							READ ONLY allows the user to scroll through the fields (and use 
							the scroll bars for multilines) as well as SELECT and COPY the
							value of the field to the clipboard.
					! Call SalSendMsg( hWndField, EM_SETREADONLY, bSet, 0 )
				!
				Number: KKS_METER_INIT 		= WM_USER + 0xBC8
				Number: KKS_METER_SET 		= WM_USER + 3018
				!
				! -----------------------------------------------------------------------------
				! Constants for Scrollbars
				! -----------------------------------------------------------------------------
				Number: SB_LINEUP 		= 0
				Number: SB_LINELEFT 		= 0
				Number: SB_LINEDOWN 		= 1
				Number: SB_LINERIGHT 		= 1
				Number: SB_PAGEUP 		= 2
				Number: SB_PAGELEFT 		= 2
				Number: SB_PAGEDOWN 		= 3
				Number: SB_PAGERIGHT 		= 3
				Number: SB_THUMBPOSITION 	= 4
				Number: SB_THUMBTRACK 		= 5
				Number: SB_TOP 			= 6
				Number: SB_LEFT 			= 6
				Number: SB_BOTTOM 		= 7
				Number: SB_RIGHT 		= 7
				Number: SB_ENDSCROLL 		= 8
				!
				Number: SB_HORZ 		= 0
				Number: SB_VERT	 		= 1
				Number: SB_CTL	 		= 2
				Number: SB_BOTH	 		= 3
				!
				! WM_ACTIVATE state values
				Number: WA_INACTIVE 		= 0
				Number: WA_ACTIVE 		= 1
				Number: WA_CLICKACTIVE 		= 2
				!
				! ShowWindow constants
				! Number: SW_HIDE 		= 0
				! Number: SW_SHOWNORMAL 	= 1
				! Number: SW_NORMAL 		= 1
				! Number: SW_SHOWMINIMIZED 	= 2
				! Number: SW_SHOWMAXIMIZED 	= 3
				! Number: SW_MAXIMIZE 		= 3
				! Number: SW_SHOWNOACTIVATE 	= 4
				! Number: SW_SHOW 		= 5
				! Number: SW_MINIMIZE 		= 6
				! Number: SW_SHOWMINNOACTIVE 	= 7
				! Number: SW_SHOWNA 		= 8
				! Number: SW_RESTORE 		= 9
				!
				! GetWindowWord constants
				Number: GWW_HINSTANCE 	= -6
				Number: GWW_HWNDPARENT 	= -8
				Number: GWW_ID 			= -12
				!
				! -----------------------------------------------------------------------------
				! GetWindow constants
				! -----------------------------------------------------------------------------
				! Number: GW_HWNDFIRST 		= 0
				! Number: GW_HWNDLAST 		= 1
				! Number: GW_HWNDNEXT 		= 2
				! Number: GW_HWNDPREV 		= 3
				! Number: GW_OWNER 		= 4
				! Number: GW_CHILD 		= 5
				!
				Number: GFSR_SYSTEMRESOURCES = 0x0000		! Free space for System resources
				Number: GFSR_GDIRESOURCES 	= 0x0001 		! Free space for GDI resources
				Number: GFSR_USERRESOURCES 	= 0x0002		! Free space for User resources
				!
				Number: HWND_TOP 		= 0
				Number: HWND_BOTTOM 		= 1
				Number: HWND_TOPMOST 		= -1
				Number: HWND_NOTOPMOST 	= -2
				!
				Number: SWP_NOSIZE		= 0x0001
				Number: SWP_NOMOVE		= 0x0002
				Number: SWP_NOZORDER  		= 0x0004
				Number: SWP_NOREDRAW 		= 0x0008
				Number: SWP_NOACTIVATE		= 0x0010
				Number: SWP_FRAMECHANGED   	= 0x0020
				Number: SWP_SHOWWINDOW     	= 0x0040
				Number: SWP_HIDEWINDOW      	= 0x0080
				!
				! USER.EXE MF_* Menu function flags - the constant values come
						  from windows.H
				! flags for EnableMenuItem()
				Number: MF_Enabled	= 0x0000
				Number: MF_Grayed	= 0x0001
				Number: MF_Disabled	= 0x0002
				!
				! return flags for GetMenuState()
				Number: MF_Unchecked	= 0x0000
				Number: MF_Checked	= 0x0008
				Number: MF_MenuBarBreak	= 0x0020
				Number: MF_MenuBreak	= 0x0040
				! Number: MF_Separator	= 0x0800
				!
				! flags for GetMenuString()
				Number: MF_ByCommand	= 0x0000
				Number: MF_ByPosition	= 0x0400
				!
				! flags for HiliteMenuItem()
				Number: MF_Unhilite	= 0x0000
				Number: MF_Hilite		= 0x0080
				!
				! flags for ChangeMenu()
				Number: MF_Change	= 0x0080
				Number: MF_Insert		= 0x0000
				Number: MF_Append	= 0x0100
				Number: MF_Delete	= 0x0200
				Number: MF_Remove	= 0x1000
				Number: MF_BitMap	= 0x0004
				Number: MF_String		= 0x0000
				Number: MF_Popup	= 0x0010
				Number: MF_Help		= 0x4000
				Number: MF_SysMenu	= 0x2000
				Number: MF_MouseSelect	= 0x8000
				!
				! WM_SYSCOMMAND constants
				Number: SC_MINIMIZE	= 0xF020
				Number: SC_RESTORE	= 0xF120
				Number: SC_CLOSE	= 0xF060
				Number: CP_DIRECT	= 2
				Number: SC_RESTORE_DIRECT = SC_RESTORE | CP_DIRECT 
				!
				! Responses for Modifying Network Connections
				Number: WN_SUCCESS 		= 0x0000
				Number: WN_NOT_SUPPORTED 	= 0x0001
				Number: WN_NET_ERROR 		= 0x0002
				Number: WN_MORE_DATA 		= 0x0003
				Number: WN_BAD_POINTER 	= 0x0004
				Number: WN_BAD_VALUE 		= 0x0005
				Number: WN_BAD_PASSWORD 	= 0x0006
				Number: WN_ACCESS_DENIED 	= 0x0007
				Number: WN_FUNCTION_BUSY 	= 0x0008
				Number: WN_WINDOWS_ERROR 	= 0x0009
				Number: WN_BAD_USER 		= 0x000A
				Number: WN_OUT_OF_MEMORY 	= 0x000B
				Number: WN_CANCEL 		= 0x000C
				Number: WN_CONTINUE 		= 0x000D
				Number: WN_NOT_CONNECTED 	= 0x0030
				Number: WN_OPEN_FILES 		= 0x0031
				Number: WN_BAD_NETNAME 	= 0x0032
				Number: WN_BAD_LOCALNAME 	= 0x0033
				Number: WN_ALREADY_CONNECTED	= 0x0034
				Number: WN_DEVICE_ERROR 	= 0x0035
				Number: WN_CONNECTION_CLOSED 	= 0x0036
				!
				Number: DRIVE_UNKNOWN 		= 0
				Number: DRIVE_REMOVABLE 	= 2
				Number: DRIVE_FIXED 		= 3
				Number: DRIVE_REMOTE 		= 4
				!
				! Virtual Key values as seen in wParam when responding to WM_CHAR
				Number: VK_PRIOR 	= 0x21
				Number: VK_NEXT 		= 0x22
				Number: VK_END 		= 0x23
				Number: VK_HOME 	= 0x24
				Number: VK_LBUTTON 	= 0x01
				Number: VK_RBUTTON 	= 0x02
				Number: VK_CANCEL 	= 0x03
				Number: VK_MBUTTON 	= 0x04
				Number: VK_BACK 		= 0x08
				Number: VK_TAB 		= 0x09
				Number: VK_CLEAR 	= 0x0C
				Number: VK_RETURN 	= 0x0D
				Number: VK_SHIFT 	= 0x10
				Number: VK_CONTROL 	= 0x11
				Number: VK_MENU 	= 0x12
				Number: VK_PAUSE 	= 0x13
				Number: VK_CAPITAL 	= 0x14
				Number: VK_ESCAPE 	= 0x1B
				Number: VK_SPACE 	= 0x20
				Number: VK_LEFT 		= 0x25
				Number: VK_UP 		= 0x26
				Number: VK_RIGHT 	= 0x27
				Number: VK_DOWN 	= 0x28
				Number: VK_SELECT 	= 0x29
				Number: VK_PRINT 	= 0x2A
				Number: VK_EXECUTE 	= 0x2B
				Number: VK_SNAPSHOT 	= 0x2C
				Number: VK_INSERT 	= 0x2D
				Number: VK_DELETE 	= 0x2E
				Number: VK_HELP 		= 0x2F
				Number: VK_NUMPAD0 	= 0x60
				Number: VK_NUMPAD1 	= 0x61
				Number: VK_NUMPAD2 	= 0x62
				Number: VK_NUMPAD3 	= 0x63
				Number: VK_NUMPAD4 	= 0x64
				Number: VK_NUMPAD5 	= 0x65
				Number: VK_NUMPAD6 	= 0x66
				Number: VK_NUMPAD7 	= 0x67
				Number: VK_NUMPAD8 	= 0x68
				Number: VK_NUMPAD9 	= 0x69
				Number: VK_MULTIPLY 	= 0x6A
				Number: VK_ADD 		= 0x6B
				Number: VK_SEPARATOR 	= 0x6C
				Number: VK_SUBTRACT 	= 0x6D
				Number: VK_DECIMAL 	= 0x6E
				Number: VK_DIVIDE 	= 0x6F
				! Number: VK_F1 		= 0x70
				! Number: VK_F2 		= 0x71
				! Number: VK_F3 		= 0x72
				! Number: VK_F4 		= 0x73
				! Number: VK_F5 		= 0x74
				! Number: VK_F6 		= 0x75
				! Number: VK_F7 		= 0x76
				! Number: VK_F8 		= 0x77
				! Number: VK_F9 		= 0x78
				! Number: VK_F10 		= 0x79
				! Number: VK_F11 		= 0x7A
				! Number: VK_F12 		= 0x7B
				! Number: VK_F13 		= 0x7C
				! Number: VK_F14 		= 0x7D
				! Number: VK_F15 		= 0x7E
				! Number: VK_F16 		= 0x7F
				! Number: VK_F17 		= 0x80
				! Number: VK_F18 		= 0x81
				! Number: VK_F19 		= 0x82
				! Number: VK_F20 		= 0x83
				! Number: VK_F21 		= 0x84
				! Number: VK_F22 		= 0x85
				! Number: VK_F23 		= 0x86
				! Number: VK_F24 		= 0x87
				Number: VK_NUMLOCK 	= 0x90
				Number: VK_SCROLL 	= 0x91
				! 
						/* VK_A thru VK_Z are the same as their ASCII equivalents: 'A' thru 'Z' */
						/* VK_0 thru VK_9 are the same as their ASCII equivalents: '0' thru '0' */
						
				!
				! ---------------------------------------------------
				! Constants for Text
				! ---------------------------------------------------
				Number: ETO_GRAYED =	0x1
				Number: ETO_OPAQUE =	0x2
				Number: ETO_CLIPPED =	0x4
				!
				Number: TA_CENTER = 	0x6
				Number: TA_LEFT = 	0x0
				Number: TA_RIGHT =	0x2
				Number: TA_BASELINE =	0x18 
				Number: TA_BOTTOM =	0x8
				Number: TA_TOP =		0x0
				Number: TA_NOUPDATECP =	0x0
				Number: TA_UPDATECP =	0x1
				! ----------------------------------------------------
				Number: MM_TEXT =	0x1
				Number: MM_LOMETRIC =	0x2
				Number: MM_HIHMETRIC =	0x3
				Number: MM_LOENGLISH =	0x4
				Number: MM_HIENGLISH =	0x5
				Number: MM_TWIPS =	0x6
				Number: MM_ISOTROPIC =	0x7
				Number: MM_ANISOTROPIC =0x8
				! ---------------------------------------------------
				! Constants for Pens
				! ---------------------------------------------------
				Number: PS_SOLID = 0
				Number: PS_DASH = 1
				Number: PS_DOT = 2
				Number: PS_DASHDOT =  3
				Number: PS_DASHDOTDOT = 4
				! ------------------------------------------------------------
				! Constants for Clipboard
				! ------------------------------------------------------------
				! Number: CF_TEXT =		0x1
				! Number: CF_BITMAP =		0x2
				! Number: CF_METAFILEPICT =	0x3
				! Number: CF_SYLK =		0x4
				! Number: CF_DIF =			0x5
				! Number: CF_TIFF =			0x6
				! Number: CF_OEMTEXT =		0x7
				! Number: CF_DIB =			0x8
				! Number: CF_PALETTE =		0x9
				! Number: CF_PENDATATA =		0x10
				! Number: CF_RIFF =			0x11
				! Number: CF_WAVE =		0x12
				!
				! Number: CF_OWNERDISPLAY =	0x0080
				! Number: CF_DSPTEXT =		0x0081
				! Number: CF_DSPBITMAP =		0x0082
				! Number: CF_DSPMETAFILEPICT =	0x0083
				!
				! ---------------------------------------------------------------
				! Constants for GlobalAlloc
				! -----------------------------------------------------------------
				! Number: GMEM_DDSHARE =		0x2000
				! Number: GMEM_DISCARDABLE =	0x0100
				! Number: GMEM_FIXED =		0x0000
				! Number: GMEM_LOWER =		0x0100
				! Number: GMEM_MOVEABLE =	0x2000
				! Number: GMEM_NOCOMPACT =	0x0002
				! Number: GMEM_NODISCARD =	0x0010
				! Number: GMEM_NOT_BANKED =	0x0100
				! Number: GMEM_NOTIFY =		0x4000
				! Number: GMEM_SHARE =		0x2000
				! Number: GMEM_ZEROINIT =		0x0040
				! Number: GHND =			(GMEM_MOVEABLE | GMEM_ZEROINIT)		
				! Number: GPTR =			(GMEM_FIXED | GMEM_ZEROINIT)		
				!
				! -----------------------------------------------------------------
				! Constants for BitBlt
				! ------------------------------------------------------------------
				Number: BLACKNESS = 		0x00000042
				Number: DSTINVERT = 		0x00550009
				Number: MERGECOPY = 		0x00C000CA
				Number: MERGEPAINT = 		0x00BB0226
				Number: NOTSRCCOPY = 		0x00330008
				Number: NOTSRCERASE = 		0x001100A6
				Number: PATCOPY = 		0x00F00021
				Number: PATINVERT = 		0x005A0049
				Number: PATPAINT = 		0x00FB0A09
				Number: SRCAND = 		0x008800C6
				Number: SRCCOPY = 		0x00CC0020
				Number: SRCERASE = 		0x00440328
				Number: SRCINVERT = 		0x00660046
				Number: SRCPAINT = 		0x00EE0086
				Number: WHITENESS = 		0x00FF0062
				!
				! PrintDlg
				!
				Number: PD_RETURNDC = 		0x100
				!
				! ESCAPE
				!
				Number: STARTDOC =		10
				Number: NEWFRAME =		1
				Number: ENDDOC =		11
				!
				! ---------------------------------------------------------------------------
				! Constants for GetDeviceCaps
				! -----------------------------------------------------------------------------
				! Number: DRIVERVERSION =		0
				! Number: TECHNOLOGY =		2
				! Number: HORZSIZE =		4
				! Number: VERTSIZE =		6
				! Number: HORZRES =		8
				! Number: VERTRES =		10
				! Number: LOGPIXELSX =		88
				Number: LOGPIXELSSY =		90
				! Number: BITSPIXEL =		12
				! Number: PLANES =			14
				! Number: NUMBRUSHES =		16
				! Number: NUMPENS =		18
				! Number: NUMMARKERS =		20
				! Number: NUMFONTS =		22
				! Number: NUMCOLORS =		24
				! Number: ASPECTX =		40
				! Number: ASPECTY =		42
				! Number: ASPECTXY =		44
				! Number: PDEVICESIZE =		26
				! Number: CLIPCAPS =		36
				! Number: SIZEPALETTE =		104
				! Number: NUMRESERVED =		106
				! Number: COLORRES =		108
				! Number: RASTERCAPS =		38
				! Number: CURVECAPS =		28
				! Number: LINECAPS =		30
				! Number: POLYGONALCAPS =		32
				! Number: TEXTCAPS =		34
				!
				! ------------------------------------------------------------------------------------
				! Constants for CreateFont
				! --------------------------------------------------------------------------------------
				Number: DEFAULT_PITCH = 		0x00
				Number: FIXED_PITCH =		0x01
				Number: VARIABLE_PITCH = 		0x02
				!
				Number: FF_DECORATIVE = 		0x50
				Number: FF_DONTCARE =		0x00
				Number: FF_MODERN =		0x30
				Number: FF_ROMAN =		0x10
				Number: FF_SCRIPT =		0x40
				Number: FF_SWISS =		0x20
				!
				Number: OUT_DEFAULT_PRECIS = 0
				Number: OUT_STRING_PRECIS = 1
				Number: OUT_CHARACTER_PRECIS = 2
				Number: OUT_STROKE_PRECIS = 3
				Number: OUT_TT_PRECIS = 4
				Number: OUT_DEVICE_PRECIS = 5
				Number: OUT_RASTER_PRECIS = 6
				Number: OUT_TT_ONLY_PRECIS = 7
				!
				Number: ANSI_CHARSET = 0
				Number: DEFAULT_CHARSET = 1
				Number: SYMBOL_CHARSET = 2
				Number: SHIFTJIS_CHARSET = 128
				Number: HANGEUL_CHARSET = 129
				Number: CHINESEBIG5_CHARSET = 136
				Number: OEM_CHARSET = 255
				!
				Number: CLIP_DEFAULT_PRECIS =	0x00
				Number: CLIP_CHARACTER_PRECIS = 0x01
				Number: CLIP_STROKE_PRECIS =	0x02
				Number: CLIP_MASK =		0x0F
				Number: CLIP_LH_ANGLES =	0x10
				Number: CLIP_TT_ALWAYS = 	0x20
				Number: CLIP_EMBEDDED =		0x80
				!
				Number: DEFAULT_QUALITY = 	0
				Number: DRAFT_QUALITY = 		1
				Number: PROOF_QUALITY = 	2
				! -----------------------------------------------------------------------------------------------
				! Constants for sndPlaySound function in MMSYSTEM.DLL
				! -----------------------------------------------------------------------------------------------
				! Number: SND_SYNC =		 0	! does not return till sound is played in full
				! Number: SND_ASYNC =		 1	! returns once sound is started
				! Number: SND_NODEFAULT =	 2	! if sound not found, do not play default sound
				! Number: SND_MEMORY =		 4	! first parameter points to a sound image in memory
				! Number: SND_LOOP =		 8	! play sound repeatedly in a continuous loop, use with SND_ASYNC
				! Number: SND_NOSTOP =		16	! don't play sound if another sound is currently playing
				! -----------------------------------------------------------------------------------------------
				! Constants for COMBO BOX messages
				! -----------------------------------------------------------------------------------------------
				Number: CB_SETEDITSEL     = 	WM_USER+2
				Number: CB_SHOWDROPDOWN  = 	WM_USER+15
				! -----------------------------------------------------------------------------------------------
				! Constants for COMBO BOX notification codes
				! -----------------------------------------------------------------------------------------------
				Number: CBN_EDITCHANGE = 	5
				Number: CBN_EDITUPDATE = 	6
				! Sql Error handling constants
				Number: ERROR_InvalidUserName		= 00405
				Number: ERROR_InvalidPassword 		= 00404
				Number: ERROR_CannotOpenDatabase 	= 00401
				Number: ERROR_DeadLock	 		= 01801
				Number: ERROR_TimeOut	 		= -1805
				Number: ERROR_DuplicateKey		= 00805
				Number: ERROR_InvalidRowID		= 00806
				Number: ERROR_CannotDelete_DependentRows	= 00383
				!
				! Sql Windows Constants
				Number: IT_FormWindow 		= 1
				Number: IT_TableWindow 		= 2
				Number: IT_ChildTableWindow 	= 3
				Number: IT_DataField 		= 4
				Number: IT_MultiLineField		= 5 
				Number: IT_PushButton		= 6
				Number: IT_RadioButton		= 7
				Number: IT_CheckBox		= 8
				Number: IT_BackgroundText		= 12
				Number: IT_Column 		= 13
				Number: IT_ListBox			= 14
				Number: IT_ComboBox 		= 15
				Number: IT_MDIWindow 		= 19
				Number: IT_OptionButton		= 20
				Number: IT_DialogBox 		= 66
				Number: IT_ChildQuestTable		= 273
				Number: IT_QuestTableWindow	= 274
				!
				! Undocumented columns flags for Table Window Columns
				Number: COL_Visible 	= 0x0001
				Number: COL_Invisible 	= 0x0010
				Number: COL_DimTitle 	= 0x0020
				Number: COL_ReadOnly 	= 0x0200
				Number: COL_UpperCase 	= 0x0400
				Number: COL_LowerCase 	= 0x0800
				! Menu flags for Add/Check/EnableMenuItem().
				! Number: MF_INSERT		= 0x0000
				! Number: MF_CHANGE		= 0x0080
				! Number: MF_APPEND		= 0x0100
				! Number: MF_DELETE		= 0x0200
				! Number: MF_REMOVE		= 0x1000
				! Number: MF_BYCOMMAND		= 0x0000
				! Number: MF_ByPosition		= 0x0400
				! Number: MF_SEPARATOR		= 0x0800
				! Number: MF_ENABLED		= 0x0000
				! Number: MF_GRAYED		= 0x0001
				! Number: MF_DISABLED		= 0x0002
				! Number: MF_UNCHECKED		= 0x0000
				! Number: MF_CHECKED		= 0x0008
				! Number: MF_USECHECKBITMAPS	= 0x0200
				Number: MF_STRING		= 0x0000
				! Number: MF_BITMAP		= 0x0004
				! Number: MF_OWNERDRAW		= 0x0100
				Number: MF_POPUP		= 0x0010
				! Number: MF_MENUBARBREAK	= 0x0020
				! Number: MF_MENUBREAK		= 0x0040
				! Number: MF_UNHILITE		= 0x0000
				! Number: MF_HILITE			= 0x0080
				! Number: MF_SYSMENU		= 0x2000
				! Number: MF_HELP			= 0x4000
				! Number: MF_MOUSESELECT		= 0x8000
			User
				! Not included in the SDK but useful nonetheless
				Number: VK_UNDERSCORE = 0x5F
				Number: VK_LINEFEED = 0x0A
				! User defined messages
				Number: PAM_ModuleWndInfo 	= PAM_Wim_User + 10
				Number: PAM_WndInfo 		= PAM_ModuleWndInfo + 1
				! Beginnummer voor boodschappen in deze apl
				Number: PAM_User_DynSql		= PAM_Wim_User + 5
				!
				Number: PAM_NavigateRecord	= PAM_User_DynSql
				Number: NAV_FirstRecord		= 1
				Number: NAV_PreviousRecord	= 2
				Number: NAV_NextRecord		= 3
				Number: NAV_LastRecord		= 4
				!
				Number: PAM_Actions		= PAM_User_DynSql + 1
				Number: ACT_Clear			= 1
				Number: ACT_Retrieve		= 2
				Number: ACT_ApplyChanges		= 3
				Number: ACT_UndoChanges		= 4
				Number: ACT_DeleteRecord		= 5
				Number: ACT_NewRecord		= 6
				Number: ACT_Refresh		= 7
				Number: ACT_DeleteAllDetails	= 8
				Number: ACT_Commit		= 9
				Number: ACT_Rollback		= 10
				Number: ACT_RetrieveRO		= 11
				!
				! Constants used with the function AutoAttach
				Number: DS_Select			=   1
				Number: DS_Update		=   2
				Number: DS_Insert			=   4
				Number: DS_SelectWhereEqual	=   8
				Number: DS_UpdateWhereEqual	= 16
				Number: DS_DeleteWhereEqual	= 32
				!
				! Constants used for inserting in table windows
				Number: INSERT_Before		= 0
				Number: INSERT_After			= 1
				Number: INSERT_Top			= 2
				Number: INSERT_Bottom		= 3
				!
				! WERKEN MET RECORDS:  6 MODES, bijgehouden in variable inSqlMode
				Number: SQLMODE_Empty		= 1
				Number: SQLMODE_EmptyModified	= 2
				Number: SQLMODE_New		= 3
				Number: SQLMODE_NewModified	= 4
				Number: SQLMODE_Modified		= 5
				Number: SQLMODE_NotModified	= 6
				! Beginnummer voor boodschappen in deze apl
				Number: PAM_User_Clear		= PAM_Wim_User + 1
				Number: PAM_Clear		= PAM_User_Clear
				Number: PAM_Dirty			= PAM_User_Clear + 1
				! The TAB constant is a quoted TAB character.
				String: TAB = '	' 
				! SQL Reserved Words
				String: COMMA				= ', '
				String: DOT				= '.'
				String: COLON				= ':'
				String: QUOTE                                		= '\''
				String: DOUBLEQUOTE                         		= '"'
				String: OPEN_PAR				= ' ( '
				String: CLOSE_PAR			= ' ) '
				String: EQUAL                                		= ' = '
				String: NOT_EQUAL			= ' != '
				String: S_AND				= ' AND '
				String: ASC                         			= ' ASC '
				String: BETWEEN                              		= ' BETWEEN '
				String: COMMIT                  	          		= 'COMMIT '
				String: DELETE_FROM                 		= 'DELETE FROM '
				String: DESC                           	      		= ' DESC '
				String: DISTINCT                             		= ' DISTINCT '
				String: FOR_UPDATE_OF			= ' FOR UPDATE OF '
				String: FROM                          	     		= ' FROM '
				String: GROUP_BY                              		= ' GROUP BY '
				String: IN					= ' IN '
				String: INTO                      	          		= ' INTO '
				String: INSERT_INTO      	            		= 'INSERT ' || INTO
				String: IS_NOT_NULL			= ' IS NOT NULL '
				String: IS_NULL				= ' IS NULL '
				String: LIKE                           	      		= ' LIKE '
				String: NOT_IN				= ' NOT IN '
				String: NOT_LIKE				= ' NOT LIKE '
				String: S_OR				= ' OR '
				String: ORDER_BY                             		= ' ORDER BY '
				String: OUTERJOIN				= ' (+) '
				String: ROLLBACK                             		= 'ROLLBACK '
				String: SELECT				= ' SELECT '
				String: S_SET                               		= ' SET '
				String: UNION				= ' UNION '
				String: UPDATE                               		= 'UPDATE '
				String: VALUES                              		= ' VALUES '
				String: WHERE                                		= ' WHERE '
				String: SYSDATETIME                  		= ' SYSDATETIME '
				String: USER                          	 		= ' USER '
				String: SYSADM                              	 	= 'SYSADM'
				String: LOWER                              	 	= ' < '
				String: LOWER_EQUAL                              	 = ' <= '
				String: GREATER                              	 	= ' > '
				String: GREATER_EQUAL                              	 = ' >= '
				! Message for translation
				Number: PAM_Language			 = PAM_Wim_User + 100
				Number: PAM_MenuLanguage		 = PAM_Wim_User + 101
				Number: PAM_TabLabelLanguage		 = PAM_Wim_User + 102
				Number: PAM_TranslateTabLabels		 = PAM_Wim_User + 103
				! Return values of function PalSqlTrans
				Number: TRANS_Ok		= 1
				Number: TRANS_Error		= 2
				Number: TRANS_Retry		= 3
				Number: TRANS_Cancel		= 4
				!
				!
				! LS : 18/06/2001
				Number: WM_TEST_PRGM			= 0x13FE
				!
				! /@@@@@ LS : 30/11/1999
				! Constantes pour l'enregistrement des positions dans un tableau
				Number: cSitSave				= 1
				Number: cSitLoad				= 2
				! \@@@@@ LS : 30/11/1999
				!
				! /##### LS : 05/11/2002
				! Constante pour la gestion des touches de raccourcis
				!
				! Message pour l'utilisation des touches ALT et + pour l'ajout de données
				Number: PAM_ActiveKey			= PAM_Wim_User_End - 1
				Number: PAL_VK_Plus			= 1
				Number: PAL_VK_Moins			= 2
				Number: PAL_VK_Fois			= 3
				! \##### LS : 05/11/2002
				! ! Application messages:
				Number: PM_FORM_RESIZED		= PAM_Wim_User + 50	! if 50 conflicts with your app, choose another number
				!
				!
				! /##### LS : 17/10/2003
				Number: PAM_DisableField		= PAM_Wim_User + 0x0070
				! \##### LS : 17/10/2003
				!
				!
				! /##### LS : 20/11/2003
				! Message pour la traduction des menus
				Number: PAM_TranslateMenu		= PAM_Stesud_User + 30
				Number: PAL_TranslateMenuInit	= 1
				Number: PAL_TranslateMenuClose	= 2
				Number: PAL_TranslateMenuSys	= 0
				! \##### LS : 20/11/2003
				Number: WM_MOUSEWHEEL                   	= 0x020A
					! Description:	Sent to a window when a the scroll wheel is used
							wParam:		Low word: the keys ( MK_CONTROL... )
									High word: the Delta
				! Number: MK_CONTROL			= 0x0008
				! Number: WHEEL_DELTA 		= 120
				! Number: MK_SHIFT			= 0x0004
			Enumerations
		Resources
			Bitmap: resMoveUp
				File Name: c:\p_lib32\resource\MOVEUP.BMP
			Bitmap: resMoveDown
				File Name: c:\p_lib32\resource\MOVEDOWN.BMP
			Bitmap: resSortAsc
				File Name: c:\p_lib32\resource\SORTASC.BMP
			Bitmap: resSortDesc
				File Name: c:\p_lib32\resource\SORTDESC.BMP
			Bitmap: resRetrieve
				File Name: c:\p_lib32\resource\RETRIEVE.BMP
			Bitmap: resZoomIn
				File Name: c:\p_lib32\resource\ZOOMIN1.BMP
		Variables
.data RESOURCE 0 0 1 3680721776
0000: 84010000A6000000 0000000000000000 0200000C00000099 0500001019000000
0020: 010000FE00FFA3B2 050019B5000100FF FF08CB0500040000 00E102000000FF3F
0040: CF055A00190001FB 00FF8FE80500D619 0001FE00FF830106 000004A100010200
0060: 00FF078001000000 FF680506001900E9 010000FF3F1E061A 0004000102FB007F
0080: 80F20100008F2206 009619000100FE00 FFA33B060004B100 010200FF27800100
00A0: 00FF683F06000400 ED0200FF3F43065A 00040002FB00FF0F
.enddata
			Window Handle: gwhTrackPopupMenu
			! /@@@@@ LS : 30/11/1999
			! Variable pour l'enregistrement des positions des colonnes
			String: gtsColName
			Number: gtnNbrCol
			Window Handle: gtwhTabCol[*]
			Number: gtnTabColSize[*]
			Boolean: gbSauverPositionColonnes
			! \@@@@@ LS : 30/11/1999
			! WndInfo Parameters
			Boolean: gParamWndInfoIconize
			! Boolean: si TRUE, les colonnes utilisées pour trier un table window sont mises automatiquement au début du table window
			Boolean: gbPosColumnsDependingOrderBy
			Boolean: gbSplitTblWhenInsert
			!
			!
			! /@@@@@ LS  : 29/10/99
			String: gsIdPrgm
			! \@@@@@ LS : 29/10/99
			FunctionalVar: gCacheMgr
				Class: clsCachePool
			! Variable voor debug: indien TRUE, dan wordt sql-statement getoond in een messagebox alvorens 
					het sql-statement uitgevoerd wordt.
			Boolean: gbDynSqlDebug
			String: gsIniFilePathAndName
			String: gsIniFilePathAndNameMenu
			! /@@@@@ LS : 13/12/1999
			String: gsIniFilePathAndModuleName
			String: gsLocalIniFilePathAndName
			! \@@@@@ LS : 13/12/1999
			!
			String: gsUserName
			String: gsUserPassword
			String: gsDatabaseName
			String: gsDatabaseNameEuro
			!
			Boolean: gbShowOnlyModAndInsRows
			!
			! Boolean: gbConnectionEstablished
			! Sql Handle: ghSqlMain
			! Sql Handle: ghSqlError
			! String: gsPath
			! Number: gnError
			! Number: gnErrorPos
			!
			!
			! String: gsCamera
			! String: gsErrorMessage
			!
			! String: gsCurrentShift
			! String: gsPrisonNl
			! String: gsPrisonFr
			! String: gsPrisonCode
			!
			Number: gnHelpContext
			!
			! Number: gnParamArray[5]
			! Nodig voor items in combobox van bezoekerstypes te beperken volgens gebruikersgroep
			! String: gsVType
			! String: gsSelectVTyp
			! String: gsInVTypes
			! Number: gnReturn
			!
			! Nr van classement (komt uit ini file)
			! String: gsClassement
			!
			! String: gsArrDetScroll[*]
			! String: gsArrPersScroll[*]
			! String: gsArrVisrScroll[*]
			! Permissies
			String: gsErrorLogFileName
			String: gsErrorLog
			String: gsErrorEMail
			String: gsErrorApplication
			String: gsErrorIdClient
			String: gsErrorApp
			String: gsErrorINS
			String: gsErrorLocalite
			Long String: gsErrorSqlStmt
			String: gsApplicationName
			String: SourceDate
			String: SourceVersion
			! Number: gnLanguage
			! Number: gnLanguage2
			Boolean: gbConnectionEstablished
			Sql Handle: ghSqlMain
			Sql Handle: ghSqlError
			String: gsPath
			Number: gnError
			Number: gnErrorPos
			Boolean: gbRollback
			String: gsErrorMessage
			Long String: gsErrorSqlStatement
			! /@@@@@ LS : 26/11/1997
			String: gsPalSqlName
			! \@@@@@ LS : 26/11/1997
			!
			!
			! LS : 18/06/2001
			! String: sPrgKey
			! String: sRcvKey
			! !
			! ! Tableau contenant les permissions d'accès à des fonctionnalités
			Number: gnTabPermissions[*]
			Number: gnPermBasePermission
			Number: gnPermMin
			! !
			! ! Contrôle que l'année est clôturée
			Boolean: gbAnneeCloturee
			! !
			! !
			FunctionalVar: TradMenu
				Class: clsTranslateMenu
			!
			!
			String: gsALoginPwd[ *,3 ]
			Number: gnRowFind
			String: gsStringFind
		Internal Functions
			Function: SetParamWndInfoIconize
				Description:
				Returns
				Parameters
					Boolean: pbParamWndInfoIconize
				Static Variables
				Local variables
				Actions
					Set gParamWndInfoIconize = pbParamWndInfoIconize
			Function: PalSqlConnect
				Description: Connection à la DB
				Returns
					Boolean:
				Parameters
					Receive Sql Handle: prhSql
				Static Variables
				Local variables
					Boolean: lbOk
				Actions
					Set lbOk = SqlConnect( prhSql )
					If lbOk
						Call SqlSetIsolationLevel( prhSql, 'RL' )
						If SalStrLength( gsIdPrgm ) > 0
							Call SqlSetParameterAll( prhSql, 3024, 0, gsIdPrgm, FALSE )
						Call SqlSetParameter( prhSql, DBP_PRESERVE, TRUE, '' )
					Return lbOk
			Function: PalGetErrorSql
				Description:
				Returns
					Number:
				Parameters
					Number: wParam
					Number: lParam
				Static Variables
				Local variables
					Sql Handle: lhSql
					Number: lnError
					Number: lnErrorPos
				Actions
					Call SqlExtractArgs( wParam, lParam, lhSql, lnError, lnErrorPos )
					Return lnError
			Function: PalIdentSql
				Description: Connection à la DB
				Returns
				Parameters
					Sql Handle: prhSql
					String: psIdent
				Static Variables
				Local variables
					Boolean: lbOk
				Actions
					If SalStrLength( psIdent ) > 0
						Call SqlSetParameterAll( prhSql, 3024, 0, psIdent, FALSE )
			Function: PalSqlConnectTransaction
				Description: Connection à la DB
				Returns
					Boolean:
				Parameters
					Receive Sql Handle: prhSql
					String: psTransaction
				Static Variables
				Local variables
					Boolean: lbOk
				Actions
					! Set lbOk = SqlConnectTransaction( prhSql, psTransaction )
					Set lbOk = SqlConnect( prhSql )
					If lbOk
						Call SqlSetIsolationLevel( prhSql, 'RL' )
						If SalStrLength( gsIdPrgm ) > 0
							Call SqlSetParameterAll( prhSql, 3024, 0, gsIdPrgm, FALSE )
						Call SqlSetParameter( prhSql, DBP_PRESERVE, TRUE, '' )
					Return lbOk
			Function: PalLayoutTblEditable
				Description:
				Returns
				Parameters
					Window Handle: phWndTbl
				Static Variables
				Local variables
				Actions
					! Layout
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_SuppressLastColLine, TRUE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_SuppressRowLines, FALSE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_SingleSelection, TRUE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_HScrollByCols, FALSE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_SizableCols, FALSE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_MovableCols, TRUE )
					Call SalTblDefineRowHeader( phWndTbl, '', 16, TBL_RowHdr_MarkEdits | TBL_RowHdr_Visible, hWndNULL )
					Call SalColorSet( phWndTbl, COLOR_IndexWindow, COLOR_SysWindow )
					!
			Function: PalLayoutTblNotEditable
				Description:
				Returns
				Parameters
					Window Handle: phWndTbl
				Static Variables
				Local variables
				Actions
					! Layout
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_SuppressLastColLine, TRUE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_SuppressRowLines, TRUE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_SingleSelection, TRUE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_HScrollByCols, FALSE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_SizableCols, FALSE )
					Call SalTblSetTableFlags( phWndTbl, TBL_Flag_MovableCols, TRUE )
					Call SalTblDefineRowHeader( phWndTbl, '', 0, 0, hWndNULL )
					Call SalColorSet( phWndTbl, COLOR_IndexWindow, COLOR_3DFace )
					!
			Function: SqlGetServerSystemDate
				Description:
				Returns
					Boolean:
				Parameters
					Receive Date/Time: pdtSysDate
				Static Variables
				Local variables
					Sql Handle: lhSql
					String: lsDate
					Number: lnReturn
				Actions
					If SqlConnect( lhSql )
						When SqlError
							Set gnError = SqlError( lhSql )
							Call SqlGetErrorText( gnError, gsErrorMessage )
							Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
									SQL: ' || 'SELECT DISTINCT SYSDATE FROM SYSTABLES INTO :pdtSysDate'   )
							Return FALSE
						If SqlPrepareAndExecute( lhSql, 'SELECT DISTINCT SYSDATE FROM SYSTABLES INTO :pdtSysDate' )
							If SqlFetchNext( lhSql, lnReturn )
								Call SalDateToStr( pdtSysDate , lsDate)
								Return TRUE
						Call SqlDisconnect( lhSql )
					Return FALSE
			Function: SqlGetServerSystemDateTime
				Description:
				Returns
					Boolean:
				Parameters
					Receive Date/Time: pdtSysDate
				Static Variables
				Local variables
					Sql Handle: lhSql
					String: lsDate
					Number: lnReturn
				Actions
					If SqlConnect( lhSql )
						When SqlError
							Set gnError = SqlError( lhSql )
							Call SqlGetErrorText( gnError, gsErrorMessage )
							Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
									SQL: ' || 'SELECT DISTINCT SYSDATETIME FROM SYSTABLES INTO :pdtSysDate'   )
							Return FALSE
						If SqlPrepareAndExecute( lhSql, 'SELECT DISTINCT SYSDATETIME FROM SYSTABLES INTO :pdtSysDate' )
							If SqlFetchNext( lhSql, lnReturn )
								Call SalDateToStr( pdtSysDate , lsDate)
								Return TRUE
						Call SqlDisconnect( lhSql )
					Return FALSE
			Function: PalGetItemName
				Description: Returns the window name from a window handle.
				Returns
					String:
				Parameters
					Window Handle: phWnd
				Static Variables
				Local variables
					String: lsItemName
				Actions
					If SalGetItemName( phWnd, lsItemName )
						Return lsItemName
					Else
						Return ''
			Function: PalMessageBox
				Description: Variant van SalMessageBox voor NL en FR tekst.
				Returns
					Number:
				Parameters
					String: psTextNL
					String: psTextFR
					String: psTitleNL
					String: psTitleFR
					Number: pnFlags
				Static Variables
				Local variables
				Actions
					Select Case gnLanguage
						Case Language_DE
						Case Language_NL
							Return SalMessageBox( psTextNL, psTitleNL, pnFlags )
							Break
						Case Language_FR
							Return SalMessageBox( psTextFR, psTitleFR, pnFlags )
							Break
						Default
							Return SalMessageBox( 'Language not supported in function PalMessageBox', 'Development Error', pnFlags )
							Break
			Function: PalDateToStrX
				Description: Converts a date/time value to a string value.
						Returns a null string ('') if you specify DATETIME_Null as a parameter.
				Returns
					String:
				Parameters
					Date/Time: pdtDateTime
				Static Variables
				Local variables
					String: lsStr
				Actions
					If SalDateToStr( pdtDateTime, lsStr ) >= 0
						Return lsStr
					Else
						Return ''
			Function: PalStrToStrRawX
				Description: Returns the string in uppercase and without: blancs, delimiters, ...
						Only letters and digits are in the result string.
				Returns
					String:
				Parameters
					String: psOrig
				Static Variables
				Local variables
				Actions
					If psOrig != ''
						Set psOrig = SalStrTrimX( psOrig )
						Set psOrig = SalStrUpperX( psOrig )
						!
						Set psOrig = VisStrSubstitute( psOrig, ' ', '' )
						!
						Set psOrig = VisStrSubstitute( psOrig, '~', '' )
						Set psOrig = VisStrSubstitute( psOrig, '!', '' )
						Set psOrig = VisStrSubstitute( psOrig, '@', '' )
						Set psOrig = VisStrSubstitute( psOrig, '#', '' )
						Set psOrig = VisStrSubstitute( psOrig, '$', '' )
						Set psOrig = VisStrSubstitute( psOrig, '%', '' )
						Set psOrig = VisStrSubstitute( psOrig, '^', '' )
						Set psOrig = VisStrSubstitute( psOrig, '&', '' )
						Set psOrig = VisStrSubstitute( psOrig, '*', '' )
						Set psOrig = VisStrSubstitute( psOrig, '(', '' )
						Set psOrig = VisStrSubstitute( psOrig, ')', '' )
						Set psOrig = VisStrSubstitute( psOrig, '_', '' )
						Set psOrig = VisStrSubstitute( psOrig, '+', '' )
						Set psOrig = VisStrSubstitute( psOrig, '-', '' )
						Set psOrig = VisStrSubstitute( psOrig, '=', '' )
						Set psOrig = VisStrSubstitute( psOrig, '|', '' )
						Set psOrig = VisStrSubstitute( psOrig, '\\', '' )
						Set psOrig = VisStrSubstitute( psOrig, '[', '' )
						Set psOrig = VisStrSubstitute( psOrig, ']', '' )
						Set psOrig = VisStrSubstitute( psOrig, '{', '' )
						Set psOrig = VisStrSubstitute( psOrig, '}', '' )
						Set psOrig = VisStrSubstitute( psOrig, ':', '' )
						Set psOrig = VisStrSubstitute( psOrig, '"', '' )
						Set psOrig = VisStrSubstitute( psOrig, '\'', '' )
						Set psOrig = VisStrSubstitute( psOrig, ';', '' )
						Set psOrig = VisStrSubstitute( psOrig, '?', '' )
						Set psOrig = VisStrSubstitute( psOrig, ',', '' )
						Set psOrig = VisStrSubstitute( psOrig, '.', '' )
						Set psOrig = VisStrSubstitute( psOrig, '/', '' )
						!
					Return psOrig
			Function: PalTblFindString
				Description: Zoals VisTblFindString maar de kolom moet volledig overeenkomen met de gezochte string. 
						In VisTblFindString wordt een rij gezocht die de gezochte string BEVAT.
						
						Er wordt enkel gezocht in de opgegeven kolom.
				Returns
					Number:
				Parameters
					Window Handle: phWndTable
					Number: pnStartRow
					Window Handle: phWndColumn
					String: psString
				Static Variables
				Local variables
					Number: lnRow
					String: lsColText
				Actions
					If phWndColumn = hWndNULL
						Call SalMessageBox( 'Column must be specified', 'Error using function PalTblFindString', MB_Ok )
						Return FALSE
					While SalTblFindNextRow( phWndTable, pnStartRow, 0, 0 )
						Call SalTblSetContext( phWndTable, pnStartRow )
						Call SalTblGetColumnText( phWndTable, SalTblQueryColumnID( phWndColumn ), lsColText )
						If lsColText = psString
							Return pnStartRow
					Return -1
			Function: PalDateYearDay
				Description: Conversion d'une date en jours.
				Returns
					Number: nNbrJour
				Parameters
					Date/Time: dtDateToConvert
				Static Variables
				Local variables
				Actions
					Return dtDateToConvert - SalDateYearBegin( dtDateToConvert )
			Function: PalSplitString
				Description:
				Returns
				Parameters
					String: psInit
					String: psSeparator
					Number: pnMaxLength
					Receive String: psSplittedString
				Static Variables
				Local variables
					Number: lnPos
				Actions
					If SalStrLength( psInit ) > pnMaxLength
						Set lnPos = VisStrScanReverse( psInit, pnMaxLength - 1 , ',' )
						Set psSplittedString = 
									VisStrPad( SalStrLeftX( psInit, lnPos + 1 ), pnMaxLength ) ||
									SalStrMidX( psInit, lnPos + 1, SalStrLength( psInit ) - ( lnPos + 1) )
					Else
						Set psSplittedString = psInit
			Function: PalPermissionsOk
				Description:
				Returns
					Boolean:
				Parameters
					Number: pnFunctionCode
				Static Variables
				Local variables
					String: lsSelect
					Number: pnValue
				Actions
					! LS 12/05/2000 : Retrait de la table FUNCTIONS du FROM dans le select: elle ne servait à rien et ne se trouvait pas dans le WHERE
					Set lsSelect = 
								SELECT || 'count(*)' ||
								FROM || 'users, grp_user, groups, grp_fun' ||
								WHERE || '@UPPER(users.user_login)' || EQUAL || '@UPPER(USER)' || 
								S_AND || 'users.user_cod' || EQUAL || 'grp_user.user_cod' ||
								S_AND || 'groups.grp_cod' || EQUAL || 'grp_user.grp_cod' ||
								S_AND || 'groups.grp_cod' || EQUAL || 'grp_fun.grp_cod' ||
								S_AND || 'grp_fun.fun_cod' || EQUAL || SalNumberToStrX( pnFunctionCode, 0 ) ||
								INTO || ':pnValue'
					If gbDynSqlDebug
						Call SalModalDialog( dlgDebugDynSql, hWndForm, lsSelect, TRUE )
					If SqlImmediate(lsSelect)
						If pnValue > 0 
							Return TRUE
					Return FALSE
			Function: PalGetApplParm
				Description:
				Returns
					Boolean:
				Parameters
					String: psParName
					Receive String: psValue
				Static Variables
				Local variables
					String: lsValue
					String: lsSelect
					Number: lnReturn
				Actions
					! HIER SOMS ONVERKLAARBARE PROBLEMEN
					Set lsSelect = 'select value from appl_parm into :psValue where name = ' || QUOTE|| psParName || QUOTE
					When SqlError
						Set gnError = SqlError( ghSqlMain )
						Call SqlGetErrorText( gnError, gsErrorMessage )
						Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
								SQL: ' || lsSelect  )
						Return FALSE
					If SqlPrepareAndExecute( ghSqlMain, lsSelect )
						If SqlFetchNext( ghSqlMain, lnReturn )
							Return TRUE
					Return FALSE
					! Return SqlImmediate(lsSelect)
			Function: PalGetApplParmN
				Description:
				Returns
					Boolean:
				Parameters
					String: psParName
					Receive Number: rpnValue
				Static Variables
				Local variables
					String: lsValue
					String: lsSelect
					Number: lnReturn
					String: s1
				Actions
					! HIER SOMS ONVERKLAARBARE PROBLEMEN
					Set lsSelect = 'select value from appl_parm into :s1 where name = ' || QUOTE|| psParName || QUOTE
					When SqlError
						Set gnError = SqlError( ghSqlMain )
						Call SqlGetErrorText( gnError, gsErrorMessage )
						Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
								SQL: ' || lsSelect  )
						Return FALSE
					If SqlPrepareAndExecute( ghSqlMain, lsSelect )
						If SqlFetchNext( ghSqlMain, lnReturn )
							Set rpnValue = SalStrToNumber( s1 )
							Return TRUE
					Return FALSE
					! Return SqlImmediate(lsSelect)
			! /##### LS : 16/04/2007
			Function: PalGetApplParmX
				Description:
				Returns
					String:
				Parameters
					String: psApplParm
				Static Variables
				Local variables
					String: lsValue
				Actions
					If PalGetApplParm( psApplParm, lsValue )
						Return lsValue
					Else
						Return STRING_Null
			Function: PalGetApplParmBX
				Description:
				Returns
					Boolean:
				Parameters
					String: psApplParm
				Static Variables
				Local variables
					String: lsValue
				Actions
					If PalGetApplParm( psApplParm, lsValue )
						Return SalStrScan( 'YyOo1', lsValue )  >= 0
					Else
						Return FALSE
			Function: PalGetApplParmNoX
				Description:
				Returns
					String:
				Parameters
					Number: pnApplParm
					Number: pnLength
				Static Variables
				Local variables
					String: lsValue
				Actions
					If PalGetApplParm( 'PAR' || SalStrRightX( SalStrRepeatX( '0', pnLength ) || SalNumberToStrX( pnApplParm, 0 ), pnLength ), lsValue )
						Return lsValue
					Else
						Return STRING_Null
			Function: PalGetApplParmNoX4
				Description:
				Returns
					String:
				Parameters
					Number: pnApplParm
				Static Variables
				Local variables
					String: lsValue
				Actions
					Return PalGetApplParmNoX( pnApplParm, 4 )
			! \##### LS : 16/04/2007
			Function: PalNextValueApplParm
				Description: Sets the parameter to the next value and returns this value.
				Returns
					Boolean:
				Parameters
					String: psParName
					Receive String: psValue
				Static Variables
				Local variables
					Sql Handle: lhSql
					String: lsSql
					Number: lnReturn
					Boolean: lbSuccess
					Number: lnError
					String: lsErrorMessage
				Actions
					Set lbSuccess = TRUE
					If Not SqlConnect( lhSql ) And lbSuccess
						Set lbSuccess = FALSE
					Set lsSql = UPDATE || 'appl_parm' || 
									S_SET || 'value' || EQUAL ||  '@STRING(@VALUE(value) + 1, 0 )' || 
									WHERE || 'name' || EQUAL || QUOTE || psParName || QUOTE
					When SqlError
						Set lnError = SqlError( lhSql )
						Call SqlGetErrorText( lnError, lsErrorMessage )
						Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || lsErrorMessage || ' 
								SQL: ' || lsSql  )
						Return FALSE
					If Not SqlPrepareAndExecute( lhSql, lsSql ) And lbSuccess
						Set lbSuccess = FALSE
					Set lsSql = SELECT || 'value' || 
									INTO || ':psValue' || FROM || 'appl_parm' || 
									WHERE ||  'name' || EQUAL || QUOTE || psParName || QUOTE
					When SqlError
						Set lnError = SqlError( lhSql )
						Call SqlGetErrorText( lnError, lsErrorMessage )
						Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || lsErrorMessage || ' 
								SQL: ' || lsSql  )
						Return FALSE
					If Not SqlPrepareAndExecute( lhSql, lsSql ) And lbSuccess
						Set lbSuccess = FALSE
					If Not SqlFetchNext( lhSql, lnReturn ) And lbSuccess
						Set lbSuccess = FALSE
					If lnReturn != FETCH_Ok And lbSuccess
						Set lbSuccess = FALSE
					If lbSuccess
						If Not SqlCommit( lhSql )
							Set lbSuccess = FALSE
					Else
						Call SqlPrepareAndExecute( lhSql, 'ROLLBACK' )
					If lbSuccess and Not SqlDisconnect( lhSql )
						Set lbSuccess = FALSE
					Return lbSuccess
			Function: PalNextValueSidisFiles
				Description: Sets the parameter to the next value and returns this value.
				Returns
					Boolean:
				Parameters
					Date/Time: pdtDate
					Receive String: psValue
				Static Variables
				Local variables
					Sql Handle: lhSql
					String: lsSql
					Number: lnReturn
					Boolean: lbSuccess
					Date/Time: ldtDateCurrent
					String: lsDatePrevious
					String: lsDateCurrent
					String: lsValue
					Number: lnError
					String: lsErrorMessage
				Actions
					Call PalGetApplParm( 'PAR0005', lsDatePrevious )
					Set lsDateCurrent = PalDateToStrX( pdtDate )
					Set lbSuccess = TRUE
					If lsDateCurrent != lsDatePrevious
						If Not SqlConnect( lhSql ) And lbSuccess
							Set lbSuccess = FALSE
						Set lsSql = UPDATE || 'appl_parm' || 
										S_SET || 'value' || EQUAL ||  QUOTE || lsDateCurrent || QUOTE || 
										WHERE || 'name' || EQUAL || QUOTE || 'PAR0005' || QUOTE
						When SqlError
							Set lnError = SqlError( lhSql )
							Call SqlGetErrorText( lnError, lsErrorMessage )
							Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || lsErrorMessage || ' 
									SQL: ' || lsSql  )
							Return FALSE
						If Not SqlPrepareAndExecute( lhSql, lsSql ) And lbSuccess
							Set lbSuccess = FALSE
						Set lsSql = UPDATE || 'appl_parm' || 
										S_SET || 'value' || EQUAL ||  QUOTE || '0' || QUOTE || 
										WHERE || 'name' || EQUAL || QUOTE || 'PAR0004' || QUOTE
						When SqlError
							Set lnError = SqlError( lhSql )
							Call SqlGetErrorText( lnError, lsErrorMessage )
							Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || lsErrorMessage || ' 
									SQL: ' || lsSql  )
							Return FALSE
						If Not SqlPrepareAndExecute( lhSql, lsSql ) And lbSuccess
							Set lbSuccess = FALSE
						If lbSuccess
							If Not SqlCommit( lhSql )
								Set lbSuccess = FALSE
						Else
							Call SqlPrepareAndExecute( lhSql, 'ROLLBACK' )
						If lbSuccess and Not SqlDisconnect( lhSql )
							Set lbSuccess = FALSE
					If PalNextValueApplParm( 'PAR0004', lsValue )
						Set psValue = lsValue
					Else
						Set lbSuccess = FALSE
					Return lbSuccess
			Function: PalCheckDigitMod97
				Description: Returns TRUE if the last two digits are equal to modulo 97 of the other digits
				Returns
					Boolean:
				Parameters
					String: psNumber
				Static Variables
				Local variables
					Number: lnNumber
					Number: lnCheckDigit
					Number: lnModulo
				Actions
					Set psNumber = PalStrToStrRawX( psNumber )
					Set lnNumber = SalStrToNumber( SalStrMidX( psNumber, 0, SalStrLength( psNumber )  - 2 ) )
					Set lnCheckDigit = SalStrToNumber(  SalStrMidX( psNumber, SalStrLength( psNumber )  - 2 , 2) )
					Set lnModulo = SalNumberMod( lnNumber, 97 )
					Return lnModulo = lnCheckDigit
			Function: PalDoubleSQuote
				Description: Elke single quote wordt vervangen door twee single quotes
				Returns
					String:
				Parameters
					String: psStr
				Static Variables
				Local variables
				Actions
					Return VisStrSubstitute( psStr, '\'', '\'\'' )
			Function: PalDoubleY
				Description: Elke single quote wordt vervangen door twee single quotes
				Returns
					String:
				Parameters
					String: psStr
				Static Variables
				Local variables
					String: s
				Actions
					Set s = VisStrSubstitute( psStr, 'Y', 'YY' )
					Return VisStrSubstitute( s, 'y', 'yy' )
			Function: PalDoubleBSlash
				Description: Double les \
				Returns
					String:
				Parameters
					String: psStr
				Static Variables
				Local variables
				Actions
					Return VisStrSubstitute( psStr, '\\', '\\\\' )
			Function: PalUndoDoubleSQuote
				Description: Elke single quote wordt vervangen door twee single quotes
				Returns
					String:
				Parameters
					String: psStr
				Static Variables
				Local variables
				Actions
					Return VisStrSubstitute( psStr, '\'\'',  '\'' )
			! Function: PalGetPrgmDirectory
				Description: Retourne le répertoire contenant le programme
				Returns 
					String: 
				Parameters 
				Static Variables 
				Local variables 
					String: sRepPrgm
				Actions 
					Set sRepPrgm = strArgArray[ 0 ]
					If sRepPrgm != ''
						While ( SalStrLength( sRepPrgm ) > 0 ) and ( SalStrRightX( sRepPrgm, 1 ) != '\\' )
							Set sRepPrgm = SalStrLeftX( sRepPrgm, SalStrLength( sRepPrgm ) - 1 )
						If ( SalStrLength( sRepPrgm ) > 0 ) and ( SalStrRightX( sRepPrgm, 1 ) = '\\' )
							Set sRepPrgm = SalStrLeftX( sRepPrgm, SalStrLength( sRepPrgm ) - 1 )
					Return sRepPrgm
			! Function: PalGetPrgmName
				Description: Retourne le nom du programme (sans l'extension)
				Returns 
					String: 
				Parameters 
				Static Variables 
				Local variables 
					String: sRepPrgm
					Number: nPos
				Actions 
					Set sRepPrgm = strArgArray[ 0 ]
					If sRepPrgm != ''
						Set nPos = SalStrScan( sRepPrgm, '\\\\' )
						While nPos >= 0
							Set sRepPrgm = SalStrMidX( sRepPrgm, nPos+1,SalStrLength( sRepPrgm ) )
							Set nPos = SalStrScan( sRepPrgm, '\\\\' )
						Set nPos = SalStrScan( sRepPrgm, '.' )
						Set sRepPrgm = SalStrMidX( sRepPrgm, 0, nPos )
					Return sRepPrgm
			Function: GetTransactionName
				Description: Fonction retournant un nom de transaction unique
				Returns
					String:
				Parameters
				Static Variables
				Local variables
					String: ComputerName
					Date/Time: dt
					String: str
				Actions
					Call SalGetProfileString( 'Network', 'ComputerName', '', ComputerName, 'system.ini' )
					Set dt = SalDateCurrent(  )
					Set str = SalFmtFormatDateTime( dt, "yyyyMMddhhhhmmss" )
					Set str = ComputerName || str
					Return str
			Function: PalGetApplParmNo
				Description:
				Returns
					Boolean:
				Parameters
					Number: pnParName
					Number: pnLength
					Receive String: psValue
				Static Variables
				Local variables
					String: lsValue
					String: lsSelect
				Actions
					! HIER SOMS ONVERKLAARBARE PROBLEMEN
					Set lsSelect = 'select value from appl_parm into :psValue where name = ' || QUOTE|| 'PAR' || SalStrRightX( SalStrRepeatX( '0', pnLength ) || SalNumberToStrX( pnParName , 0 ), pnLength ) || QUOTE
					Return SqlImmediate(lsSelect)
			Function: PalPermissions
				Description:
				Returns
					Number:
				Parameters
					Number: pnFunctionCode
				Static Variables
				Local variables
					String: lsSelect
					Number: pnValue
				Actions
					Set pnValue = 0
					Set lsSelect = 
								SELECT || 'count(*)' ||
								FROM || 'users, grp_user, groups, grp_fun, functions' ||
								WHERE || '@UPPER(users.user_login)' || EQUAL || '@UPPER(USER)' || 
								S_AND || 'users.user_cod' || EQUAL || 'grp_user.user_cod' ||
								S_AND || 'groups.grp_cod' || EQUAL || 'grp_user.grp_cod' ||
								S_AND || 'groups.grp_cod' || EQUAL || 'grp_fun.grp_cod' ||
								S_AND || 'grp_fun.fun_cod' || EQUAL || SalNumberToStrX( pnFunctionCode, 0 ) ||
								INTO || ':pnValue'
					If gbDynSqlDebug
						Call SalModalDialog( dlgDebugDynSql, hWndForm, lsSelect, TRUE )
					If SqlImmediate(lsSelect)
						! If pnValue > 0 
							Return TRUE
					! Return FALSE
					Return pnValue
			Function: PalGetWindowsDirectory
				Description:
				Returns
					String:
				Parameters
				Static Variables
				Local variables
					String: s
				Actions
					Set s = SalStrRepeatX( ' ', 254 )
					Call GetWindowsDirectoryA( s, 254 )
					If SalStrRightX( s, 1 ) != '\\'
						Set s = s || '\\'
					Return s
			Function: PalGetSystemDirectory
				Description:
				Returns
					String:
				Parameters
				Static Variables
				Local variables
					String: s
				Actions
					Set s = SalStrRepeatX( ' ', 254 )
					Call GetSystemDirectoryA( s, 254 )
					If SalStrRightX( s, 1 ) != '\\'
						Set s = s || '\\'
					Return s
			Function: PalGetPrgmNameDef
				Description: Retourne le nom du programme (sans l'extension)
				Returns
					String:
				Parameters
					String: psDef
				Static Variables
				Local variables
					String: sRepPrgm
					Number: nPos
				Actions
					Set sRepPrgm = strArgArray[ 0 ]
					If sRepPrgm != ''
						Set nPos = SalStrScan( sRepPrgm, '\\\\' )
						While nPos >= 0
							Set sRepPrgm = SalStrMidX( sRepPrgm, nPos+1,SalStrLength( sRepPrgm ) )
							Set nPos = SalStrScan( sRepPrgm, '\\\\' )
						Set nPos = SalStrScan( sRepPrgm, '.' )
						Set sRepPrgm = SalStrMidX( sRepPrgm, 0, nPos )
					Else
						Set sRepPrgm = psDef
					Return sRepPrgm
			Function: PalLogErrorInFile
				Description:
				Returns
					Boolean:
				Parameters
					String: psLine
				Static Variables
				Local variables
					File Handle: lhFile
					Date/Time: ldtDateTime
					String: lsDateTime
					String: lsSeparator
				Actions
					If gsErrorLog = 'Y' Or gsErrorLog = 'y'
						If Not SalFileOpen( lhFile, gsErrorLogFileName, OF_Exist )
							If Not SalFileOpen( lhFile, gsErrorLogFileName, OF_Create | OF_Write )
								Call SalMessageBox( 'Error opening file ' || gsErrorLogFileName, 'Error', MB_Ok )
								Return FALSE
						Else
							If Not SalFileOpen( lhFile, gsErrorLogFileName, OF_Append )
								Call SalMessageBox( 'Error opening file ' || gsErrorLogFileName, 'Error', MB_Ok )
								Return FALSE
						!
						Call SqlGetServerSystemDateTime( ldtDateTime )
						Set lsDateTime = SalFmtFormatDateTime( ldtDateTime, 'dd/MM/yyyy HH:mm' )
						Set psLine  = lsDateTime ||  ' - ' || gsApplicationName || ' (' || SourceDate || ', ' || SourceVersion || ')'  || ' - ' || gsUserName || ' - ' || SqlUser || ' -
								ERROR: ' || psLine
						!
						Set lsSeparator = '
								----------------------------------------------------------------------------------------------------'
						Set psLine  = psLine || lsSeparator
						!
						Call SalFilePutStr( lhFile, psLine )
						!
						Call SalFileClose( lhFile )
			Function: PalLogWarningInFile
				Description:
				Returns
					Boolean:
				Parameters
					String: psLine
				Static Variables
				Local variables
					File Handle: lhFile
					Date/Time: ldtDateTime
					String: lsDateTime
					String: lsSeparator
				Actions
					If gsErrorLog = 'Y' Or gsErrorLog = 'y'
						If Not SalFileOpen( lhFile, gsErrorLogFileName, OF_Exist )
							If Not SalFileOpen( lhFile, gsErrorLogFileName, OF_Create | OF_Write )
								Call SalMessageBox( 'Error opening file ' || gsErrorLogFileName, 'Error', MB_Ok )
								Return FALSE
						Else
							If Not SalFileOpen( lhFile, gsErrorLogFileName, OF_Append )
								Call SalMessageBox( 'Error opening file ' || gsErrorLogFileName, 'Error', MB_Ok )
								Return FALSE
						!
						Call SqlGetServerSystemDateTime( ldtDateTime )
						Set lsDateTime = SalFmtFormatDateTime( ldtDateTime, 'dd/MM/yyyy HH:mm' )
						Set psLine  = lsDateTime ||  ' - ' || gsApplicationName || ' (' || SourceDate || ', ' || SourceVersion || ')'  || ' - ' || gsUserName || ' - 
								Warning: ' || psLine
						!
						Set lsSeparator = '
								----------------------------------------------------------------------------------------------------'
						Set psLine  = psLine || lsSeparator
						!
						Call SalFilePutStr( lhFile, psLine )
						!
						Call SalFileClose( lhFile )
			Function: SetMainMenuLanguageText
				Description: Set a menu text in appropriate language. 
						Call SalDrawMenuBar for displaying the modified menu.
				Returns
					Boolean:
				Parameters
					Window Handle: phWndFrm
					Number: pnMainMenuItemPos
					String: psLanguageText
				Static Variables
				Local variables
					Window Handle: lhMainMenu
					Window Handle: lhSubMenu
					Number: hMenu
				Actions
					! Bepaal de handle en ID van het menu item.
					! Set lhMainMenu = GetMenu (phWndFrm)
					! If lhMainMenu = hWndNULL
						Call SalMessageBox( 'Function SetMainMenuLanguageText: 
								Window has no menu ! ', 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					! Set lhSubMenu = GetSubMenu (lhMainMenu, pnMainMenuItemPos)
					! If lhSubMenu = hWndNULL
						Call SalMessageBox( 'Function SetMainMenuLanguageText: 
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 ), 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					! Wijzig de text van het menu.
					! If ModifyMenuA (lhMainMenu, pnMainMenuItemPos, MF_ByPosition | MF_POPUP, SalWindowHandleToNumber( lhSubMenu ), psLanguageText)
						! Call SalDrawMenuBar (phWndFrm)
						Return TRUE
					! Else
						Return FALSE
					Set hMenu = VisMenuGetHandle( phWndFrm )
					! Set hMenu = VisMenuGetPopupHandle( hMenu, pnMainMenuItemPos )
					Call VisMenuSetText( phWndFrm, hMenu, pnMainMenuItemPos, psLanguageText )
			Function: SetSubMenuItemLanguageText
				Description: Set a menu item text in appropriate language.
				Returns
					Boolean:
				Parameters
					Window Handle: phWndFrm
					Number: pnMainMenuItemPos
					Number: pnSubMenuItemPos
					String: psLanguageText
				Static Variables
				Local variables
					Window Handle: lhSubMenu
					Window Handle: lhMainMenu
					Number: lnMenuItemID
					Number: hMenu
				Actions
					! Bepaal de handle en ID van het menu item.
					! Set lhMainMenu = GetMenu (phWndFrm)
					! If lhMainMenu = hWndNULL
						Call SalMessageBox( 'Function SetSubMenuItemLanguageText:
								Window has no menu ! ', 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					! Set lhSubMenu = GetSubMenu (lhMainMenu, pnMainMenuItemPos)
					! If lhSubMenu = hWndNULL
						Call SalMessageBox( 'Function SetSubMenuItemLanguageText:
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 ), 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					! Set lnMenuItemID = GetMenuItemID (lhSubMenu, pnSubMenuItemPos)
					! If lnMenuItemID = 0xFFFFFFFF
						Call SalMessageBox( 'Function SetSubMenuItemLanguageText:
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 )  || ',' || SalNumberToStrX( pnSubMenuItemPos, 0 ), 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					! Wijzig de text van het menu item.
					! If ModifyMenuA (lhSubMenu, pnSubMenuItemPos, MF_ByPosition | MF_STRING, lnMenuItemID, psLanguageText)
						Call SalDrawMenuBar (phWndFrm)
						Return TRUE
					! Else
						Return FALSE
					Set hMenu = VisMenuGetHandle( phWndFrm )
					Set hMenu = VisMenuGetPopupHandle( hMenu, pnMainMenuItemPos )
					Call VisMenuSetText( phWndFrm, hMenu, pnSubMenuItemPos, psLanguageText )
			Function: SetSubSubMenuItemLanguageText
				Description: Set a menu item text in appropriate language.
				Returns
					Boolean:
				Parameters
					Window Handle: phWndFrm
					Number: pnMainMenuItemPos
					Number: pnSubMenuItemPos
					Number: pnSubSubMenuItemPos
					String: psLanguageText
				Static Variables
				Local variables
					Window Handle: lhMainMenu
					Window Handle: lhSubMenu
					Window Handle: lhSubSubMenu
					Number: lnMenuItemID
					Number: hMenu
				Actions
					! Bepaal de handle en ID van het menu item.
					! Set lhMainMenu = GetMenu (phWndFrm)
					! If lhMainMenu = hWndNULL
						Call SalMessageBox( 'Function SetSubSubMenuItemLanguageText:
								Window has no menu ! ', 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					! Set lhSubMenu = GetSubMenu (lhMainMenu, pnMainMenuItemPos)
					! If lhSubMenu = hWndNULL
						Call SalMessageBox( 'Function SetSubSubMenuItemLanguageText:
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 ), 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					! Set lhSubSubMenu = GetSubMenu (lhSubMenu, pnSubMenuItemPos)
					! If lhSubSubMenu = hWndNULL
						Call SalMessageBox( 'Function SetSubSubMenuItemLanguageText:
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 ) || ','  || SalNumberToStrX( pnSubMenuItemPos, 0 ), 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					! Set lnMenuItemID = GetMenuItemID (lhSubSubMenu, pnSubSubMenuItemPos)
					! If lnMenuItemID = 0xFFFFFFFF
						Call SalMessageBox( 'Function SetSubSubMenuItemLanguageText:
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 )  || ',' || SalNumberToStrX( pnSubMenuItemPos, 0 )  || ',' || SalNumberToStrX( pnSubSubMenuItemPos, 0 ), 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					! Wijzig de text van het menu item.
					! If ModifyMenuA(lhSubSubMenu, pnSubSubMenuItemPos, MF_ByPosition | MF_STRING, lnMenuItemID, psLanguageText)
						Call SalDrawMenuBar (phWndFrm)
						Return TRUE
					! Else
						Return FALSE
					Set hMenu = VisMenuGetHandle( phWndFrm )
					Set hMenu = VisMenuGetPopupHandle( hMenu, pnMainMenuItemPos )
					Set hMenu = VisMenuGetPopupHandle( hMenu, pnSubMenuItemPos )
					Call VisMenuSetText( phWndFrm, hMenu, pnSubSubMenuItemPos, psLanguageText )
			Function: SetSubSubSubMenuItemLanguageText
				Description: Set a menu item text in appropriate language.
				Returns
					Boolean:
				Parameters
					Window Handle: phWndFrm
					Number: pnMainMenuItemPos
					Number: pnSubMenuItemPos
					Number: pnSubSubMenuItemPos
					Number: pnSubSubSubMenuItemPos
					String: psLanguageText
				Static Variables
				Local variables
					Window Handle: lhMainMenu
					Window Handle: lhSubMenu
					Window Handle: lhSubSubMenu
					Window Handle: lhSubSubSubMenu
					Number: lnMenuItemID
					Number: hMenu
				Actions
					! Bepaal de handle en ID van het menu item.
					! Set lhMainMenu = GetMenu (phWndFrm)
					! If lhMainMenu = hWndNULL
						Call SalMessageBox( 'Function SetSubSubSubMenuItemLanguageText:
								Window has no menu ! ', 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					!
					! Set lhSubMenu = GetSubMenu (lhMainMenu, pnMainMenuItemPos)
					! If lhSubMenu = hWndNULL
						Call SalMessageBox( 'Function SetSubSubSubMenuItemLanguageText:
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 ), 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					!
					! Set lhSubSubMenu = GetSubMenu (lhSubMenu, pnSubMenuItemPos)
					! If lhSubSubMenu = hWndNULL
						Call SalMessageBox( 'Function SetSubSubSubMenuItemLanguageText:
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 ) || ','  || SalNumberToStrX( pnSubMenuItemPos, 0 ), 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					!
					! Set lhSubSubSubMenu = GetSubMenu (lhSubSubMenu, pnSubSubMenuItemPos)
					! If lhSubSubSubMenu = hWndNULL
						Call SalMessageBox( 'Function SetSubSubSubMenuItemLanguageText:
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 ) || ','  || SalNumberToStrX( pnSubMenuItemPos, 0) || ','  || SalNumberToStrX( pnSubSubMenuItemPos, 0 ), 'Development error', MB_Ok | MB_IconExclamation )
						Return FALSE
					!
					! Set lnMenuItemID = GetMenuItemID (lhSubSubSubMenu, pnSubSubSubMenuItemPos)
					! If lnMenuItemID = 0xFFFFFFFF
						Call SalMessageBox( 'Function SetSubSubSubMenuItemLanguageText:
								Cannot find menu item: ' || SalNumberToStrX( pnMainMenuItemPos, 0 )  || ',' || SalNumberToStrX( pnSubMenuItemPos, 0 )  || ',' || SalNumberToStrX( pnSubSubMenuItemPos, 0) || ',' || SalNumberToStrX( pnSubSubSubMenuItemPos, 0 ), 'Development error', 
								MB_Ok | MB_IconExclamation )
						Return FALSE
					! Wijzig de text van het menu item.
					! If ModifyMenuA (lhSubSubSubMenu, pnSubSubSubMenuItemPos, MF_ByPosition | MF_STRING, lnMenuItemID, psLanguageText)
						Call SalDrawMenuBar (phWndFrm)
						Return TRUE
					! Else
						Return FALSE
					Set hMenu = VisMenuGetHandle( phWndFrm )
					Set hMenu = VisMenuGetPopupHandle( hMenu, pnMainMenuItemPos )
					Set hMenu = VisMenuGetPopupHandle( hMenu, pnSubMenuItemPos )
					Set hMenu = VisMenuGetPopupHandle( hMenu, pnSubSubMenuItemPos )
					Call VisMenuSetText( phWndFrm, hMenu, pnSubSubSubMenuItemPos, psLanguageText )
			Function: GetLabelLanguage
				Description:
				Returns
					Boolean:
				Parameters
					Window Handle: hWndObject
					Number: pnLanguage
					Receive String: sLabel
				Static Variables
				Local variables
					Boolean: bFound
				Actions
					Set sLabel = ''
					Select Case pnLanguage
						Case Language_NL
							Call SalWindowGetProperty( hWndObject,"LABELN", sLabel )
							Break
						Case Language_FR
							Call SalWindowGetProperty( hWndObject,"LABELF", sLabel )
							Break
						Case Language_EN
							Call SalWindowGetProperty( hWndObject,"LABELE", sLabel )
							Break
						Case Language_DE
							Call SalWindowGetProperty( hWndObject,"LABELD", sLabel )
							Break
						Default
							Set sLabel = ''
							Break
					Set bFound = Not (sLabel = '')
					Return bFound
			Function: TranslateMonth
				Description:
				Returns
					String:
				Parameters
					Number: nMonthNumber
					Number: pnLanguage
				Static Variables
				Local variables
					String: sMonth
				Actions
					Select Case nMonthNumber
						Case 1
							Select Case pnLanguage
								Case Language_NL
									Return 'Januari'
								Case Language_FR
									Return 'Janvier'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 2
							Select Case pnLanguage
								Case Language_NL
									Return 'Februari'
								Case Language_FR
									Return 'Février'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 3
							Select Case pnLanguage
								Case Language_NL
									Return 'Maart'
								Case Language_FR
									Return 'Mars'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 4
							Select Case pnLanguage
								Case Language_NL
									Return 'April'
								Case Language_FR
									Return 'Avril'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 5
							Select Case pnLanguage
								Case Language_NL
									Return 'Mei'
								Case Language_FR
									Return 'Mai'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 6
							Select Case pnLanguage
								Case Language_NL
									Return 'Juni'
								Case Language_FR
									Return 'Juin'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 7
							Select Case pnLanguage
								Case Language_NL
									Return 'Juli'
								Case Language_FR
									Return 'Juillet'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 8
							Select Case pnLanguage
								Case Language_NL
									Return 'Augustus'
								Case Language_FR
									Return 'Août'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 9
							Select Case pnLanguage
								Case Language_NL
									Return 'September'
								Case Language_FR
									Return 'Septembre'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 10
							Select Case pnLanguage
								Case Language_NL
									Return 'Oktober'
								Case Language_FR
									Return 'Octobre'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 11
							Select Case pnLanguage
								Case Language_NL
									Return 'November'
								Case Language_FR
									Return 'Novembre'
								Default
									Return 'TranslateMonth Error'
							Break
						Case 12
							Select Case pnLanguage
								Case Language_NL
									Return 'December'
								Case Language_FR
									Return 'Décembre'
								Default
									Return 'TranslateMonth Error'
							Break
						Default
							Return 'TranslateMonth Error'
			Function: SqlConnection
				Description: This function takes a SQL Handle, database, user and password as parameters for 
						establishing a connection. It it connects the cursor successfully, it will then set some default
						values for various database parameters.
				Returns
					Boolean:
				Parameters
					Receive Sql Handle: phSqlParm
					String: psDatabaseName
					String: psUserName
					String: psPassword
				Static Variables
				Local variables
					String: s1
					String: s2
					String: s3
				Actions
					! Set s1 = SqlDatabase
					! Set s2 = SqlUser
					! Set s3 = SqlPassword
					Set SqlDatabase = psDatabaseName
					Set SqlUser = psUserName
					Set SqlPassword = psPassword
					When SqlError
						Call SqlExtractArgs( wParam, lParam, ghSqlError, gnError, gnErrorPos )
						If gnError = 405
							Call SalMessageBox(
										'Invalid username: ' || psUserName ,
										'Error', MB_Ok | MB_IconStop ) 
							Return FALSE
						If gnError = 404
							Call SalMessageBox(
										'Invalid password',
										'Error', MB_Ok | MB_IconStop ) 
							Return FALSE
						If gnError = 401
							Call SalMessageBox(
										'Cannot open database ' || psDatabaseName,
										'Error', MB_Ok | MB_IconStop ) 
							Return FALSE
					If SqlConnect(phSqlParm)
						! Call SqlSetIsolationLevel( phSqlParm, 'RL' )
						Call SqlSetParameter( phSqlParm, DBP_PRESERVE, TRUE, '' )
						Call SqlSetParameter( phSqlParm, DBP_ROLLBACKONTIMEOUT, TRUE, '' )
						Call SqlSetParameter( phSqlParm, DBP_AUTOCOMMIT, FALSE, '' )
						! /##### LS : 01/02/2007 : suite à différents problèmes en clientèle, pour tester
						! Call SqlSetLockTimeout( phSqlParm, 10 )
						! \##### LS : 01/02/2007 : suite à différents problèmes en clientèle, pour tester
						Call SqlCommit( phSqlParm )
						! Set SqlDatabase = s1
						! Set SqlUser = s2
						! Set SqlPassword = s3
						Return TRUE
					Else
						! Call SalMessageBox( 
									'Cannot connect to database ' || psDatabaseName || ' as user ' || psUserName || '/' ||  psPassword,
									'Error', MB_Ok | MB_IconExclamation )
						Set SqlDatabase = s1
						Set SqlUser = s2
						Set SqlPassword = s3
						Call SalQuit(  )
			Function: HandleSQLError
				Description: This function displays the app message, text, cause and remedy in a dialog box.
				Returns
				Parameters
				Static Variables
				Local variables
					Long String: lsSqlError
				Actions
					! /##### LS : 13/04/2007
					Set lsSqlError = SqlGetLastStatement(  )
					Set gsErrorSqlStmt = SqlGetLastStatement(  )
					! \##### LS : 13/04/2007
					! Get the Sql Handle, error number and position of the last error
					Call SqlExtractArgs( wParam, lParam, ghSqlError, gnError, gnErrorPos )
					Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || SqlGetErrorTextX( gnError ) || '
							' || gsErrorSqlStatement )
					! See if the system initiated any rollback.
					! hSqlError would be invalid if the error occurred during first SqlConnect.
					If gnError != ERROR_InvalidUserName 
							And gnError != ERROR_InvalidPassword 
							And gnError != ERROR_CannotOpenDatabase 
						Call SqlGetRollbackFlag( ghSqlError, gbRollback )
						If Not gbRollback
							! Rollback the transaction so that we release any locks held before we display the dialog box
							Call SqlPrepareAndExecute( ghSqlError, 'ROLLBACK' )
							Set gsErrorMessage = 'The transaction has been rolledback.'
							Select Case gnError
								Case ERROR_InvalidRowID
									Set gsErrorMessage = gsErrorMessage || 'This record has been updated since you fetched it.
											Please refresh and try again.'
									Break
								Case ERROR_TimeOut
									Set gsErrorMessage = gsErrorMessage || 'Timed out waiting for a lock.
											Please try again.You have to refresh after that.'
									Break
								Default
									Set gsErrorMessage = gsErrorMessage || 'Please refresh'
							! Call SalMessageBox(  gsErrorMessage, 'Attention', MB_Ok | MB_IconExclamation )
					Else
						Set gsErrorMessage = 'Enter the correct values and try again.'
					Select Case gnError
						Case ERROR_DuplicateKey
							Call PalMessageBox(  'De sleutel werd reeds gebruikt.',  'La clé est déjà utilisé.', 
										'Opgelet', 'Attention', MB_Ok | MB_IconExclamation )
							Break
						Default
							! Call SalMessageBox(  gsErrorMessage, 'Attention', MB_Ok | MB_IconExclamation )
							Call SalModalDialog(dlgSqlError, hWndNULL, gnError, gsErrorMessage, gsErrorSqlStmt)
							! Call SalModalDialog(dlgSqlError, hWndForm, gnError, gsErrorMessage)
							Break
					!
			Function: PalSqlTrans
				Description: Naar voorbeeld in boek 'Using gupta...' p72
				Returns
					Number:
				Parameters
					Sql Handle: phSql
					String: psSqlStmt
				Static Variables
				Local variables
					String: lsCurrentSqlStmt
					Number: lnStatusCode
					Number: lnSqlError
					Number: lnErrorPos
					Boolean: lbSuccess
					Boolean: lbContinue
					File Handle: lfh
					String: ls
				Actions
					Call SalStrTrim( psSqlStmt, lsCurrentSqlStmt )
					!
					Set lnStatusCode = TRANS_Ok
					!
					If gbDynSqlDebug
						Call SalModalDialog( dlgDebugDynSql, hWndForm, psSqlStmt, TRUE )
					Set lbSuccess = FALSE
					Set lbContinue = TRUE
					While Not lbSuccess And lbContinue
						Set lbSuccess = FALSE
						Set lbContinue = TRUE
						! /@@@@@ LS : 26/11/1997
						If SalStrTrimX( gsPalSqlName ) != ''
							If not SalFileOpen( lfh, SalStrTrimX( gsPalSqlName ), OF_ReadAppend | OF_Text )
								Call SalFileOpen( lfh, SalStrTrimX( gsPalSqlName ), OF_Create | OF_ReadWrite | OF_Text )
								Call SalFileClose( lfh )
							If SalFileOpen( lfh, SalStrTrimX( gsPalSqlName ), OF_ReadAppend | OF_Text )
								Set ls = SalFmtFormatDateTime( SalDateCurrent(  ), 'yyyy/MM/dd hh:mm:ss' )
								Call SalFilePutStr( lfh, ls )
								Call SalFilePutStr( lfh, SalStrRepeatX( '-', SalStrLength( ls ) ) )
								Call SalFilePutStr( lfh, psSqlStmt )
								Call SalFilePutStr( lfh, '' )
								Call SalFilePutStr( lfh, SalStrRepeatX( '*', 50 ) )
								Call SalFilePutStr( lfh, '' )
								Call SalFilePutStr( lfh, '' )
								Call SalFileClose( lfh )
						! \@@@@@ LS : 26/11/1997
						When SqlError
							Set gnError = SqlError( phSql )
							Set gsErrorSqlStmt = psSqlStmt
							Call SqlGetErrorText( gnError, gsErrorMessage )
							Call SqlExtractArgs( wParam, lParam, ghSqlError, lnSqlError, lnErrorPos )
							! /@@@@@ LS : 26/11/1997
							If SalStrTrimX( gsPalSqlName ) != ''
								If SalFileOpen( lfh, SalStrTrimX( gsPalSqlName ), OF_ReadAppend | OF_Text )
									Call SalFilePutStr( lfh, 'Error : ' || SalFmtFormatNumber( lnSqlError, '0' ) || ' - ' || SqlGetErrorTextX( lnSqlError ) )
									Call SalFilePutStr( lfh, '' )
									Call SalFilePutStr( lfh, '' )
									Call SalFileClose( lfh )
							! \@@@@@ LS : 26/11/1997
							Select Case lnSqlError
								Case ERROR_TimeOut
									If PalLockTimeOut(psSqlStmt, ERROR_TimeOut)
										! Retry
										Set lnStatusCode = TRANS_Retry
									Else
										! Cancel
										Call PalLogWarningInFile( 
												PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
												SQL: ' || psSqlStmt || '
												User got the message: 
												Een andere gebruiker is deze gegevens aan het aanpassen (time out). Probeer later opnieuw.
												Un autre utilisateur est occupé à modifier les données  (time out). Essayez plus tard. '
												 )
										Set lnStatusCode = TRANS_Cancel
									Break
								Case ERROR_DeadLock
									If PalLockTimeOut(psSqlStmt, ERROR_TimeOut)
										! Retry
										Set lnStatusCode = TRANS_Retry
									Else
										! Cancel
										Call PalLogWarningInFile( 
												PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
												SQL: ' || psSqlStmt || '
												User got the message: 
												Een andere gebruiker is deze gegevens aan het aanpassen (deadlock). Probeer later opnieuw.
												Un autre utilisateur est occupé à modifier les données  (deadlock). Essayez plus tard. '
												 )
										Set lnStatusCode = TRANS_Cancel
									Break
								Case ERROR_InvalidRowID
									Call PalMessageBox( 'Deze gegeven kunnen momenteel niet gewijzigd worden. Een andere gebruiker heeft deze gegevens intussen gewijzigd. 
											Haal de gegevens opnieuw op om de wijzigingen te zien en voer uw wijzigingen uit.',
											'Les données ne peuvent pas être modifiées maintenant. Les données sont modifiées par un autre utilisateur.
											Rechargez les données et refaites vos modifications.' ,
											'Database Warning', 'Database Warning', MB_Ok | MB_IconHand)
									Call PalLogWarningInFile( 
											PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || psSqlStmt || '
											User got the message: 
											Deze gegeven kunnen momenteel niet gewijzigd worden. Een andere gebruiker heeft deze gegevens intussen gewijzigd. 
											Haal de gegevens opnieuw op om de wijzigingen te zien en voer uw wijzigingen uit.
											Les données ne peuvent pas être modifiées maintenant. Les données sont modifiées par un autre utilisateur.
											Rechargez les données et refaites vos modifications.' 
											 )
									Set lnStatusCode = TRANS_Error
									Break
								Case ERROR_CannotDelete_DependentRows
									Call PalMessageBox( 'Verwijderen van het record is onmogelijk. Er zijn referenties naar het betreffende record.', 
												'Suppression impossible. Cette valeur est toujours utilisée.', 'Opgelet', 'Attention', MB_Ok | MB_IconExclamation )
									Set lnStatusCode = TRANS_Error
									Call PalLogWarningInFile( 
											PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || psSqlStmt || '
											User got the message: 
											Verwijderen van het record is onmogelijk. Er zijn referenties naar het betreffende record.
											Suppression impossible. Cette valeur est toujours utilisée.' 
											 )
									Break
								Default
									Call PalLogErrorInFile( 
											SalNumberToStrX( lnSqlError, 0 ) || ' - ' || PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || psSqlStmt || '
											' 
											 )
									Call HandleSQLError(  )
									Set lnStatusCode = TRANS_Error
									Break
							Call SqlPrepareAndExecute( phSql, 'ROLLBACK' )
							Return FALSE
						If SqlPrepareAndExecute( phSql, psSqlStmt )
							Set lbSuccess = TRUE
							Set lbContinue = FALSE
						Else
							Set lbSuccess = FALSE
							Select Case lnStatusCode
								Case TRANS_Cancel
									Set lbContinue = FALSE
									Break
								Case TRANS_Retry
									Set lbContinue = TRUE
									Break
								Case TRANS_Error
									Set lbContinue = FALSE
									Break
								Case TRANS_Ok
									Set lbContinue = FALSE
									Break
					Return lnStatusCode
			Function: PalSqlPrepare
				Description: Naar voorbeeld in boek 'Using gupta...' p72
				Returns
					Number:
				Parameters
					Sql Handle: phSql
					String: psSqlStmt
				Static Variables
				Local variables
					String: lsCurrentSqlStmt
					Number: lnStatusCode
					Number: lnSqlError
					Number: lnErrorPos
					Boolean: lbSuccess
					Boolean: lbContinue
					File Handle: lfh
					String: ls
				Actions
					Call SalStrTrim( psSqlStmt, lsCurrentSqlStmt )
					!
					Set lnStatusCode = TRANS_Ok
					!
					If gbDynSqlDebug
						Call SalModalDialog( dlgDebugDynSql, hWndForm, psSqlStmt, TRUE )
					Set lbSuccess = FALSE
					Set lbContinue = TRUE
					While Not lbSuccess And lbContinue
						Set lbSuccess = FALSE
						Set lbContinue = TRUE
						! /@@@@@ LS : 26/11/1997
						If SalStrTrimX( gsPalSqlName ) != ''
							If not SalFileOpen( lfh, SalStrTrimX( gsPalSqlName ), OF_ReadAppend | OF_Text )
								Call SalFileOpen( lfh, SalStrTrimX( gsPalSqlName ), OF_Create | OF_ReadWrite | OF_Text )
								Call SalFileClose( lfh )
							If SalFileOpen( lfh, SalStrTrimX( gsPalSqlName ), OF_ReadAppend | OF_Text )
								Set ls = SalFmtFormatDateTime( SalDateCurrent(  ), 'yyyy/MM/dd hh:mm:ss' )
								Call SalFilePutStr( lfh, ls )
								Call SalFilePutStr( lfh, SalStrRepeatX( '-', SalStrLength( ls ) ) )
								Call SalFilePutStr( lfh, psSqlStmt )
								Call SalFilePutStr( lfh, '' )
								Call SalFilePutStr( lfh, SalStrRepeatX( '*', 50 ) )
								Call SalFilePutStr( lfh, '' )
								Call SalFilePutStr( lfh, '' )
								Call SalFileClose( lfh )
						! \@@@@@ LS : 26/11/1997
						When SqlError
							Set gnError = SqlError( phSql )
							Set gsErrorSqlStmt = psSqlStmt
							Call SqlGetErrorText( gnError, gsErrorMessage )
							Call SqlExtractArgs( wParam, lParam, ghSqlError, lnSqlError, lnErrorPos )
							! /@@@@@ LS : 26/11/1997
							If SalStrTrimX( gsPalSqlName ) != ''
								If SalFileOpen( lfh, SalStrTrimX( gsPalSqlName ), OF_ReadAppend | OF_Text )
									Call SalFilePutStr( lfh, 'Error : ' || SalFmtFormatNumber( lnSqlError, '0' ) || ' - ' || SqlGetErrorTextX( lnSqlError ) )
									Call SalFilePutStr( lfh, '' )
									Call SalFilePutStr( lfh, '' )
									Call SalFileClose( lfh )
							! \@@@@@ LS : 26/11/1997
							Select Case lnSqlError
								Case ERROR_TimeOut
									If PalLockTimeOut(psSqlStmt, ERROR_TimeOut)
										! Retry
										Set lnStatusCode = TRANS_Retry
									Else
										! Cancel
										Call PalLogWarningInFile( 
												PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
												SQL: ' || psSqlStmt || '
												User got the message: 
												Een andere gebruiker is deze gegevens aan het aanpassen (time out). Probeer later opnieuw.
												Un autre utilisateur est occupé à modifier les données  (time out). Essayez plus tard. '
												 )
										Set lnStatusCode = TRANS_Cancel
									Break
								Case ERROR_DeadLock
									If PalLockTimeOut(psSqlStmt, ERROR_TimeOut)
										! Retry
										Set lnStatusCode = TRANS_Retry
									Else
										! Cancel
										Call PalLogWarningInFile( 
												PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
												SQL: ' || psSqlStmt || '
												User got the message: 
												Een andere gebruiker is deze gegevens aan het aanpassen (deadlock). Probeer later opnieuw.
												Un autre utilisateur est occupé à modifier les données  (deadlock). Essayez plus tard. '
												 )
										Set lnStatusCode = TRANS_Cancel
									Break
								Case ERROR_InvalidRowID
									Call PalMessageBox( 'Deze gegeven kunnen momenteel niet gewijzigd worden. Een andere gebruiker heeft deze gegevens intussen gewijzigd. 
											Haal de gegevens opnieuw op om de wijzigingen te zien en voer uw wijzigingen uit.',
											'Les données ne peuvent pas être modifiées maintenant. Les données sont modifiées par un autre utilisateur.
											Rechargez les données et refaites vos modifications.' ,
											'Database Warning', 'Database Warning', MB_Ok | MB_IconHand)
									Call PalLogWarningInFile( 
											PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || psSqlStmt || '
											User got the message: 
											Deze gegeven kunnen momenteel niet gewijzigd worden. Een andere gebruiker heeft deze gegevens intussen gewijzigd. 
											Haal de gegevens opnieuw op om de wijzigingen te zien en voer uw wijzigingen uit.
											Les données ne peuvent pas être modifiées maintenant. Les données sont modifiées par un autre utilisateur.
											Rechargez les données et refaites vos modifications.' 
											 )
									Set lnStatusCode = TRANS_Error
									Break
								Case ERROR_CannotDelete_DependentRows
									Call PalMessageBox( 'Verwijderen van het record is onmogelijk. Er zijn referenties naar het betreffende record.', 
												'Suppression impossible. Cette valeur est toujours utilisée.', 'Opgelet', 'Attention', MB_Ok | MB_IconExclamation )
									Set lnStatusCode = TRANS_Error
									Call PalLogWarningInFile( 
											PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || psSqlStmt || '
											User got the message: 
											Verwijderen van het record is onmogelijk. Er zijn referenties naar het betreffende record.
											Suppression impossible. Cette valeur est toujours utilisée.' 
											 )
									Break
								Default
									Call PalLogErrorInFile( 
											SalNumberToStrX( lnSqlError, 0 ) || ' - ' || PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || psSqlStmt || '
											' 
											 )
									Call HandleSQLError(  )
									Set lnStatusCode = TRANS_Error
									Break
							Call SqlPrepareAndExecute( phSql, 'ROLLBACK' )
							Return FALSE
						If SqlPrepare( phSql, psSqlStmt )
							Set lbSuccess = TRUE
							Set lbContinue = FALSE
						Else
							Set lbSuccess = FALSE
							Select Case lnStatusCode
								Case TRANS_Cancel
									Set lbContinue = FALSE
									Break
								Case TRANS_Retry
									Set lbContinue = TRUE
									Break
								Case TRANS_Error
									Set lbContinue = FALSE
									Break
								Case TRANS_Ok
									Set lbContinue = FALSE
									Break
					Return lnStatusCode
			Function: PalLockTimeOut
				Description:
				Returns
					Boolean:
				Parameters
					String: psSqlStmt
					Number: pnError
				Static Variables
				Local variables
				Actions
					Return SalModalDialog( dlgTimeOut, hWndForm, psSqlStmt, pnError )
			!
			!
			! Fonctions qui trouvaient dans les librairies externes redéfiniesp pour comptabilité
			!
			!
			Function: AnsiUpper
				Description:
				Returns
				Parameters
				Static Variables
				Local variables
				Actions
			Function: FindWindow
				Description:
				Returns
					Window Handle:
				Parameters
					String: psNomClass
					String: psNomWindow
				Static Variables
				Local variables
				Actions
					Return FindWindowA( psNomClass, psNomWindow )
			Function: CtrlWindow
				Description:
				Returns
					Number:
				Parameters
					String: psArr[*]
					Number: pnNbr
					Boolean: pbCaseSensitive
					Boolean: pbActivate
				Static Variables
				Local variables
					Window Handle: hWnd
					String: sStr
					Boolean: b
					Boolean: tb[*]
					Number: i
					Number: c
				Actions
					Set c = 0
					Set hWnd = GetTopWindow( GetDesktopWindow( ) )
					While ( hWnd != hWndNULL ) and ( c = 0 )
						Call SalStrSetBufferLength( sStr, 256 )
						Call GetWindowTextA( hWnd, sStr, 256 )
						If SalStrLength( SalStrTrimX( sStr ) ) > 0
							Set i = pnNbr
							While i
								Set i = i - 1
								Set tb[i] = TRUE
								If pbCaseSensitive
									If SalStrScan( sStr, psArr[i] ) >= 0
										Set tb[i] = FALSE
								Else
									If SalStrScan( SalStrUpperX( sStr ), SalStrUpperX( psArr[i] ) ) >= 0
										Set tb[i] = FALSE
							Set i = pnNbr
							Set b = FALSE
							While i
								Set i = i - 1
								Set b = b or tb[i]
							If not b
								! Set sStr = SalStrRepeatX( ' ', 26 )
								! Call GetModuleFileName_LS( GetClassWord_LS( hWnd, -16 ), sStr, 24 )
								! If SalStrUpperX( SalStrRightX( sStr, 4 ) ) = '.EXE'
								Set c = c + 1
							If ( c > 0  ) and pbActivate
								Call ShowWindow( hWnd, 3 )
								Call SalBringWindowToTop( hWnd )
						Set hWnd = GetWindow( hWnd, 2 )
					Return c
			!
			!
			! Fonctions pour la gestion des permissions
			!
			Function: PalPermissionCons
				Description:
				Returns
					Boolean:
				Parameters
					Number: pnFonctionnalite
				Static Variables
				Local variables
					Boolean: lbOk
				Actions
					! Initialisation
					Set lbOk = FALSE
					If gnPermMin = NUMBER_Null
						Set gnPermMin = 1000
					! Cas des fonctionnalites communes à tous les programmes
					If ( 0 < pnFonctionnalite ) and ( pnFonctionnalite <= gnPermMin )
						If gnTabPermissions[ pnFonctionnalite ] = NUMBER_Null
							If PalPermissionsOk( pnFonctionnalite )
								Set gnTabPermissions[ pnFonctionnalite ] = 1
							Else
								Set gnTabPermissions[ pnFonctionnalite ] = 0
						Set lbOk = ( gnTabPermissions[ pnFonctionnalite ] = 1 )
					! Cas des fonctionnalites propres à un programme
					Else If ( pnFonctionnalite > gnPermBasePermission )
						If gnTabPermissions[ pnFonctionnalite - gnPermBasePermission + gnPermMin ] = NUMBER_Null
							If PalPermissionsOk( pnFonctionnalite )
								Set gnTabPermissions[ pnFonctionnalite - gnPermBasePermission + gnPermMin ] = 1
							Else
								Set gnTabPermissions[ pnFonctionnalite - gnPermBasePermission + gnPermMin ] = 0
						Set lbOk = ( gnTabPermissions[ pnFonctionnalite - gnPermBasePermission + gnPermMin ] = 1 )
					Return lbOk
			Function: PalPermissionConsBetween
				Description:
				Returns
				Parameters
					Number: pnFonctionnalite1
					Number: pnFonctionnalite2
				Static Variables
				Local variables
					Number: i
				Actions
					Set i = pnFonctionnalite1
					While i <= pnFonctionnalite2
						Call PalPermissionCons( i )
						Call DispatchMessage(  )
						Set i = i + 1
			Function: PalPermissionModif
				Description:
				Returns
					Boolean:
				Parameters
					Number: pnFonctionnalite
				Static Variables
				Local variables
					Boolean: lbOk
					Number: i
				Actions
					! Set i = 200
					! While i
						Set i = i - 1
						Call DispatchMessage(  )
					If gbAnneeCloturee
						Set lbOk = FALSE
					Else
						Set lbOk = PalPermissionCons( pnFonctionnalite )
					Return lbOk
			Function: PalPermissionInit
				Description:
				Returns
				Parameters
					Number: pnNbr
				Static Variables
				Local variables
					Number: i
				Actions
					Set i = gnPermMin + pnNbr
					While i
						Set gnTabPermissions[ i ] = NUMBER_Null
						Call DispatchMessage(  )
						Set i = i - 1
			Function: PalAnneeCloturee
				Description: Contrôle que l'année en cours en clôturée
				Returns
					Boolean:
				Parameters
					String: psAnnee
				Static Variables
				Local variables
					String: lsClot
				Actions
					Set lsClot = ''
					Call SqlImmediate( 'select ann_cloturee from annee where ann_annee = :psAnnee into :lsClot' )
					If lsClot = '1'
						Set gbAnneeCloturee = TRUE
					Else
						Set gbAnneeCloturee = FALSE
					Call SqlClearImmediate( )
					Return gbAnneeCloturee
			!
			!
			Function: PalIfSetDateTime
				Description:
				Returns
					Date/Time:
				Parameters
					Boolean: psBool
					Date/Time: pdtDateTime1
					Date/Time: pdtDateTime2
				Static Variables
				Local variables
				Actions
					If psBool
						Return pdtDateTime1
					Else
						Return pdtDateTime2
			Function: PalIfSetNumber
				Description:
				Returns
					Number:
				Parameters
					Boolean: psBool
					Number: pnNum1
					Number: pnNum2
				Static Variables
				Local variables
				Actions
					If psBool
						Return pnNum1
					Else
						Return pnNum2
			Function: PalIfSetBoolean
				Description:
				Returns
					Boolean:
				Parameters
					Boolean: psBool
					Boolean: pb1
					Boolean: pb2
				Static Variables
				Local variables
				Actions
					If psBool
						Return pb1
					Else
						Return pb2
			Function: PalIfSetString
				Description:
				Returns
					String:
				Parameters
					Boolean: psBool
					String: psStr1
					String: psStr2
				Static Variables
				Local variables
				Actions
					If psBool
						Return psStr1
					Else
						Return psStr2
			!
			!
			!
			!
			Function: PalMyDisableWindow
				Description:
				Returns
					Number:
				Parameters
					Window Handle: phWnd
					Boolean: pbSet
				Static Variables
				Local variables
					Number: lnType
					Window Handle: wh
				Actions
					Set lnType = SalGetType( phWnd )
					Select Case lnType
						Case TYPE_DataField
						Case TYPE_MultilineText
							If pbSet
								! Call SalDisableWindow( phWnd )
							Else
								Call SalEnableWindow( phWnd )
							Call SalSendMsg( phWnd, 0x00CF, pbSet, 0 )
							Break
						Case TYPE_ComboBox
							If pbSet
								Call SalDisableWindow( phWnd )
								Set wh = GetWindow( phWnd, GW_CHILD )
								If wh != hWndNULL
									Call SalEnableWindow( wh )
									Call SalSendMsg( wh, 0x00CF, 1, 0 )
							Else
								Call SalEnableWindow( phWnd )
								Set wh = GetWindow( phWnd, GW_CHILD )
								If wh != hWndNULL
									Call SalEnableWindow( wh )
									Call SalSendMsg( wh, 0x00CF, 0, 0 )
							Break
						! Case TYPE_ListBox
							If pbSet
								Call VisWinSetFlags( phWnd, WF_DisplayOnly, TRUE )
							Else 
								! Call SalEnableWindow( phWnd )
								Call VisWinSetFlags( phWnd, WF_DisplayOnly, FALSE )
							Break 
						Case TYPE_RadioButton
						Case TYPE_CheckBox
							If pbSet
								Call VisWinSetFlags( phWnd, WF_DisplayOnly, TRUE )
							Else
								! Call SalEnableWindow( phWnd )
								Call VisWinSetFlags( phWnd, WF_DisplayOnly, FALSE )
							Break
						Default
							If pbSet
								Call SalDisableWindow( phWnd )
							Else
								Call SalEnableWindow( phWnd )
					Return lnType
			Function: PalDisableWindow
				Description:
				Returns
					Number:
				Parameters
					Window Handle: phWnd
				Static Variables
				Local variables
				Actions
					Return PalMyDisableWindow( phWnd, TRUE )
			Function: PalEnableWindow
				Description:
				Returns
					Number:
				Parameters
					Window Handle: phWnd
				Static Variables
				Local variables
				Actions
					Return PalMyDisableWindow( phWnd, FALSE )
			!
			!
			Function: PalTblQueryRowFlag
				Description:
				Returns
					Number:
				Parameters
					Window Handle: phWnd
				Static Variables
				Local variables
					Number: lnRow
					Number: lnRet
					Number: ln1
				Actions
					Set lnRet = -2
					If SalGetType( phWnd ) = TYPE_TableWindow
					Set lnRet = -1
					Set lnRow = SalTblQueryContext( phWnd )
					If ( lnRow >= 0 ) and ( lnRow < TBL_MaxRow )
						Set lnRet = -3
						Set ln1 = ROW_New
						If SalTblQueryRowFlags( phWnd, lnRow, ln1 )
							Set lnRet = ln1
						If lnRet = -3
							Set ln1 = ROW_Edited
							If SalTblQueryRowFlags( phWnd, lnRow, ln1 )
								Set lnRet = ln1
						If lnRet = -3
							Set ln1 = ROW_Hidden
							If SalTblQueryRowFlags( phWnd, lnRow, ln1 )
								Set lnRet = ln1
						If lnRet = -3
							Set ln1 = ROW_HideMarks
							If SalTblQueryRowFlags( phWnd, lnRow, ln1 )
								Set lnRet = ln1
						If lnRet = -3
							Set ln1 = ROW_MarkDeleted
							If SalTblQueryRowFlags( phWnd, lnRow, ln1 )
								Set lnRet = ln1
						If lnRet = -3
							Set ln1 = ROW_Selected
							If SalTblQueryRowFlags( phWnd, lnRow, ln1 )
								Set lnRet = ln1
						If lnRet = -3
							Set ln1 = ROW_UnusedFlag1
							If SalTblQueryRowFlags( phWnd, lnRow, ln1 )
								Set lnRet = ln1
						If lnRet = -3
							Set ln1 = ROW_UnusedFlag2
							If SalTblQueryRowFlags( phWnd, lnRow, ln1 )
								Set lnRet = ln1
						! If lnRet = -3
							Set lnRet = ROW_Selected
					Return lnRet
			Function: PalUserLanguage
				Description:
				Returns
					Number:
				Parameters
					Sql Handle: phSql
				Static Variables
				Local variables
					Number: ln
					Number: lnRet
				Actions
					Call SqlPrepareAndExecute( phSql, 'select user_lng from users where @upper( user_login ) = @upper( USER ) into :ln ' )
					If SqlFetchNext( phSql, lnRet )
						Select Case lnRet
							Case FETCH_Ok
								Break
							Default
								Set ln = Language_FR
					Else
						Set ln = Language_FR
					Return ln
			Function: PalCheck97
				Description: Vérification modulo 97.
						
						Cette fonction vérifie que les deux derniers chiffres du nombre sont
						le reste modulo 97 des premiers.
						Si le modulo est égal à 0, on peut donner 00 ou 97 comme valeur
						
						Ce controle est utilisé pour les comptes en banque, le registre national, ...
				Returns
					Boolean:
				Parameters
					Number: npNum
				Static Variables
				Local variables
					Number: nMod
					Number: nReste
					Number: nChiffre
				Actions
					Set nReste = SalNumberMod( npNum, 100 )
					Set nChiffre = (npNum - nReste ) /100
					Set nMod = SalNumberMod( nChiffre, 97 )
					!
					! /##### LS : 13/09/96 - 0900
					! Modif à la demande de Christian pour le CPAS d'Uccle
					If nMod = 0
						Set nMod = 97
					! If nMod = 0
						Return ( nReste = 0 ) or ( nReste = 97 )
					! \##### LS : 13/09/96 - 0900
					Return nReste = nMod
			Function: PalCheckCpt97
				Description: Vérification du complément au modulo 97.
						
						Cette fonction vérifie que les deux derniers chiffres du nombre sont
						97 moins modulo 97 des premiers.
						Si le modulo est égal à 0, il devient 97.
						
						Ce controle est utilisé pour la T.V.A., ...
				Returns
					Boolean:
				Parameters
					Number: npNum
				Static Variables
				Local variables
					Number: nMod
					Number: nReste
					Number: nChiffre
				Actions
					Set nReste = SalNumberMod( npNum, 100 )
					Set nChiffre = (npNum - nReste ) /100
					Set nMod = 97 - SalNumberMod( nChiffre, 97 )
					!
					! ??? Faut il effectuer le changement.
					!
					! /##### LS : 13/09/96 - 0900
					! Modif à la demande de Christian pour le CPAS d'Uccle
					! If nMod = 0
						Set nMod = 97
					If nMod = 0
						Return ( nReste = 0 ) or ( nReste = 97 )
					! \##### LS : 13/09/96 - 0900
					Return nReste = nMod
			Function: PalFormatCptBqe
				Description:
				Returns
					String:
				Parameters
					String: psCptBqe
				Static Variables
				Local variables
					Number: i
					String: s1
					String: s2
				Actions
					Set s1 = ''
					Set i = 0
					While i < SalStrLength( psCptBqe )
						Set s2 = SalStrMidX( psCptBqe, i, 1 )
						If ( s2 >= '0' ) and ( s2 <= '9' ) 
							Set s1 = s1 || s2
						Set i = i + 1
					Set s2 = SalStrMidX( s1, 0, 3 )
					Set s2 = s2 || '-' || SalStrMidX( s1, 3, 7 )
					Set s2 = s2 || '-' || SalStrMidX( s1, 10, 2 )
					Return s2
			! Function: SalScrollOnWheel
				Description: author:	Didier Tourneur (i think)
						date:	???
						version:	1.00
						
						For scrolling by mouswheel. Replaces the old SalTblScrollOnWheel function
						The function must be called On WM_MOUSEWHEEL.
						
						parameter:
						phWnd :      The window/ control you want to scroll
						
						Ex:
						
						Child Table: ctbl1
						On WM_MOUSEWHEEL
							Call SalScrollOnWheel(hWndItem,wParam,lParam)
						
						ListBox: lb
						On WM_MOUSEWHEEL
							Call SalScrollOnWheel(hWndItem,wParam,lParam)
						
						Form Window: frm1
						On WM_MOUSEWHEEL
							Call SalScrollOnWheel(hWndItem,wParam,lParam)
						
				Returns 
					Number: 
				Parameters 
					Window Handle: phWnd
						! The window/ control you want to scroll
					Number: wParam
						! wParam of current On WM_MOUSEWHEEL
					Number: lParam
						! lParam of current On WM_MOUSEWHEEL
				Static Variables 
					Number: s_nDeltaAcc
				Local variables 
					Number: nScrollUnits
					Number: nwParam
					Number: nKeys
					Number: nDelta
				Actions 
					Set nKeys = SalNumberLow( wParam )
					Set nDelta = SalNumberHigh( wParam )
					If nDelta > 32767
						Set nDelta = nDelta - 65536
					Set s_nDeltaAcc = s_nDeltaAcc + nDelta
					Set nScrollUnits = SalNumberTruncate( s_nDeltaAcc / WHEEL_DELTA, 3, 0 )
					Set s_nDeltaAcc = SalNumberMod( s_nDeltaAcc, WHEEL_DELTA )
					If nScrollUnits < 0
						If nKeys & MK_CONTROL
							! If nKeys & MK_SHIFT
								Set nwParam = SB_ENDSCROLL
							! Else
							Set nwParam = SB_PageDown
						Else 
							Set nwParam = SB_LineDown
						Set nScrollUnits = SalNumberAbs( nScrollUnits )
					Else 
						If nKeys & MK_CONTROL
							! If nKeys & MK_SHIFT
								Set nwParam = SB_TOP
							! Else
							Set nwParam = SB_PageUp
						Else 
							Set nwParam = SB_LineUp
					While nScrollUnits
						Call SalSendMsg( phWnd, WM_VSCROLL, nwParam, 0 )
						Set nScrollUnits = nScrollUnits - 1
					Return nScrollUnits
			Function: SalFileGetDate
				Description: author: 	Catalin
						date:	7.10.2002
						version:	1.00 function implemented
						
						description:
						Queries the file dates
						
						example:
						Call SalFileGetDate('C:\\autoexec.bat', dCreate, dAccess, dWrite )
				Returns
					Boolean:
				Parameters
					String: psFile
.data INHERITPROPS
0000: 0100
.enddata
					Receive Date/Time: rdCreateTime
.data INHERITPROPS
0000: 0100
.enddata
					Receive Date/Time: rdLastAccesTime
.data INHERITPROPS
0000: 0100
.enddata
					Receive Date/Time: rdWriteTime
.data INHERITPROPS
0000: 0100
.enddata
				Static Variables
				Local variables
					Number: nFile
					Number: nStructSize
					Number: nDummy
					Number: nCreationTime
					Number: nAccessTime
					Number: nWriteTime
					Number: nYear
					Number: nMonth
					Number: nDayOfWeek
					Number: nDay
					Number: nHour
					Number: nMinute
					Number: nSecond
					Number: nMilisecond
					String: s
				Actions
					Set nStructSize = 136
					Set nFile =  OpenFile( psFile, nStructSize ,nDummy,nDummy,nDummy,nDummy, s, 0x00000000 )
					If nFile !=-1
						Set nCreationTime =  CStructAllocFarMem( 8)
						Set nAccessTime =  CStructAllocFarMem( 8)
						Set nWriteTime =  CStructAllocFarMem( 8)
						Call GetFileTime( nFile, nCreationTime, nAccessTime, nWriteTime)
						!
						Call FileTimeToSystemTime( nCreationTime, nYear, nMonth, nDayOfWeek, nDay, nHour, nMinute, nSecond, nMilisecond )
						Set rdCreateTime = SalDateConstruct( nYear, nMonth, nDay,  nHour, nMinute, nSecond)
						!
						Call FileTimeToSystemTime( nAccessTime, nYear, nMonth, nDayOfWeek, nDay, nHour, nMinute, nSecond, nMilisecond )
						Set rdLastAccesTime = SalDateConstruct( nYear, nMonth, nDay,  nHour, nMinute, nSecond)
						!
						Call FileTimeToSystemTime( nWriteTime, nYear, nMonth, nDayOfWeek, nDay, nHour, nMinute, nSecond, nMilisecond )
						Set rdWriteTime = SalDateConstruct( nYear, nMonth, nDay,  nHour, nMinute, nSecond)
						!
						Call _lclose( nFile )
						Call CStructFreeFarMem( nCreationTime )
						Call CStructFreeFarMem( nAccessTime )
						Call CStructFreeFarMem( nWriteTime )
						Return TRUE
					Else
						Return FALSE
			Function: SteTraiterMailSlotMsg
				Description:
				Returns
					Boolean:
				Parameters
					Long String: psMsg
				Static Variables
				Local variables
					Boolean: lbOk
					Number: lnNbrItem
					String: lsItems[*]
					Number: n
					String: s
				Actions
					Set lbOk = FALSE
					Set lnNbrItem = SalStrTokenize( psMsg, '', '|', lsItems )
					If lnNbrItem > 0
						If SalStrTrimX( SalStrUpperX( lsItems[0] ) ) = 'CMD'
							! on a une commande
							If SalStrTrimX( SalStrUpperX( lsItems[1] ) ) = 'HALT'
								If lnNbrItem >= 3
									Set n = SalStrToNumber( lsItems[2] )
									If lnNbrItem >= 4
										Set s = lsItems[3]
									Else
										Set s = ''
									Call SalCreateWindow( dlgCmdArret, hWndForm, n, s )
									Set lbOk = TRUE
					Return lbOk
			!
			!
			!
			Function: SalSysGetComputerName
				Description: 
						author: ???
						date:     ???
						version: 1.00
						
						desc:
						Returns the computername
						
						example:
						Set sComputername =  SalSysGetComputerName()
				Returns
					String:
				Parameters
				Static Variables
				Local variables
					Number: nSize
					String: sCOMPUTERNAME
				Actions
					Set nSize = 250
					Call SalStrSetBufferLength( sCOMPUTERNAME, nSize + 1 )
					Call GetComputerNameA( sCOMPUTERNAME, nSize )
					Set sCOMPUTERNAME = SalStrLeftX( sCOMPUTERNAME, nSize )
					Return sCOMPUTERNAME
			Function: SalSysGetIP
				Description: 
						author: 	??? (extracted from winsock.apl)
						date:	???
						version:
						
						desc:
						Returns the IP address of a given hostname
						
						example:
						Set lsIP = SalSysGetIP('MyComputer_NT')
				Returns
					String:
				Parameters
					String: spHostName
				Static Variables
				Local variables
					!
					Number: nLowVersion
					Number: nHighVersion
					Number: nMaxSockets
					Number: nMaxUp
					Number: nlpVendorInfo
					String: sSystemStatus
					String: sDescription
					String: sNull
					!
					Number: nStructPointer
					String: sIP
					String: spMem
					String: sStr
					!
					Number: nFarPointer
					Number: nLen
				Actions
					! Init
					If WSAStartup(257,nLowVersion,nHighVersion,
								sDescription,sNull,sSystemStatus,
								nMaxSockets,nMaxUp,nlpVendorInfo ) != 0
						Return ''
					!
					Set nStructPointer = gethostbyname( spHostName )
					If nStructPointer = NUMBER_Null or nStructPointer = 0
						! Call SalMessageBox( 'Connection failed - ' || SalNumberToStrX( WSAGetLastError(  ), 0 ), 'Error', 0 )
						Return ''
					!
					Call SalStrSetBufferLength( spMem, 1000 )
					Call CStructCopyFromFarMem( nStructPointer, spMem, 1000 )
					!
					Set nFarPointer = CStructGetFarPointer( spMem, 12 )
					!
					Call SalStrSetBufferLength( sStr, 4 )
					Call CStructCopyFromFarMem( nFarPointer, sStr, 4 )
					Set nFarPointer = CStructGetFarPointer( sStr, 0 )
					Call SalStrSetBufferLength( sStr, 4 )
					Call CStructCopyFromFarMem( nFarPointer, sStr, 4 )
					Set nFarPointer = CStructGetFarPointer( sStr, 0 )
					!
					Set nFarPointer = inet_ntoa( nFarPointer )
					Set nLen = lstrlen( nFarPointer ) + 1
					Call SalStrSetBufferLength( sIP, nLen )
					Call CStructCopyFromFarMem( nFarPointer, sIP, nLen )
					! Close
					Call WSACleanup(  )
					!
					Return sIP
			!
			!
			!
			!
			!
			! Fonctions pour l'exportation d'une table
			!
			Function: TableWindowToSlk
				Description:
				Returns
					Boolean:
				Parameters
					Window Handle: phTable
					String: psFileName
					Number: pn1
					Number: pn2
					Boolean: pbTitre
				Static Variables
				Local variables
					FunctionalVar: slk
						Class: TExcel
					File Handle: fh
					Number: lnRow
					Number: lnRowContext
					Number: i
					Window Handle: lwhCol
					String: s
					Number: n
					Date/Time: d
					Number: y
				Actions
					Set y = SalGetType( phTable )
					If y = TYPE_ChildTable		
						If SalFileOpen( fh, psFileName, OF_Create | OF_ReadWrite | OF_Text  )
							Call slk.InitFile( fh )
							Set y = 1
							If pbTitre
								Set i = 1
								Set lwhCol = SalTblGetColumnWindow( phTable, i, COL_GetID )
								While lwhCol != hWndNULL
									Call SalTblGetColumnTitle( lwhCol, s, 254 )
									Call SalGetItemName( lwhCol, s )
									Call slk.WriteString( fh, y, i, s, -1, XLS_Bold )
									Set i = i + 1
									Set lwhCol = SalTblGetColumnWindow( phTable, i, COL_GetID )
								Set y = y + 1
							Set lnRowContext = SalTblQueryContext( phTable )
							Set lnRow = TBL_MinRow
							While SalTblFindNextRow( phTable, lnRow, pn1, pn2 )
								Call SalTblSetContext( phTable, lnRow )
								Set i = 1
								Set lwhCol = SalTblGetColumnWindow( phTable, i, COL_GetID )
								While lwhCol != hWndNULL
									Select Case SalGetDataType( lwhCol )
										Case DT_Boolean
											! Call SalGetWindowText( lwhCol, s, 254 )
											! Call slk.WriteString( fh, y, i, s, -1, -1 )
											! Break
										Case DT_DateTime
											Call SalGetWindowText( lwhCol, s, 254 )
											Call slk.WriteString( fh, y, i, s, -1, -1 )
											Break
										Case DT_Number
											Call SalGetWindowText( lwhCol, s, 254 )
											Call slk.WriteNumber( fh, y, i, SalStrToNumber( s ), 9, -1, -1 )
											Break
										Default
											Call SalGetWindowText( lwhCol, s, 254 )
											Call slk.WriteString( fh, y, i, s, -1, -1 )
									Set i = i + 1
									Set lwhCol = SalTblGetColumnWindow( phTable, i, COL_GetID )
								Set y = y + 1
							Call SalTblSetContext( phTable, lnRowContext )
							Call slk.TermFile( fh )
							Call SalFileClose( fh )
			Function: TableWindowToTxt
				Description:
				Returns
					Boolean:
				Parameters
					Window Handle: phTable
					String: psFileName
					Number: pn1
					Number: pn2
					Boolean: pbTitre
					String: psFieldSep
					String: psRecSep
					String: psStringSep
				Static Variables
				Local variables
					File Handle: fh
					Number: lnRow
					Number: lnRowContext
					Number: i
					Window Handle: lwhCol
					String: s
					Number: n
					Date/Time: d
					Number: y
					Number: lnRowCurrent
					Window Handle: whCurCell
				Actions
					Set y = SalGetType( phTable )
					If y = TYPE_ChildTable		
						If SalFileOpen( fh, psFileName, OF_Create | OF_ReadWrite | OF_Text  )
							Call SalTblQueryFocus( phTable, lnRowCurrent, whCurCell )
							Set y = 1
							If pbTitre
								Set i = 1
								Set lwhCol = SalTblGetColumnWindow( phTable, i, COL_GetID )
								While lwhCol != hWndNULL
									! Call SalTblGetColumnTitle( lwhCol, s, 254 )
									Call SalGetItemName( lwhCol, s )
									If i > 1
										Call SalFileWrite( fh, psFieldSep, SalStrLength( psFieldSep ) )
									Call SalFileWrite( fh, s, SalStrLength( s ) )
									Set i = i + 1
									Set lwhCol = SalTblGetColumnWindow( phTable, i, COL_GetID )
								Call SalFileWrite( fh, psRecSep, SalStrLength( psRecSep ) )
								Set y = y + 1
							Set lnRowContext = SalTblQueryContext( phTable )
							Set lnRow = TBL_MinRow
							While SalTblFindNextRow( phTable, lnRow, pn1, pn2 )
								Call SalTblSetContext( phTable, lnRow )
								Call SalTblSetFocusRow( phTable, lnRow )
								Set i = 1
								Set lwhCol = SalTblGetColumnWindow( phTable, i, COL_GetID )
								While lwhCol != hWndNULL
									If i > 1
										Call SalFileWrite( fh, psFieldSep, SalStrLength( psFieldSep ) )
									Select Case SalGetDataType( lwhCol )
										Case DT_Number
											Call SalGetWindowText( lwhCol, s, 254 )
											Set s = SalFmtFormatNumber( SalStrToNumber( s ), '' )
											Call SalFileWrite( fh, s, SalStrLength( s ) )
											Break
										Case DT_DateTime
											Call SalGetWindowText( lwhCol, s, 254 )
											Call SalFileWrite( fh, s, SalStrLength( s ) )
											Break
										Case DT_Boolean
											Call SalGetWindowText( lwhCol, s, 254 )
											Call SalFileWrite( fh, s, SalStrLength( s ) )
											Break
										Default
											Call SalGetWindowText( lwhCol, s, 254 )
											Set s = psStringSep || s || psStringSep
											Call SalFileWrite( fh, s, SalStrLength( s ) )
									Set i = i + 1
									Set lwhCol = SalTblGetColumnWindow( phTable, i, COL_GetID )
								Call SalFileWrite( fh, psRecSep, SalStrLength( psRecSep ) )
								Set y = y + 1
							Call SalTblSetContext( phTable, lnRowContext )
							Call SalFileClose( fh )
							Call SalTblSetFocusRow( phTable, lnRowCurrent )
			Function: menuExportTableWindowToCsv
				Description:
				Returns
					Boolean:
				Parameters
					Window Handle: phTable
				Static Variables
				Local variables
					String: s
					String: strFilters[*]
					Number: nFilters
					String: strFile
					String: strPath
					Number: nIndex
					String: sList
					FunctionalVar: Reg
						Class: cBTRegistry
				Actions
					Set nIndex = 1
					Set nFilters = 0
					Set strFilters[ nFilters ] = 'CSV'
					Set nFilters = nFilters + 1
					Set strFilters[ nFilters ] = '*.csv'
					Set nFilters = nFilters + 1
					Select Case gnLanguage
						Case Language_NL
							Set strFilters[ nFilters ] = 'Alles'
							Break
						Default
							Set strFilters[ nFilters ] = 'Tous'
					Set nFilters = nFilters + 1
					Set strFilters[ nFilters ] = '*.*'
					Set nFilters = nFilters + 1
					If SalDlgSaveFile( phTable, 'Save file...', strFilters, nFilters, nIndex, strFile, strPath )
						Call Reg.SetRootKey( HKEY_CURRENT_USER )
						If Reg.OpenKey( '\\Control Panel\\International', FALSE )
							If Reg.ReadString( 'sList', sList )
							Else
								Set sList = ';'
							Call Reg.CloseKey( )
						Call TableWindowToTxt( phTable, strPath, 0, 0, TRUE, sList, '
								', '"' )
			Function: menuExportTableWindowToTxt
				Description:
				Returns
					Boolean:
				Parameters
					Window Handle: phTable
				Static Variables
				Local variables
					String: s
					String: strFilters[*]
					Number: nFilters
					String: strFile
					String: strPath
					Number: nIndex
				Actions
					Set nIndex = 1
					Set nFilters = 0
					Set strFilters[ nFilters ] = 'Text'
					Set nFilters = nFilters + 1
					Set strFilters[ nFilters ] = '*.txt'
					Set nFilters = nFilters + 1
					Select Case gnLanguage
						Case Language_NL
							Set strFilters[ nFilters ] = 'Alles'
							Break
						Default
							Set strFilters[ nFilters ] = 'Tous'
					Set nFilters = nFilters + 1
					Set strFilters[ nFilters ] = '*.*'
					Set nFilters = nFilters + 1
					If SalDlgSaveFile( phTable, 'Save file...', strFilters, nFilters, nIndex, strFile, strPath )
						Call TableWindowToTxt( phTable, strPath, 0, 0, TRUE, '	', '
								', '' )
			Function: menuExportTableWindowToSlk
				Description:
				Returns
					Boolean:
				Parameters
					Window Handle: phTable
				Static Variables
				Local variables
					String: s
					String: strFilters[*]
					Number: nFilters
					String: strFile
					String: strPath
					Number: nIndex
				Actions
					Set nIndex = 1
					Set nFilters = 0
					Set strFilters[ nFilters ] = 'Excel'
					Set nFilters = nFilters + 1
					Set strFilters[ nFilters ] = '*.slk;*.xls'
					Set nFilters = nFilters + 1
					Select Case gnLanguage
						Case Language_NL
							Set strFilters[ nFilters ] = 'Alles'
							Break
						Default
							Set strFilters[ nFilters ] = 'Tous'
					Set nFilters = nFilters + 1
					Set strFilters[ nFilters ] = '*.*'
					Set nFilters = nFilters + 1
					If SalDlgSaveFile( phTable, 'Save file...', strFilters, nFilters, nIndex, strFile, strPath )
						Call TableWindowToSlk( phTable, strPath, 0, 0, TRUE )
			!
			!
			!
			!
			!
			Function: SetDFEnhancement
				Description:
				Returns
					Boolean:
				Parameters
					Window Handle: pwhDF
					Number: pnEnh
				Static Variables
				Local variables
					String: sFontName
					Number: nFontSize
					Number: nEnh
					Boolean: bOk
				Actions
					Set bOk = SalFontGet( pwhDF, sFontName, nFontSize, nEnh )
					If bOk
						Set bOk = SalFontSet( pwhDF, sFontName, nFontSize, pnEnh )
					Return bOk
			Function: GetDFEnhancement
				Description:
				Returns
					Boolean:
				Parameters
					Window Handle: pwhDF
					Receive Number: pnEnh
				Static Variables
				Local variables
					String: sFontName
					Number: nFontSize
					Number: nEnh
					Boolean: bOk
				Actions
					Set bOk = SalFontGet( pwhDF, sFontName, nFontSize, pnEnh )
					Return bOk
			!
			!
			!
			! !
			! !
			! !
			Function: PalGetTmpDir
				Description: Fournit un répertoire temporaire. La fonction recherche dans la table APPL_PARM le paramètre 'PATHTMP', sinon utilise la paramètre de la fonction
				Returns
					String:
				Parameters
					String: psDefRep
				Static Variables
				Local variables
					Boolean: bOk
					String: s1
					Number: n
				Actions
					If not PalGetApplParm( 'PATHTMP', s1 )
						Set s1 = psDefRep
					Set s1 = ExpandEnvironmentStrings( s1 )
					If SalStrRightX( s1, 1 ) != '\\'
						Set s1 = s1 || '\\'
					Set n = VisDosMakeAllDir( s1 )
					Select Case n
						Case VTERR_AccessDenied
						Case VTERR_WriteProtected
							Set s1 = ''
							Break
						Case VTERR_Ok
						Default
							Break
					! If ( n != VTERR_WriteProtected )  and ( n !
						Set s1 = ''
					Return s1
			! !
			! !
			! !
			! Function: PalGetTransactionName
				Description: Fonction retournant un nom de transaction unique
				Returns 
					String: 
				Parameters 
				Static Variables 
				Local variables 
					String: ComputerName
					Date/Time: dt
					String: str
				Actions 
					Call SalGetProfileString( 'Network', 'ComputerName', '', ComputerName, 'system.ini' )
					Set dt = SalDateCurrent(  )
					Set str = SalFmtFormatDateTime( dt, "yyyyMMddhhhhmmss" )
					Set str = ComputerName || str
					Return str
			Function: PalInputQuery
				Description:
				Returns
					Boolean:
				Parameters
					Window Handle: hWndParent
					String: ACaption
					String: Aprompt
					Receive String: Value
				Static Variables
				Local variables
					Window Handle: whInput
					String: s
					Boolean: b
				Actions
					Set b = SalModalDialog(  dlgInputQuery, hWndForm, ACaption, Aprompt, s )
					If b
						Set Value = s
					Return b
			!
			! /##### LS : 13/04/2007
			Function: PalGetDBVersion
				Description:
				Returns
					String:
				Parameters
					Sql Handle: phsql
				Static Variables
				Local variables
					Number: n
					String: s
				Actions
					Call SqlGetParameter( phsql, DBP_VERSION, n, s )
					Return s
			! \##### LS : 13/04/2007
			!
			!
			!
			!
			!
			! /##### LS : 17/04/2007
			Function: PalgetIsolationLevel
				Description:
				Returns
					String:
				Parameters
					Sql Handle: phSql
				Static Variables
				Local variables
					String: sTmp
					Number: nTmp
				Actions
					Call SqlGetParameterAll( phSql, 3001, nTmp, sTmp, FALSE )
					Return sTmp
			! \##### LS : 17/04/2007
			!
		Named Menus
			Menu: menuExportTableWindow
				Resource Id: 45277
				Title:
				Description:
				Enabled when:
				Status Text:
				Menu Item Name:
				Menu Item: &Copy
					Resource Id: 45278
					Keyboard Accelerator: (none)
					Status Text:
					Menu Settings
						Enabled when:
						Checked when:
					Menu Actions
						Call SalTblCopyRows( hWndItem, ROW_Selected, 0 )
					Menu Item Name:
				Menu Separator
				Menu Item: -> &Excel
					Resource Id: 45279
					Keyboard Accelerator: (none)
					Status Text:
					Menu Settings
						Enabled when:
						Checked when:
					Menu Actions
						Call menuExportTableWindowToSlk( gwhTrackPopupMenu )
					Menu Item Name:
				Menu Item: -> &Text
					Resource Id: 34567
					Keyboard Accelerator: (none)
					Status Text:
					Menu Settings
						Enabled when:
						Checked when:
					Menu Actions
						Call menuExportTableWindowToTxt( gwhTrackPopupMenu )
					Menu Item Name:
				Menu Item: -> C&sv
					Resource Id: 43451
					Keyboard Accelerator: (none)
					Status Text:
					Menu Settings
						Enabled when:
						Checked when:
					Menu Actions
						Call menuExportTableWindowToCsv( gwhTrackPopupMenu )
					Menu Item Name:
				Menu Separator
				Menu Item: &Effacer
					Resource Id: 23922
					Keyboard Accelerator: (none)
					Status Text:
					Menu Settings
						Enabled when:
						Checked when:
					Menu Actions
						Call SalTblReset( hWndItem )
					Menu Item Name:
				Menu Separator
				Popup Menu: &Rechercher
					Resource Id: 22502
					Enabled when:
					Status Text:
					Menu Item Name:
					Menu Item: &Mot
						Resource Id: 22503
						Keyboard Accelerator: (none)
						Status Text:
						Menu Settings
							Enabled when:
							Checked when:
						Menu Actions
							If PalInputQuery( SalParentWindow( gwhTrackPopupMenu ), "Search", "String : ", gsStringFind )
								! Call gwhTrackPopupMenu.clsCTblDynSql.SearchString( hWndNULL, gsStringFind, gnRowFind )
								If gnRowFind = -1
									Set gnRowFind = 0
								Set gnRowFind = VisTblFindString( gwhTrackPopupMenu, gnRowFind, hWndNULL, gsStringFind )
								If gnRowFind > -1
									Call SalTblSetFocusRow( gwhTrackPopupMenu, gnRowFind )
								Else
									Call SalMessageBeep( MB_Ok )
						Menu Item Name:
		Class Definitions
.data RESOURCE 0 0 1 267751051
0000: 000C00006C050000 0000000000000000 0200001A00FFFF01 00160000436C6173
0020: 73566172004F7574 6C696E6552006567 496E666F3E003C00 000A63006C734261
0040: 7365436F006C9A00 00000500001E0004 0000C20002000000 FF7F04B3000400F6
0060: 0200FF1F080000AC 00040002FD00FF07 0C00000019080000 0001000000FFFFC1
0080: 2500000019DA0001 00FF7F0180805300 00000100F0000D63 6C01446644617465
00A0: A2B00000000500B7 1900F60400FFDF19 AC00040002FD00FF 071D000000044300
00C0: 01020000FFC90100 0001DE0001C00021 00000019DA000100 FF7F3AB000000019
00E0: 00F60100FF1F0180 3A320000020011FC 636C1F54696DC065 8400000004DE0019
0100: DA000400FF7F19B3 000400F60200FFDF 1D8C0004000102FD 0027010000017B00
0120: 0133002100196B00 0100FFFF21018021 000003400000000C 636C430061636865
0140: 506F6F6C60660000 0003004F84000020 01070000000100E8 B4050000C1800100
0160: 0000BF0459000400 03FB00FF6F0800D6 190001FE00FF4301 8004000086040012
0180: 636C01624D756C74 694C00616E677561 676522A000000001 0000B70400F60200
01A0: FF1F018004330005 00180C636C68696C 64E054626C4D75FF 47000100006F0400
01C0: ED0200FF3F018006 0400060000005813 636C6F4DFF7F00F4 010000D6040002FE
01E0: 00FF6301800400E4 07000013F16D624D FF47000100006F04 00ED0200FF3F0180
0200: 66040008000E1244 664D75FF3F00017A 0000046B000200FF FF310180040009F0
0220: 00000013F06C674D 75FFA300010000B7 0400F60200FF1F01 800403000A000000
0240: 130746726D4D75FF 3F00017A0000046B 000200FFFF310180 04000B7000000012
0260: 4CFC624DFFD10001 00005B040002FB00 FF8F01800491000C 000013834D64694D
0280: 75FF1F000100BD00 04B5000200FFFF18 018004000D007800 00126CFE4DFFE800
02A0: 010000AD040002FD 00FFC7018004C000 0E00000012F14F62 4DFF47000100006F
02C0: 0400ED0200FF3F01 800604000F000000 8E1250624DFF3F00 017A0000046B0002
02E0: 00FFFF3101800400 10400000001D636C 51C0756573744368 C1576E644D75FF8F
0300: 000100DE0004DA00 0200FF7F010C8004 00110000FC001D03 5461626C6557FE6E
0320: FFA300010000B704 00F60200FF1F0180 0403001200000012 C66352624DFF1F00
0340: 0100BD0004B50002 00FFFF1801800400 1300300000136354 62FD4DFFD1000100
0360: 005B040002FB00FF 0F01801301020014 0000000F63004465 736B746F704C0069
0380: 7374426F784E01DA 000B005B190001FA 0000FF6F1900D619 0001FE00FF833200
03A0: 000019B5000100FF FF604B0000001900 ED0100FF3F640058 0000190001FB00FF
03C0: 0F7D000000D61900 01FE00FF83960000 0019B5000100FFFF 60AF0000001900ED
03E0: 0100FF3FC8005800 00190001FB00FF0F E1000000D6190001 FE00FF83FA000000
0400: 19B5000100FFFF10 0180640000150000 00000B634469724C 3E697C00D8000004
0420: 005B190001FA0000 FF6F1900D6190001 FE00FF9B320019B5 000100FFFF664B00
0440: 1900ED0100FF3F01 80244B0000160000 1E0F547265F8654C 69605E0000000300
0460: 6F1900E9010000FF BF195900190001FB 00FF6F3200D61900 01FE00FF430180AF
0480: 000000170000000C 634669F86C654CC1 D600000007DE0019 D200010000FF7F19
04A0: B3001900F60100FF DF32AC00190001FD 00FF374B00196B00 0100FFFFCD640019
04C0: DA000100FF7F7DB3 001900F60100FFDF 96AC00190001FD00 FF8701807D000000
04E0: 180000000D6352C0 6164696F4C69279A 0000057B00194B00 010000FFFFCD1900
0500: 19DA000100FF7F32 B3001900F60100FF DF4BAC00190001FD 00FF376400196B00
0520: 0100FFFF01018081 0000001903000863 514F45006D61696C C0000000F6060096
0540: 19000100FE00FF9B 190019B5000100FF FF6632001900ED01 00FFBF4B59001900
0560: 01FB00FF6F6400D6 190001FE00FF9B7D 0004B100010200FF 2780010000FF
.enddata
			!
			Functional Class: igcActiveKeyData
				Description:
				Derived From
				Class Variables
				Instance Variables
					Number: whAcc
					Window Handle: whWnd
					Number: nMsg
					Number: nKeyDownState
					Number: nVirtualKey
					Number: nValue
				Functions
			Functional Class: gcActiveKey
				Description:
				Derived From
				Class Variables
				Instance Variables
					! /##### LS : 05/11/2002
					! Number: iwhActiveKey[*]
					FunctionalVar: iActiveKey[ * ]
						Class: igcActiveKeyData
					Number: inNbrActiveKey
					! \##### LS : 05/11/2002
				Functions
					! /##### LS : 05/11/2002
					Function: Add
						Description:
						Returns
							Number:
						Parameters
							Window Handle: pwhHandle
							Number: pnMsg
							Number: pnKeyDownState
							Number: pnVirtualKey
							Number: pnValue
						Static Variables
						Local variables
							Number: nWh
						Actions
							Set nWh = VisWinLoadAccelerator( pwhHandle, pnMsg, pnKeyDownState, pnVirtualKey, pnValue )
							If nWh != NUMBER_Null
								Set iActiveKey[ inNbrActiveKey ].whAcc = nWh
								Set iActiveKey[ inNbrActiveKey ].whWnd = pwhHandle
								Set iActiveKey[ inNbrActiveKey ].nMsg = pnMsg
								Set iActiveKey[ inNbrActiveKey ].nKeyDownState = pnKeyDownState
								Set iActiveKey[ inNbrActiveKey ].nVirtualKey = pnVirtualKey
								Set iActiveKey[ inNbrActiveKey ].nValue = pnValue
								Set inNbrActiveKey = inNbrActiveKey + 1
								Return nWh
							Else
								Return nWh
					Function: Del
						Description:
						Returns
						Parameters
							Number: pnWh
						Static Variables
						Local variables
							Number: i
							Number: j
						Actions
							Set j = inNbrActiveKey
							While j
								If iActiveKey[ j - 1 ].whAcc = pnWh
									Break
							If j
								Set j = j - 1
								Call VisWinFreeAccelerator( pnWh  )
								While j < ( inNbrActiveKey - 1 )
									! Set iActiveKey[ j ] = iActiveKey[ j + 1 ]
									Set iActiveKey[ j ].whAcc = iActiveKey[ j + 1 ].whAcc
									Set iActiveKey[ j ].whWnd = iActiveKey[ j + 1 ].whWnd
									Set iActiveKey[ j ].nMsg = iActiveKey[ j + 1 ].nMsg
									Set iActiveKey[ j ].nKeyDownState = iActiveKey[ j + 1 ].nKeyDownState
									Set iActiveKey[ j ].nVirtualKey = iActiveKey[ j + 1 ].nVirtualKey
									Set iActiveKey[ j ].nValue = iActiveKey[ j + 1 ].nValue
									Set j = j + 1
								Set inNbrActiveKey = inNbrActiveKey - 1
					Function: Erase
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
						Actions
							While inNbrActiveKey
								Set inNbrActiveKey = inNbrActiveKey - 1
								Call VisWinFreeAccelerator( iActiveKey[ inNbrActiveKey ].whAcc )
					Function: Load
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
							Number: nWh
						Actions
							Set i = inNbrActiveKey
							While i
								Set i = i - 1
								Set nWh = VisWinLoadAccelerator( iActiveKey[ i ].whWnd, iActiveKey[ i ].nMsg, iActiveKey[ i ].nKeyDownState, iActiveKey[ i ].nVirtualKey, iActiveKey[ i ].nValue )
								Set iActiveKey[ i ].whAcc = nWh
					Function: Free
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
						Actions
							Set i = inNbrActiveKey
							While i
								Set i = i - 1
								Call VisWinFreeAccelerator( iActiveKey[ i ].whAcc )
								Set iActiveKey[ i ].whAcc = NUMBER_Null
					! \##### LS : 05/11/2002
			! ====================================================================
			! BASE CLASSES
			! ====================================================================
			Background Text Class: clsBaseBgdText
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: 0.25"
					Height Editable? Class Default
				Visible? Class Default
				Title:
				Justify: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsBgdMultiLanguage
			Child Table Class: clsBaseCTblMaster
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: 5000
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					! Class: clsClearableCTbl
					Class: clsChildTblMultiLanguage
					Class: clsCtblDynSqlMaster
				Contents
				Class Variables
				Instance Variables
					Number: i
				Functions
				Message Actions
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableCTbl, PAM_Clear, wParam, lParam )
					On SAM_Close
						Call SalSendClassMessageNamed( clsCTblDynSql, SAM_Close, wParam, lParam )
					On SAM_CreateComplete
						Call SalSendClassMessageNamed( clsCTblDynSql, SAM_CreateComplete, wParam, lParam )
						! /@@@@@ LS : 30/11/1999
						Call SalSendMsgToChildren( hWndItem, SAM_CreateComplete, wParam, lParam )
						! \@@@@@ LS : 30/11/1999
					On PAM_Language
						Call SalSendClassMessageNamed( clsChildTblMultiLanguage, PAM_Language, wParam, lParam )
					! /@@@@@ LS : 29/11/1999
					On SAM_CornerDoubleClick
						! Call SalTblCopyRows( hWndItem, ROW_Selected, 0 )
						Set gwhTrackPopupMenu = hWndForm
						Call SalTrackPopupMenu( hWndForm, 'menuExportTableWindow', TPM_CursorX | TPM_CursorY, 0, 0 )
					! \@@@@@ LS : 29/11/1999
					! /@@@@@ LS : 30/11/1999
					! On PAM_Situation_Table
						If wParam = cSitSave
							Call SalSetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol' , '0', PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
							Set gtnNbrCol = 0
							Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, lParam )
						Else If wParam = cSitLoad
							Set gtnNbrCol = SalGetProfileInt( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol', 0, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini' )
							Set i = 0
							While i < gtnNbrCol
								Set i = i + 1
								! Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), String, String, String, String )
								Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'col' || SalNumberToStrX( i, 0 ), '', gtsColName, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
								Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, i )
					On PAM_Situation_Table
						If gbSauverPositionColonnes
							If wParam = cSitSave
								Call SalSetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol' , '0', PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
								Set gtnNbrCol = 0
								Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, lParam )
							Else If wParam = cSitLoad
								Set gtnNbrCol = SalGetProfileInt( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol', 0, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini' )
								Set i = 0
								! While i < gtnNbrCol
									Set i = i + 1
									! Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), String, String, String, String )
									Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'col' || SalNumberToStrX( i, 0 ), '', gtsColName, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
								Set i = gtnNbrCol
								While i >= 0
									Set gtwhTabCol[i] = hWndNULL
									Set i = i - 1
								Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, i )
								Set i = 1
								While i <= gtnNbrCol
									If gtwhTabCol[ i ] != hWndNULL
										Call SalTblSetColumnPos( gtwhTabCol[ i ], i )
									Set i = i + 1
					! \@@@@@ LS : 30/11/1999
			Child Table Class: clsBaseCTblDetail
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: 5000
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					! Class: clsClearableCTbl
					Class: clsChildTblMultiLanguage
					Class: clsCtblDynSqlDetail
				Contents
				Class Variables
				Instance Variables
					Number: i
				Functions
				Message Actions
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableCTbl, PAM_Clear, wParam, lParam )
					On SAM_Close
						Call SalSendClassMessageNamed( clsCTblDynSql, SAM_Close, wParam, lParam )
					On SAM_CreateComplete
						Call SalSendClassMessageNamed( clsCTblDynSql, SAM_CreateComplete, wParam, lParam )
						! /@@@@@ LS : 30/11/1999
						Call SalSendMsgToChildren( hWndItem, SAM_CreateComplete, wParam, lParam )
						! \@@@@@ LS : 30/11/1999
					On PAM_Language
						Call SalSendClassMessageNamed( clsChildTblMultiLanguage, PAM_Language, wParam, lParam )
					! /@@@@@ LS : 29/11/1999
					On SAM_CornerDoubleClick
						! Call SalTblCopyRows( hWndItem, ROW_Selected, 0 )
						Set gwhTrackPopupMenu = hWndForm
						Call SalTrackPopupMenu( hWndForm, 'menuExportTableWindow', TPM_CursorX | TPM_CursorY, 0, 0 )
					! \@@@@@ LS : 29/11/1999
					! /@@@@@ LS : 30/11/1999
					! On PAM_Situation_Table
						If wParam = cSitSave
							Call SalSetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol' , '0', PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
							Set gtnNbrCol = 0
							Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, lParam )
						Else If wParam = cSitLoad
							Set gtnNbrCol = SalGetProfileInt( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol', 0, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini' )
							Set i = 0
							While i < gtnNbrCol
								Set i = i + 1
								! Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), String, String, String, String )
								Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'col' || SalNumberToStrX( i, 0 ), '', gtsColName, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
								Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, i )
					! On PAM_Situation_Table
						If wParam = cSitSave
							Call SalSetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol' , '0', PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
							Set gtnNbrCol = 0
							Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, lParam )
						Else If wParam = cSitLoad
							Set gtnNbrCol = SalGetProfileInt( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol', 0, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini' )
							Set i = 0
							! While i < gtnNbrCol
								Set i = i + 1
								! Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), String, String, String, String )
								Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'col' || SalNumberToStrX( i, 0 ), '', gtsColName, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
							Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, i )
					On PAM_Situation_Table
						If gbSauverPositionColonnes
							If wParam = cSitSave
								Call SalSetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol' , '0', PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
								Set gtnNbrCol = 0
								Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, lParam )
							Else If wParam = cSitLoad
								Set gtnNbrCol = SalGetProfileInt( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'nbrcol', 0, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini' )
								Set i = 0
								! While i < gtnNbrCol
									Set i = i + 1
									! Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), String, String, String, String )
									Call SalGetProfileString( PalGetItemName( SalParentWindow( hWndForm ) ) || '.' || PalGetItemName( hWndItem ), 'col' || SalNumberToStrX( i, 0 ), '', gtsColName, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
								Set i = gtnNbrCol
								While i >= 0
									Set gtwhTabCol[i] = hWndNULL
									Set i = i - 1
								Call SalSendMsgToChildren( hWndItem, PAM_Situation_Colonne, wParam, i )
								Set i = 1
								While i <= gtnNbrCol
									If gtwhTabCol[ i ] != hWndNULL
										Call SalTblSetColumnPos( gtwhTabCol[ i ], i )
									Set i = i + 1
					! \@@@@@ LS : 30/11/1999
			Check Box Class: clsBaseCb
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: 0.25"
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsCbMultiLanguage
					Class: clsClearableCb
					Class: clsDisableField
				Class Variables
				Instance Variables
				Functions
					Function: LBFDisableInit
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Boolean: bEtat
						Actions
							Call clsDisableField.LBFDisableInit( )
							Set bEtat = FALSE
							Call DisableSetBackgroundColor( bEtat, COLOR_Default )
							Set bEtat = TRUE
							Call DisableSetBackgroundColor( bEtat, COLOR_Default )
				Message Actions
					On PAM_Language
						Call SalSendClassMessageNamed( clsCbMultiLanguage, PAM_Language, wParam, lParam )
					On SAM_Click
						Call SalSendClassMessageNamed( clsClearableCb, SAM_Click, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableCb, PAM_Clear, wParam, lParam )
			! Check Box Class: clsBaseCb3S
.winattr
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  1.4"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
.end
				Description: 
				Derived From 
					Class: clsBaseCb
				Class Variables 
				Instance Variables 
				Functions 
					Function: IsIndeterminated
						Description: 
						Returns 
							Boolean: 
						Parameters 
						Static Variables 
						Local variables 
							Number: n
						Actions 
							Set n = SalSendMsg( hWndItem, BM_GETSTATE, 0, 0 )
							Return ( n  & BST_INDETERMINATE ) != 0
					Function: SetIndeterminate
						Description: 
						Returns 
						Parameters 
						Static Variables 
						Local variables 
							Number: n
						Actions 
							Call SalSendMsg( hWndItem, BM_SETSTATE, BST_INDETERMINATE, 0 )
				Message Actions 
					On WM_NCCREATE
						Call SetWindowLongA( hWndItem, GWL_STYLE, GetWindowLongA( hWndItem, GWL_STYLE )  | BS_3STATE )
			Check Box Class: clsBaseCbReadOnly
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: 0.25"
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsCbMultiLanguage
					Class: clsClearableCb
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On PAM_Language
						Call SalSendClassMessageNamed( clsCbMultiLanguage, PAM_Language, wParam, lParam )
					! On SAM_Click
						Call SalSendClassMessageNamed( clsClearableCb, SAM_Click, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableCb, PAM_Clear, wParam, lParam )
					On WM_KEYDOWN
						Return FALSE
					On WM_KEYUP
						Return FALSE
					On WM_LBUTTONDOWN
						Return FALSE
					On WM_LBUTTONUP
						Return FALSE
					On WM_LBUTTONDBLCLK
						Return FALSE
			Column Class: clsBaseCol
				Title:
				Visible? Class Default
				Editable? Class Default
				Maximum Data Length: Class Default
				Data Type: Class Default
				Justify: Class Default
				Width:  Class Default
				Width Editable? Class Default
				Format: Class Default
				Country: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Cell Options
					Cell Type? Class Default
					Multiline Cell? Class Default
					Cell DropDownList
						Sorted? Class Default
						Vertical Scroll? Class Default
						Auto Drop Down? Class Default
						Allow Text Editing? Class Default
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Class Default
				Description:
				Derived From
					Class: clsColMultiLanguage
					Class: clsClearableCol
					Class: clsDisableField
				Class Variables
					String: lsFrmName
					String: lsTblName
					String: lsColName
					Number: lnPos
					Number: lnWidth
				Instance Variables
					String: s
					Number: n
					Number: i
					!
					! Variable indiquant si la position de la colonne doit etre sauvegardee
					Boolean: ibSauverPositionColonne
				Functions
				List Values
				Message Actions
					On SAM_AnyEdit
						Call SalSendClassMessageNamed( clsClearableCol, SAM_AnyEdit, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableCol, PAM_Clear, wParam, lParam )
					On PAM_Language
						Call SalSendClassMessageNamed( clsColMultiLanguage, PAM_Language, wParam, lParam )
					! /@@@@@ LS : 30/11/1999
					! On PAM_Situation_Colonne
						Set lsColName = SalStrRepeatX( ' ', 254 )
						Set lsTblName = SalStrRepeatX( ' ', 254 )
						Set lsFrmName = SalStrRepeatX( ' ', 254 )
						! Call SalTblGetColumnTitle( hWndItem, lsColName, 254 )
						Set lsColName =  PalGetItemName( hWndItem )
						Set lsTblName =  PalGetItemName( SalParentWindow( hWndItem ) )
						Set lsFrmName = PalGetItemName( SalParentWindow( hWndForm ) )
						If wParam = cSitSave
							Set lnPos = SalTblQueryColumnPos( hWndItem )
							Call SalTblQueryColumnWidth( hWndItem, lnWidth )
							Call SalSetProfileString( lsFrmName || '.' || lsTblName, 'col' || SalNumberToStrX( lnPos, 0 ), lsColName, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
							Call SalSetProfileString( lsFrmName || '.' || lsTblName, 'width' || SalNumberToStrX( lnPos, 0 ), SalNumberToStrX( lnWidth, 4 ), PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
							Set gtnNbrCol = gtnNbrCol + 1
							Call SalSetProfileString( lsFrmName || '.' || lsTblName, 'nbrcol' , SalNumberToStrX( gtnNbrCol, 0 ), PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
						Else If wParam = cSitLoad
							If gtsColName = lsColName
								Call SalTblSetColumnPos( hWndItem, lParam )
								Call SalGetProfileString( lsFrmName || '.' || lsTblName, 'width' || SalNumberToStrX( lParam, 0 ), '1', s, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini' )
								Set n = SalStrToNumber( s )
								Call SalTblSetColumnWidth( hWndItem, n )
					On PAM_Situation_Colonne
						If ibSauverPositionColonne
							Set lsColName = SalStrRepeatX( ' ', 254 )
							Set lsTblName = SalStrRepeatX( ' ', 254 )
							Set lsFrmName = SalStrRepeatX( ' ', 254 )
							! Call SalTblGetColumnTitle( hWndItem, lsColName, 254 )
							Set lsColName =  PalGetItemName( hWndItem )
							Set lsTblName =  PalGetItemName( SalParentWindow( hWndItem ) )
							Set lsFrmName = PalGetItemName( SalParentWindow( hWndForm ) )
							If wParam = cSitSave
								Set lnPos = SalTblQueryColumnPos( hWndItem )
								Call SalTblQueryColumnWidth( hWndItem, lnWidth )
								Call SalSetProfileString( lsFrmName || '.' || lsTblName, lsColName, SalNumberToStrX( lnPos, 0 ), PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
								Call SalSetProfileString( lsFrmName || '.' || lsTblName, lsColName || '.width' , SalNumberToStrX( lnWidth, 4 ), PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
								Set gtnNbrCol = gtnNbrCol + 1
								Call SalSetProfileString( lsFrmName || '.' || lsTblName, 'nbrcol' , SalNumberToStrX( gtnNbrCol, 0 ), PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini'  )
							Else If wParam = cSitLoad
								! If gtsColName = lsColName
								! Call SalTblSetColumnPos( hWndItem, lParam )
								Call SalGetProfileString( lsFrmName || '.' || lsTblName, lsColName, '0', s, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini' )
								Set i = SalStrToNumber( s )
								Set gtwhTabCol[ i ] = hWndItem
								Call SalTblQueryColumnWidth( hWndItem, lnWidth )
								Call SalGetProfileString( lsFrmName || '.' || lsTblName, lsColName || '.width', SalNumberToStrX( lnWidth, 4 ), s, PalGetWindowsDirectory() || PalGetPrgmNameDef( 'config' ) || '.ini' )
								Set n = SalStrToNumber( s )
								Call SalTblSetColumnWidth( hWndItem, n )
								! Set gtnTabColSize[ i ] = hWndItem
					On SAM_CreateComplete
						Set ibSauverPositionColonne = SalIsWindowVisible( hWndItem )
					! \@@@@@ LS : 30/11/1999
			Column Class: clsBaseColDate
				Title:
				Visible? Class Default
				Editable? Class Default
				Maximum Data Length: Class Default
				Data Type: Date/Time
				Justify: Center
				Width:  1.2"
				Width Editable? Class Default
				Format: dd/MM/yyyy
				Country: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Cell Options
					Cell Type? Class Default
					Multiline Cell? Class Default
					Cell DropDownList
						Sorted? Class Default
						Vertical Scroll? Class Default
						Auto Drop Down? Class Default
						Allow Text Editing? Class Default
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Class Default
				Description:
				Derived From
					Class: clsBaseCol
				Class Variables
				Instance Variables
				Functions
				List Values
				Message Actions
			Column Class: clsBaseColDateTime
				Title:
				Visible? Class Default
				Editable? Class Default
				Maximum Data Length: Class Default
				Data Type: Date/Time
				Justify: Center
				Width:  1.7"
				Width Editable? Class Default
				Format: dd/MM/yyyy hh:mm
				Country: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Cell Options
					Cell Type? Class Default
					Multiline Cell? Class Default
					Cell DropDownList
						Sorted? Class Default
						Vertical Scroll? Class Default
						Auto Drop Down? Class Default
						Allow Text Editing? Class Default
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Class Default
				Description:
				Derived From
					Class: clsBaseCol
				Class Variables
				Instance Variables
				Functions
				List Values
				Message Actions
			Column Class: clsBaseColCmb
				Title:
				Visible? Class Default
				Editable? Class Default
				Maximum Data Length: Class Default
				Data Type: Class Default
				Justify: Class Default
				Width:  Class Default
				Width Editable? Class Default
				Format: Class Default
				Country: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Cell Options
					Cell Type? Class Default
					Multiline Cell? Class Default
					Cell DropDownList
						Sorted? Class Default
						Vertical Scroll? Class Default
						Auto Drop Down? Class Default
						Allow Text Editing? Class Default
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Class Default
				Description:
				Derived From
					Class: clsClearableCol
					! Class: clsColMultiLanguage
					Class: clsColCmbDynSql
					! Class: clsColCmbCached
					Class: clsDisableField
				Class Variables
				Instance Variables
				Functions
				List Values
				Message Actions
					On SAM_AnyEdit
						Call SalSendClassMessageNamed( clsClearableCol, SAM_AnyEdit, wParam, lParam )
						Call SalSendClassMessageNamed( clsColCmbCached, SAM_AnyEdit, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableCol, PAM_Clear, wParam, lParam )
					On PAM_Language
						Call SalSendClassMessageNamed( clsColCmbCached, PAM_Language, wParam, lParam )
						Call SalSendClassMessageNamed( clsColMultiLanguage, PAM_Language, wParam, lParam )
					! On SAM_Click
						Call SalSendClassMessageNamed( clsColCmbCached, SAM_Click, wParam, lParam )
					On SAM_Create
						Call SalSendClassMessageNamed( clsColCmbCached, SAM_Create, wParam, lParam )
					! On PAM_NavigateRecord
						Call SalSendClassMessageNamed( clsColCmbDynSql, PAM_NavigateRecord, wParam, lParam )
			Combo Box Class: clsBaseCmb
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableCmb
					! Class: clsCmbMultiLanguage
					Class: clsCmbDynSql
					! Class: clsCmbCached
					Class: clsDisableField
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
					On PAM_Language
						Call SalSendClassMessageNamed( clsCmbMultiLanguage, PAM_Language, wParam, lParam )
						Call SalSendClassMessageNamed( clsCmbCached, PAM_Language, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableCmb, PAM_Clear, wParam, lParam )
						Call SalSendClassMessageNamed( clsCmbCached, PAM_Clear, wParam, lParam )
					On SAM_Create
						Call SalSendClassMessageNamed( clsCmbCached, SAM_Create, wParam, lParam )
					On SAM_Click
						Call SalSendClassMessageNamed( clsClearableCmb, SAM_Click, wParam, lParam )
						Call SalSendClassMessageNamed( clsCmbCached, SAM_Click, wParam, lParam )
					On PAM_NavigateRecord
						Call SalSendClassMessageNamed( clsCmbDynSql, PAM_NavigateRecord, wParam, lParam )
					On SAM_AnyEdit
						Call SalSendClassMessageNamed( clsClearableCmb, SAM_AnyEdit, wParam, lParam )
						Call SalSendClassMessageNamed( clsCmbCached, SAM_AnyEdit, wParam, lParam )
			! Combo Box Class: clsBaseCmbReadOnly
.winattr
				Window Location and Size
					Left:
					Top:
					Width:  Default
					Width Editable? Yes
					Height: 0.2"
					Height Editable? Yes
				Visible? Yes
				Editable? No
				String Type: String
				Maximum Data Length: Default
				Sorted? No
				Always Show List? No
				Vertical Scroll? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Input Mask: Unformatted
				List in Tool Palette? Yes
				Property Template: C:\MYDOCU~1\GUPTAA~1\LANGUAGE\QO_LANG.EXE,frmPropertiesLanguage,Translation...,,Y,N
				Class DLL Name: QUIKPDLG.DLL
.end
				Description: 
				Derived From 
					Class: clsClearableCmb
					! Class: clsCmbMultiLanguage
					Class: clsCmbDynSql
					! Class: clsCmbCached
				Class Variables 
				Instance Variables 
				Functions 
				List Initialization 
				Message Actions 
					On PAM_Language
						Call SalSendClassMessageNamed( clsCmbMultiLanguage, PAM_Language, wParam, lParam )
						Call SalSendClassMessageNamed( clsCmbCached, PAM_Language, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableCmb, PAM_Clear, wParam, lParam )
						Call SalSendClassMessageNamed( clsCmbCached, PAM_Clear, wParam, lParam )
					On SAM_Create
						Call SalSendClassMessageNamed( clsCmbCached, SAM_Create, wParam, lParam )
						! FOR READONLY
						Call SalSendMsg( GetWindow( hWndItem, GW_CHILD ), EM_SETREADONLY, TRUE, 0 )
					On SAM_Click
						Call SalSendClassMessageNamed( clsClearableCmb, SAM_Click, wParam, lParam )
						Call SalSendClassMessageNamed( clsCmbCached, SAM_Click, wParam, lParam )
					On PAM_NavigateRecord
						Call SalSendClassMessageNamed( clsCmbDynSql, PAM_NavigateRecord, wParam, lParam )
			Data Field Class: clsBaseDf
				Data
					Maximum Data Length: Class Default
					Data Type: Class Default
					Editable? Class Default
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  0.825"
						Width Editable? Class Default
						Height: 0.25"
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Class Default
					Format: Class Default
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableDf
					Class: clsDfMultiLanguage
					Class: cResizeDataField
					Class: clsDisableField
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On SAM_AnyEdit
						Call SalSendClassMessageNamed( clsClearableDf, SAM_AnyEdit, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableDf, PAM_Clear, wParam, lParam )
					On PAM_Language
						Call SalSendClassMessageNamed( clsDfMultiLanguage, PAM_Language, wParam, lParam )
			Data Field Class: clsBaseDfAsLabel
				Data
					Maximum Data Length: Class Default
					Data Type: Class Default
					Editable? No
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  0.825"
						Width Editable? Class Default
						Height: 0.208"
						Height Editable? Class Default
					Visible? Class Default
					Border? No
					Justify: Class Default
					Format: Class Default
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: 3D Face Color
					Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsBaseDf
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On SAM_AnyEdit
					! On PAM_Clear
					On PAM_Dirty
					On PAM_DisableField
					On SAM_Create
						Call DisableAlways( TRUE, 0 )
			Data Field Class: clsBaseDfDateOri
				Data
					Maximum Data Length: Class Default
					Data Type: Date/Time
					Editable? Class Default
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  1.2"
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Center
					Format: dd/MM/yyyy
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsBaseDf
				Class Variables
				Instance Variables
				Functions
				Message Actions
			Data Field Class: clsBaseDfDate
				Data
					Maximum Data Length: Class Default
					Data Type: Date/Time
					Editable? Class Default
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  1.2"
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Center
					Format: dd/MM/yyyy
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsBaseDf
				Class Variables
					Date/Time: d2
					String: s
					String: Tab[2]
					Number: l
					Boolean: bControl
				Instance Variables
					Date/Time: d
					Boolean: ibPost
					Boolean: ibAnnee
					Number: inAnnee
					Number: inAnneePiv
					Boolean: ibConfirme
				Functions
					Function: __InitVar
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Set d=SalDateCurrent( )
							Set ibPost = FALSE
							Set ibAnnee = FALSE
							Set inAnnee = SalDateYear( d )
							Set inAnneePiv = 1950
							Set ibConfirme = TRUE
							Set bControl = TRUE
				Message Actions
					On SAM_Validate
						If not SalIsNull( hWndItem )
							If d=DATETIME_Null
								! Set d=SalDateCurrent( )
								Call __InitVar( )
							Set l = 4
							If not SalFmtIsValidField( hWndItem )
								Call SalFmtSetPicture( hWndItem, 'dd' )
								If not SalFmtIsValidField( hWndItem )
									Call SalFmtSetPicture( hWndItem, 'dd/MM' )
									If not SalFmtIsValidField( hWndItem )
										Call PalMessageBox ( "Deze datum is onjuist!", "Cette date est incorrecte !","Fout", "Erreur",MB_IconHand)
										! Call SalClearField (hWndItem)
										Call SalFmtSetPicture( hWndItem, 'dd/MM/yyyy' )
										Return VALIDATE_Cancel
									Else
										!
										Call SalFmtFieldToStr( hWndItem, s,TRUE )
										Call SalStrTokenize( s, ' ', '/', Tab )
										If ibAnnee
											Set d2= SalDateConstruct( inAnnee,
													SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
										Else
											If ibPost
												! Nouveau traitement: on prend une date posterieur
												If (SalStrToNumber( Tab[1] )>SalDateMonth(d))
														or (SalStrToNumber( Tab[1] )=SalDateMonth(d) and
														SalStrToNumber( Tab[0] )>=SalDateDay(d))
													Set d2= SalDateConstruct( inAnnee,
															SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
												Else
													Set d2= SalDateConstruct( inAnnee+1,
															SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
											Else
												! Ancien traitement: on prend une date anterieur
												If (SalStrToNumber( Tab[1] )<SalDateMonth(d))
														or (SalStrToNumber( Tab[1] )=SalDateMonth(d) and
														SalStrToNumber( Tab[0] )<=SalDateDay(d))
													Set d2= SalDateConstruct( inAnnee,
															SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
												Else
													Set d2= SalDateConstruct( inAnnee-1,
															SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
										Set s=SalFmtFormatDateTime( d2, 'dd/MM/yyyy' )
										Call SalFmtSetPicture( hWndItem, 'dd/MM/yyyy' )
										Call SalFmtStrToField( hWndItem, s, TRUE )
								Else
									Call SalFmtFieldToStr( hWndItem, s,TRUE )
									If ibAnnee
										If inAnnee != SalDateYear( d )
											If inAnnee > SalDateYear( d )
												Set d2= SalDateConstruct( inAnnee,
														1, SalStrToNumber( s ), 0, 1, 1 )
											Else
												Set d2= SalDateConstruct( inAnnee,
														12, SalStrToNumber( s ), 0, 1, 1 )
										Else
											Set d2= SalDateConstruct( inAnnee,
													SalDateMonth(d), SalStrToNumber( s ), 0, 1, 1 )
									Else
										If ibPost
											! Nouveau traitement: on prend une date posterieure
											If SalStrToNumber( s )>=SalDateDay(d)
												Set d2= SalDateConstruct( inAnnee,
														SalDateMonth(d), SalStrToNumber( s ), 0, 1, 1 )
											Else
												If SalDateMonth(d)=12
													Set d2= SalDateConstruct( inAnnee+1,
															1, SalStrToNumber( s ), 0, 1, 1 )
												Else
													Set d2= SalDateConstruct( inAnnee,
															SalDateMonth(d)+1, SalStrToNumber( s ), 0, 1, 1 )
										Else
											! Ancien traitement: on prend une date anterieure
											If SalStrToNumber( s )<=SalDateDay(d)
												Set d2= SalDateConstruct( inAnnee,
														SalDateMonth(d), SalStrToNumber( s ), 0, 1, 1 )
											Else
												If SalDateMonth(d)=1
													Set d2= SalDateConstruct( inAnnee-1,
															12, SalStrToNumber( s ), 0, 1, 1 )
												Else
													Set d2= SalDateConstruct( inAnnee,
															SalDateMonth(d)-1, SalStrToNumber( s ), 0, 1, 1 )
									Set s=SalFmtFormatDateTime( d2, 'dd/MM/yyyy' )
									Call SalFmtSetPicture( hWndItem, 'dd/MM/yyyy' )
									Call SalFmtStrToField( hWndItem, s, TRUE )
							Else
								Call SalFmtFieldToStr( hWndItem, s,TRUE )
								Call SalStrTokenize( s, ' ', '/', Tab )
								Set l = SalStrLength( Tab[2] )
							If bControl and  inAnneePiv and ( inAnneePiv > SalDateYear( MyValue ) )
								If ibConfirme
									! If SalMessageBox( "L'année est antérieur à " || SalFmtFormatNumber( inAnneePiv, '0' ) || ". Est ce correcte ?", "Question", MB_YesNo | MB_DefButton1 | MB_IconQuestion ) = IDYES
										Return VALIDATE_Ok
									If PalMessageBox( "Het jaar valt vroeger dan   " || SalFmtFormatNumber( inAnneePiv, '0' ) || ". Is dat juist?", "L'année est antérieur à " || SalFmtFormatNumber( inAnneePiv, '0' ) || ". Est ce correcte ?", "Vraag", "Question", MB_YesNo | MB_DefButton1 
											| MB_IconQuestion ) = IDYES
										Return VALIDATE_Ok
									Else
										! Return VALIDATE_Cancel
										Set MyValue = SalDateConstruct( SalDateYear( MyValue ) + 100, SalDateMonth( MyValue ), SalDateDay( MyValue ), 0, 0, 0 )
										Return VALIDATE_Ok
								Else
									Set MyValue = SalDateConstruct( SalDateYear( MyValue ) + 100, SalDateMonth( MyValue ), SalDateDay( MyValue ), 0, 0, 0 )
							Return VALIDATE_Ok
						Else
							Return VALIDATE_Ok
					On SAM_Create
						! Call SalSendClassMessage( SAM_Create, wParam, lParam )
						Call __InitVar( )
			Data Field Class: clsBaseDfDateTime
				Data
					Maximum Data Length: Class Default
					Data Type: Date/Time
					Editable? Class Default
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  1.7"
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Center
					Format: dd/MM/yyyy hh:mm
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsBaseDf
				Class Variables
					Date/Time: d2
					String: s
					String: Tab[2]
					Boolean: bControl
				Instance Variables
					Date/Time: d
					Boolean: ibPost
					Boolean: ibAnnee
					Number: inAnnee
					Number: inAnneePiv
					Boolean: ibConfirme
				Functions
				Message Actions
					On SAM_Validate
						If not SalIsNull( hWndItem )
							If d=DATETIME_Null
								Set d=SalDateCurrent( )
							If not SalFmtIsValidField( hWndItem )
								Call SalFmtSetPicture( hWndItem, 'dd' )
								If not SalFmtIsValidField( hWndItem )
									Call SalFmtSetPicture( hWndItem, 'dd/MM' )
									If not SalFmtIsValidField( hWndItem )
										! Call SalMessageBox ("Cette date est incorrecte !","Erreur",MB_IconHand)
										Call PalMessageBox ( "Deze datum is onjuist!", "Cette date est incorrecte !","Fout", "Erreur",MB_IconHand)
										! Call SalClearField (hWndItem)
										Call SalFmtSetPicture( hWndItem, 'dd/MM/yyyy' )
										Return VALIDATE_Cancel
									Else
										!
										Call SalFmtFieldToStr( hWndItem, s,TRUE )
										Call SalStrTokenize( s, ' ', '/', Tab )
										If ibAnnee
											Set d2= SalDateConstruct( inAnnee,
													SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
										Else
											If ibPost
												! Nouveau traitement: on prend une date posterieur
												If (SalStrToNumber( Tab[1] )>SalDateMonth(d))
														or (SalStrToNumber( Tab[1] )=SalDateMonth(d) and
														SalStrToNumber( Tab[0] )>=SalDateDay(d))
													Set d2= SalDateConstruct( inAnnee,
															SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
												Else
													Set d2= SalDateConstruct( inAnnee+1,
															SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
											Else
												! Ancien traitement: on prend une date anterieur
												If (SalStrToNumber( Tab[1] )<SalDateMonth(d))
														or (SalStrToNumber( Tab[1] )=SalDateMonth(d) and
														SalStrToNumber( Tab[0] )<=SalDateDay(d))
													Set d2= SalDateConstruct( inAnnee,
															SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
												Else
													Set d2= SalDateConstruct( inAnnee-1,
															SalStrToNumber(Tab[1]), SalStrToNumber( Tab[0] ), 0, 1, 1 )
										Set s=SalFmtFormatDateTime( d2, 'dd/MM/yyyy' )
										Call SalFmtSetPicture( hWndItem, 'dd/MM/yyyy' )
										Call SalFmtStrToField( hWndItem, s, TRUE )
								Else
									Call SalFmtFieldToStr( hWndItem, s,TRUE )
									If ibAnnee
										If inAnnee != SalDateYear( d )
											If inAnnee > SalDateYear( d )
												Set d2= SalDateConstruct( inAnnee,
														1, SalStrToNumber( s ), 0, 1, 1 )
											Else
												Set d2= SalDateConstruct( inAnnee,
														12, SalStrToNumber( s ), 0, 1, 1 )
										Else
											Set d2= SalDateConstruct( inAnnee,
													SalDateMonth(d), SalStrToNumber( s ), 0, 1, 1 )
									Else
										If ibPost
											! Nouveau traitement: on prend une date posterieure
											If SalStrToNumber( s )>=SalDateDay(d)
												Set d2= SalDateConstruct( inAnnee,
														SalDateMonth(d), SalStrToNumber( s ), 0, 1, 1 )
											Else
												If SalDateMonth(d)=12
													Set d2= SalDateConstruct( inAnnee+1,
															1, SalStrToNumber( s ), 0, 1, 1 )
												Else
													Set d2= SalDateConstruct( inAnnee,
															SalDateMonth(d)+1, SalStrToNumber( s ), 0, 1, 1 )
										Else
											! Ancien traitement: on prend une date anterieure
											If SalStrToNumber( s )<=SalDateDay(d)
												Set d2= SalDateConstruct( inAnnee,
														SalDateMonth(d), SalStrToNumber( s ), 0, 1, 1 )
											Else
												If SalDateMonth(d)=1
													Set d2= SalDateConstruct( inAnnee-1,
															12, SalStrToNumber( s ), 0, 1, 1 )
												Else
													Set d2= SalDateConstruct( inAnnee,
															SalDateMonth(d)-1, SalStrToNumber( s ), 0, 1, 1 )
									Set s=SalFmtFormatDateTime( d2, 'dd/MM/yyyy' )
									Call SalFmtSetPicture( hWndItem, 'dd/MM/yyyy' )
									Call SalFmtStrToField( hWndItem, s, TRUE )
							If bControl and inAnneePiv and ( inAnneePiv > SalDateYear( MyValue ) )
								If ibConfirme
									! If SalMessageBox( "L'année est antérieur à " || SalFmtFormatNumber( inAnneePiv, '0' ) || ". Est ce correcte ?", "Question", MB_YesNo | MB_DefButton1 | MB_IconQuestion ) = IDYES
										Return VALIDATE_Ok
									If PalMessageBox( "Het jaar valt vroeger dan   " || SalFmtFormatNumber( inAnneePiv, '0' ) || ". Is dat juist?", "L'année est antérieur à " || SalFmtFormatNumber( inAnneePiv, '0' ) || ". Est ce correcte ?", "Vraag", "Question", MB_YesNo | MB_DefButton1 
											| MB_IconQuestion ) = IDYES
										Return VALIDATE_Ok
									Else
										! Return VALIDATE_Cancel
										Set MyValue = SalDateConstruct( SalDateYear( MyValue ) + 100, SalDateMonth( MyValue ), SalDateDay( MyValue ), 0, 0, 0 )
										Return VALIDATE_Ok
								Else
									Set MyValue = SalDateConstruct( SalDateYear( MyValue ) + 100, SalDateMonth( MyValue ), SalDateDay( MyValue ), 0, 0, 0 )
							Return VALIDATE_Ok
						Else
							Return VALIDATE_Ok
					On SAM_Create
						Set d=SalDateCurrent( )
						Set ibPost = FALSE
						Set ibAnnee = FALSE
						Set inAnnee = SalDateYear( d )
						Set inAnneePiv = 1950
						Set ibConfirme = TRUE
						Set bControl = TRUE
			Dialog Box Class: clsBaseDlg
				Title:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Type of Dialog: Modal
					Allow Dock to Parent? Class Default
					Docking Orientation: Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Absolute Screen Location? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Resizable? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
				Next Class Child Key: 1
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
					Pushbutton: pbInvisibleHelp
						Class Child Ref Key: 0
						Class ChildKey: 1
						Class:
						Property Template:
						Class DLL Name:
						Title:
						Window Location and Size
							Left: Default
							Top: Default
							Width:  Default
							Width Editable? Yes
							Height: Default
							Height Editable? Yes
						Visible? No
						Keyboard Accelerator: F1
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Picture File Name:
						Picture Transparent Color: None
						Image Style: Single
						Text Color: Default
						Background Color: Default
						Button Appearance: Standard
						Message Actions
							On SAM_Click
								Call SalWinHelp( hWndMDI, 'c:\\Accessj\\Help.hlp', HELP_Context, gnHelpContext, '' )
				Derived From
					Class: clsDlgDynSql
					Class: clsDlgMultiLanguage
					Class: clsDlgWndInfoForm
				Class Variables
				Instance Variables
					Number: inHelpContextPrevious
					String: isTmpTitle
					String: isTmpName
					! /##### LS : 05/11/2002
					FunctionalVar: ActiveKey
						Class: gcActiveKey
					! \##### LS : 05/11/2002
				Functions
					! /##### LS : 05/11/2002
					Function: LBFActiveKeyLoad
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: lwh
						Actions
							Call ActiveKey.Load( )
					Function: LBFActiveKeyFree
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call ActiveKey.Free( )
					! \##### LS : 05/11/2002
				Message Actions
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableDlg, PAM_Clear, wParam, lParam )
					On SAM_Close
						If SalSendClassMessageNamed( clsDlgDynSql, SAM_Close, wParam, lParam ) = 0
							Return FALSE
						Else
							If SalSendClassMessageNamed( clsDlgWndInfoForm, SAM_Close, wParam, lParam ) = 0
								Return FALSE
						! /##### LS : 05/11/2002
						Call ActiveKey.Erase( )
						! \##### LS : 05/11/2002
					On SAM_CreateComplete
						Set inHelpContextPrevious = gnHelpContext
						Call SalSendClassMessageNamed( clsDlgWndInfoForm, SAM_CreateComplete, wParam, lParam )
						Call SalSendClassMessageNamed( clsDlgDynSql, SAM_CreateComplete, wParam, lParam )
						! Tonen van naam van de form in de form title
						If gbDynSqlDebug
							Call SalGetWindowText( hWndForm, isTmpTitle, 100 )
							Call SalGetItemName( hWndForm, isTmpName )
							Call SalSetWindowText( hWndForm, isTmpTitle || '     [ ' || isTmpName || ' ]' )
						! /##### LS : 05/11/2002
						! Set inNbrActiveKey =0
						Call ActiveKey.Add( hWndForm, PAM_ActiveKey, KDS_Alt, VK_ADD, PAL_VK_Plus )
						Call ActiveKey.Add( hWndForm, PAM_ActiveKey, KDS_Alt, VK_DELETE, PAL_VK_Moins )
						Call ActiveKey.Add( hWndForm, PAM_ActiveKey, KDS_Alt, VK_MULTIPLY, PAL_VK_Fois )
						! \##### LS : 05/11/2002
					On SAM_Create
						Call SalSendMsg( hWndForm, PAM_Language, gnLanguage, 0 )
					On PAM_Language
						Call SalSendClassMessageNamed( clsDlgMultiLanguage, PAM_Language, wParam, lParam )
					On SAM_Destroy
						Set gnHelpContext = inHelpContextPrevious
						Call SalSendClassMessageNamed( clsGenDynSql, SAM_Destroy, wParam, lParam )
					! /##### LS : 05/11/2002
					On SAM_Activate
						! Call SalSendClassMessageNamed( clsDlgMultiLanguage, SAM_Activate, wParam, lParam )
						If wParam = TRUE
							Call ..LBFActiveKeyLoad( )
						Else
							Call ..LBFActiveKeyFree( )
					! \##### LS : 05/11/2002
			Dialog Box Class: clsBaseDlgTabs
				Title:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Type of Dialog: Class Default
					Allow Dock to Parent? Class Default
					Docking Orientation: Class Default
					Window Location and Size
						Left:
						Top:
						Width:  5.275"
						Width Editable? Class Default
						Height: 3.208"
						Height Editable? Class Default
					Absolute Screen Location? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Resizable? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
				Next Class Child Key: 2
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Tool Bar
					Display Settings
						Display Style? Class Default
						Location? Class Default
						Visible? Class Default
						Size: Class Default
						Size Editable? Class Default
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Class Default
						Font Size: Class Default
						Font Enhancement: Class Default
						Text Color: Class Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
					Picture: picTabs
.data CLASSPROPS
0000: 546162546F704D61 7267696E00020030 0000546162466F72 6D50616765730001
0020: 0000005461624472 61775374796C6500 0B0057696E393553 74796C6500005461
0040: 62426F74746F6D4D 617267696E000200 3000005461625061 6765436F756E7400
0060: 0200310000546162 4C6162656C730007 004C6162656C3000 005461624E616D65
0080: 730006004E616D65 3000005461625269 6768744D61726769 6E00020030000054
00A0: 616243757272656E 740006004E616D65 3000005461624C65 66744D617267696E
00C0: 0002003000000000 0000000000000000 0000000000000000 0000
.enddata
.data CLASSPROPSSIZE
0000: DA00
.enddata
						Class Child Ref Key: 1
						Class ChildKey: 1
						Class: cQuickTabsDialog
						Property Template:
						Class DLL Name:
						Window Location and Size
							Left: Class Default
							Top: Class Default
							Width:  Class Default
							Width Editable? Class Default
							Height: Class Default
							Height Editable? Class Default
						Visible? Class Default
						Editable? Class Default
						File Name:
						Storage: Class Default
						Picture Transparent Color: Class Default
						Fit: Class Default
						Scaling
							Width:  Class Default
							Height:  Class Default
						Corners: Class Default
						Border Style: Class Default
						Border Thickness: Class Default
						Tile To Parent? Class Default
						Border Color: Class Default
						Background Color: Class Default
						Message Actions
					Pushbutton: pbInvisibleHelp
						Class Child Ref Key: 1
						Class ChildKey: 2
						Class: clsBaseDlg
						Property Template:
						Class DLL Name:
						Title:
						Window Location and Size
							Left: Class Default
							Top: Class Default
							Width:  Class Default
							Width Editable? Class Default
							Height: Class Default
							Height Editable? Class Default
						Visible? Class Default
						Keyboard Accelerator: Class Default
						Font Name: Class Default
						Font Size: Class Default
						Font Enhancement: Class Default
						Picture File Name:
						Picture Transparent Color: Class Default
						Image Style: Class Default
						Text Color: Class Default
						Background Color: Class Default
						Button Appearance: Class Default
						Message Actions
				Derived From
					Class: cQuickTabsDialog
					Class: clsBaseDlg
				Class Variables
				Instance Variables
					String: __TabsTranslations[*,4]
				Functions
					Function: TranslateTabLabels
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
							Number: nMin
							Number: nMax
						Actions
							Call LockWindowUpdate( hWndForm )
							Call SalArrayGetLowerBound( __TabsTranslations, 1, nMin )
							Call SalArrayGetUpperBound( __TabsTranslations, 1, nMax )
							Set i = nMin
							While i <= nMax
								! /##### : LS : 08/02/2007
								If not ( ( nMin = nMax ) and ( __TabsTranslations[ i, gnLanguage ] = "" ) )
									Call picTabs.SetLabel( i, __TabsTranslations[ i, gnLanguage ], FALSE )
								! \##### : LS : 08/02/2007
								Set i = i + 1
							Call ..LBFTranslateTabLabels( )
							Call picTabs.Redraw()
							Call LockWindowUpdate( hWndNULL )
					Function: LBFTranslateTabLabels
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
							Number: nMin
							Number: nMax
						Actions
					Function: SetTabTranslation
						Description:
						Returns
						Parameters
							Number: pnLng
							Number: pnTabs
							String: psLabel
						Static Variables
						Local variables
						Actions
							Set __TabsTranslations[ pnTabs, pnLng ] = psLabel
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
							Boolean: bResult
						Actions
							Set bResult = clsBaseDlg.LanguageTranslate( pnLanguage )
							Call SalSendMsg( hWndForm, PAM_TranslateTabLabels, pnLanguage, 0 )
							Return bResult
				Message Actions
					On SAM_Create
						Call SalSendClassMessage( SAM_Create, wParam, lParam )
						Call SalCenterWindow( hWndForm )
					On SAM_CreateComplete
						Call SalSendClassMessageNamed( clsBaseDlg, SAM_CreateComplete, wParam, lParam )
						Call SalSendMsg( hWndForm, PAM_Language, gnLanguage, 0 )
					On PAM_TranslateTabLabels
						Call ..TranslateTabLabels( )
			! Form Window Class: clsBaseFrm
.winattr
				Title:
				Icon File:
				Accessories Enabled? No
				Visible? Yes
				Display Settings
					Display Style? Default
					Visible at Design time? Yes
					Automatically Created at Runtime? No
					Initial State: Normal
					Maximizable? No
					Minimizable? Yes
					Allow Child Docking? Yes
					Docking Orientation: Left
					System Menu? No
					Resizable? No
					Window Location and Size
						Left: 0.399"
						Top: 0.001"
						Width:  0.001"
						Width Editable? No
						Height: 0.001"
						Height Editable? Yes
					Form Size
						Width:  0.001"
						Height: 0.001"
						Number of Pages: Dynamic
					Font Name:
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Next Class Child Key: 1
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
.end
				Description: 
				Derived From 
					Class: clsFrmDynSql
					Class: clsFrmMultiLanguage
					Class: cfrmWndInfoForm
				Menu 
				Tool Bar 
.winattr
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Yes
						Toolbar Docking Orientation: Top | Bottom
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Default
						Resizable? No
.end
					Contents 
				Contents 
				Class Variables 
				Instance Variables 
					String: isTmpTitle
					String: isTmpName
				Functions 
				Message Actions 
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableFrm, PAM_Clear, wParam, lParam )
					On SAM_Close
						Call SalSendClassMessageNamed( clsFrmMultiLanguage, SAM_Close, wParam, lParam )
						If SalSendClassMessageNamed( clsFrmDynSql, SAM_Close, wParam, lParam ) = 0
							Return FALSE
						Else 
							If SalSendClassMessageNamed( cfrmWndInfoForm, SAM_Close, wParam, lParam ) = 0
								Return FALSE
					On SAM_CreateComplete
						Call SalSendClassMessageNamed( cfrmWndInfoForm, SAM_CreateComplete, wParam, lParam )
						Call SalSendClassMessageNamed( clsFrmDynSql, SAM_CreateComplete, wParam, lParam )
						Call SalSendClassMessageNamed( clsFrmMultiLanguage, SAM_CreateComplete, wParam, lParam )
						! Tonen van naam van de form in de form title
						If gbDynSqlDebug
							Call SalGetWindowText( hWndForm, isTmpTitle, 100 )
							Call SalGetItemName( hWndForm, isTmpName )
							Call SalSetWindowText( hWndForm, isTmpTitle || '     [ ' || isTmpName || ' ]' )
					On SAM_Create
						Call SalSendMsg( hWndForm, PAM_Language, gnLanguage, 0 )
					On PAM_Language
						Call SalSendClassMessageNamed( clsFrmMultiLanguage, PAM_Language, wParam, lParam )
					On SAM_Activate
						Call SalSendClassMessageNamed( clsFrmMultiLanguage, SAM_Activate, wParam, lParam )
			Form Window Class: clsBaseFrm
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? No
					Initial State: Class Default
					Maximizable? No
					Minimizable? Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Form Size
						Width:  Class Default
						Height: Class Default
						Number of Pages: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsFrmDynSql
					Class: clsFrmMultiLanguage
					Class: cfrmWndInfoForm
					! Class: cResizeFormWindow
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
				Instance Variables
					String: isTmpTitle
					String: isTmpName
					Number: inFctPerm
					! /##### LS : 05/11/2002
					FunctionalVar: ActiveKey
						Class: gcActiveKey
					! \##### LS : 05/11/2002
				Functions
					! /##### LS : 05/11/2002
					Function: LBFActiveKeyLoad
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: lwh
						Actions
							Call ActiveKey.Load( )
					Function: LBFActiveKeyFree
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							! Call ActiveKey.Erase( )
							Call ActiveKey.Free( )
					! \##### LS : 05/11/2002
				Message Actions
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableFrm, PAM_Clear, wParam, lParam )
					On SAM_Close
						Call SalSendMsgToChildren( hWndForm, PAM_Situation_Table, cSitSave, 0 )
						Call SalSendClassMessageNamed( clsFrmMultiLanguage, SAM_Close, wParam, lParam )
						If SalSendClassMessageNamed( clsFrmDynSql, SAM_Close, wParam, lParam ) = 0
							Return FALSE
						Else
							If SalSendClassMessageNamed( cfrmWndInfoForm, SAM_Close, wParam, lParam ) = 0
								Return FALSE
						! /##### LS : 05/11/2002
						Call ActiveKey.Erase( )
						! \##### LS : 05/11/2002
					On SAM_CreateComplete
						Call SalSendClassMessageNamed( cfrmWndInfoForm, SAM_CreateComplete, wParam, lParam )
						Call SalSendClassMessageNamed( clsFrmDynSql, SAM_CreateComplete, wParam, lParam )
						Call SalSendClassMessageNamed( clsFrmMultiLanguage, SAM_CreateComplete, wParam, lParam )
						! /@@@@@ LS : 30/11/1999
						! Call SalSendMsgToChildren( hWndForm, SAM_CreateComplete, wParam, lParam )
						Call SalSendMsgToChildren( hWndForm, PAM_Situation_Table, cSitLoad, lParam )
						! \@@@@@ LS : 30/11/1999
						! Tonen van naam van de form in de form title
						If gbDynSqlDebug
							Call SalGetWindowText( hWndForm, isTmpTitle, 100 )
							Call SalGetItemName( hWndForm, isTmpName )
							Call SalSetWindowText( hWndForm, isTmpTitle || '     [ ' || isTmpName || ' ]' )
						! /##### LS : 05/11/2002
						! Set inNbrActiveKey =0
						Call ActiveKey.Add( hWndForm, PAM_ActiveKey, KDS_Alt, VK_ADD, PAL_VK_Plus )
						Call ActiveKey.Add( hWndForm, PAM_ActiveKey, KDS_Alt, VK_DELETE, PAL_VK_Moins )
						Call ActiveKey.Add( hWndForm, PAM_ActiveKey, KDS_Alt, VK_MULTIPLY, PAL_VK_Fois )
						! \##### LS : 05/11/2002
					On SAM_Create
						Call SalSendMsg( hWndForm, PAM_Language, gnLanguage, 0 )
					On PAM_Language
						Call SalSendClassMessageNamed( clsFrmMultiLanguage, PAM_Language, wParam, lParam )
						Call SalSendMsg( hWndForm, PAM_TranslateTabLabels, wParam, lParam )
					On SAM_Activate
						Call SalSendClassMessageNamed( clsFrmMultiLanguage, SAM_Activate, wParam, lParam )
						! /##### LS : 05/11/2002
						If wParam = TRUE
							Call ..LBFActiveKeyLoad( )
						Else
							Call ..LBFActiveKeyFree( )
						! \##### LS : 05/11/2002
					On PAM_Permission
						! If not PalPermissionModif( inFctPerm )
							Call SalSendMsgToChildren( hWndForm, PAM_Permission, wParam, lParam )
						If not PalPermissionModif( inFctPerm )
							Call SalSendMsgToChildren( hWndForm, PAM_Permission, cPermModif, lParam )
						Else
							Call SalSendMsgToChildren( hWndForm, PAM_Permission, 0, lParam )
					On WM_SIZE
						! LS le 24/04/2006
						! Call SalSendClassMessage( WM_SIZE, wParam, lParam )
						! Call SalSendClassMessageNamed( cfrmWndInfoForm, WM_SIZE, wParam, lParam )
						! Call SalSendClassMessageNamed( cResizeFormWindow, WM_SIZE, wParam, lParam )
						! Call SalSendMsg( hWndForm, PM_FORM_RESIZED, wParam, lParam )
						! Call SalSendClassMessage( PM_FORM_RESIZED, wParam, lParam )
						Call SalSendMsgToChildren( hWndForm, PM_FORM_RESIZED, wParam, lParam )
			Form Window Class: clsBaseFrmTabs
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Form Size
						Width:  Class Default
						Height: Class Default
						Number of Pages: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 1
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: cQuickTabsForm
					Class: clsBaseFrm
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
					Picture: picTabs
.data CLASSPROPS
0000: 5461624C6566744D 617267696E000200 3000005461624375 7272656E74000600
0020: 4E616D6530000054 6162426F74746F6D 4D617267696E0002 0030000054616250
0040: 616765436F756E74 0002003100005461 624C6162656C7300 07004C6162656C30
0060: 00005461624E616D 65730006004E616D 6530000054616252 696768744D617267
0080: 696E000200300000 5461624472617753 74796C65000B0057 696E39355374796C
00A0: 650000546162466F 726D506167657300 0100000054616254 6F704D617267696E
00C0: 0002003000000000 0000000000000000 0000000000000000 0000
.enddata
.data CLASSPROPSSIZE
0000: DA00
.enddata
						Class Child Ref Key: 1
						Class ChildKey: 1
						Class: cQuickTabsForm
						Property Template:
						Class DLL Name:
						Window Location and Size
							Left: Class Default
							Top: Class Default
							Width:  Class Default
							Width Editable? Class Default
							Height: Class Default
							Height Editable? Class Default
						Visible? Class Default
						Editable? Class Default
						File Name:
						Storage: Class Default
						Picture Transparent Color: Class Default
						Fit: Class Default
						Scaling
							Width:  Class Default
							Height:  Class Default
						Corners: Class Default
						Border Style: Class Default
						Border Thickness: Class Default
						Tile To Parent? Class Default
						Border Color: Class Default
						Background Color: Class Default
						Message Actions
				Class Variables
				Instance Variables
					String: __TabsTranslations[*,4]
				Functions
					Function: TranslateTabLabels
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
							Number: nMin
							Number: nMax
						Actions
							Call LockWindowUpdate( hWndForm )
							Call SalArrayGetLowerBound( __TabsTranslations, 1, nMin )
							Call SalArrayGetUpperBound( __TabsTranslations, 1, nMax )
							Set i = nMin
							While i <= nMax
								! / #### LS : 08/02/2007
								! Call picTabs.SetLabel( i, __TabsTranslations[ i, gnLanguage ], FALSE )
								If not ( ( nMin = nMax ) and ( __TabsTranslations[ i, gnLanguage ] = "" ) )
									Call picTabs.SetLabel( i, __TabsTranslations[ i, gnLanguage ], FALSE )
								! \##### : LS 08/02/2007
								Set i = i + 1
							Call ..LBFTranslateTabLabels( )
							Call picTabs.Redraw()
							Call LockWindowUpdate( hWndNULL )
					Function: LBFTranslateTabLabels
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
							Number: nMin
							Number: nMax
						Actions
					Function: SetTabTranslation
						Description:
						Returns
						Parameters
							Number: pnLng
							Number: pnTabs
							String: psLabel
						Static Variables
						Local variables
						Actions
							Set __TabsTranslations[ pnTabs, pnLng ] = psLabel
				Message Actions
					On SAM_CreateComplete
						Call SalSendClassMessageNamed( clsBaseFrm, SAM_CreateComplete, wParam, lParam )
					On PAM_TranslateTabLabels
						Call ..TranslateTabLabels( )
			Form Window Class: clsBaseFrmUniLanguage
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? No
					Initial State: Class Default
					Maximizable? No
					Minimizable? Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Form Size
						Width:  Class Default
						Height: Class Default
						Number of Pages: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsFrmDynSql
					Class: cfrmWndInfoForm
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
				Instance Variables
					String: isTmpTitle
					String: isTmpName
				Functions
				Message Actions
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableFrm, PAM_Clear, wParam, lParam )
					On SAM_Close
						If SalSendClassMessageNamed( clsFrmDynSql, SAM_Close, wParam, lParam ) = 0
							Return FALSE
						Else
							If SalSendClassMessageNamed( cfrmWndInfoForm, SAM_Close, wParam, lParam ) = 0
								Return FALSE
					On SAM_CreateComplete
						Call SalSendClassMessageNamed( cfrmWndInfoForm, SAM_CreateComplete, wParam, lParam )
						Call SalSendClassMessageNamed( clsFrmDynSql, SAM_CreateComplete, wParam, lParam )
						! Tonen van naam van de form in de form title
						! Call SalGetWindowText( hWndForm, isTmpTitle, 100 )
						! Call SalGetItemName( hWndForm, isTmpName )
						! Call SalSetWindowText( hWndForm, isTmpTitle || '     [ ' || isTmpName || ' ]' )
					On SAM_Create
						Call SalSendMsg( hWndForm, PAM_Language, gnLanguage, 0 )
			Form Window Class: clsBaseFrmTabsUniLanguage
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Form Size
						Width:  Class Default
						Height: Class Default
						Number of Pages: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 1
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: cQuickTabsForm
					Class: clsBaseFrmUniLanguage
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
					Picture: picTabs
.data CLASSPROPS
0000: 5461624C6566744D 617267696E000200 3000005461624375 7272656E74000600
0020: 4E616D6530000054 6162426F74746F6D 4D617267696E0002 0030000054616250
0040: 616765436F756E74 0002003100005461 624C6162656C7300 07004C6162656C30
0060: 00005461624E616D 65730006004E616D 6530000054616252 696768744D617267
0080: 696E000200300000 5461624472617753 74796C65000B0057 696E39355374796C
00A0: 650000546162466F 726D506167657300 0100000054616254 6F704D617267696E
00C0: 0002003000000000 0000000000000000 0000000000000000 0000
.enddata
.data CLASSPROPSSIZE
0000: DA00
.enddata
						Class Child Ref Key: 1
						Class ChildKey: 1
						Class: cQuickTabsForm
						Property Template:
						Class DLL Name:
						Window Location and Size
							Left: Class Default
							Top: Class Default
							Width:  Class Default
							Width Editable? Class Default
							Height: Class Default
							Height Editable? Class Default
						Visible? Class Default
						Editable? Class Default
						File Name:
						Storage: Class Default
						Picture Transparent Color: Class Default
						Fit: Class Default
						Scaling
							Width:  Class Default
							Height:  Class Default
						Corners: Class Default
						Border Style: Class Default
						Border Thickness: Class Default
						Tile To Parent? Class Default
						Border Color: Class Default
						Background Color: Class Default
						Message Actions
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On SAM_CreateComplete
						Call SalSendClassMessageNamed( clsBaseFrmUniLanguage, SAM_CreateComplete, wParam, lParam )
			Group Box Class: clsBaseGb
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Title:
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
			List Box Class: clsBaseLb
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableLb
					Class: clsLbMultiLanguage
					Class: clsDisableField
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
					On PAM_Language
						Call SalSendClassMessageNamed( clsLbMultiLanguage, PAM_Language, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableLb, PAM_Clear, wParam, lParam )
					On SAM_Click
						Call SalSendClassMessageNamed( clsClearableLb, SAM_Click, wParam, lParam )
			MDI Window Class: clsBaseMDI
				Title:
				Display Settings
					Visible at Design time? Yes
					Automatically Created at Runtime? No
					Initial State: Maximized
					Maximizable? Class Default
					Minimizable? Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Yes
						Height: Class Default
						Height Editable? Yes
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
				Icon File:
				Accessories Enabled? Class Default
				Visible? Yes
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMdiMultiLanguage
					Class: cmdiWndInfoMDI
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On WM_SIZE
						Call SalSendClassMessageNamed( cmdiWndInfoMDI, WM_SIZE, wParam, lParam )
					On SAM_CreateComplete
						Call SalSendClassMessageNamed( cmdiWndInfoMDI, SAM_CreateComplete, wParam, lParam )
					On SAM_Create
						Call SalSendMsg( hWndMDI, PAM_Language, gnLanguage, 0 )
					On PAM_Language
						Call SalSendClassMessageNamed( clsMdiMultiLanguage, PAM_Language, wParam, lParam )
			Multiline Field Class: clsBaseMl
				Data
					Maximum Data Length: Class Default
					String Type: Class Default
					Editable? Class Default
				Display Settings
					Border? Class Default
					Word Wrap? Yes
					Vertical Scroll? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMlMultiLanguage
					Class: clsClearableMl
					Class: clsDisableField
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On SAM_AnyEdit
						Call SalSendClassMessageNamed( clsClearableMl, SAM_AnyEdit, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableMl, PAM_Clear, wParam, lParam )
					On PAM_Language
						Call SalSendClassMessageNamed( clsMlMultiLanguage, PAM_Language, wParam, lParam )
			Radio Button Class: clsBaseRb
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsRbMultiLanguage
					Class: clsClearableRb
					Class: clsDisableField
				Class Variables
				Instance Variables
				Functions
					Function: LBFDisableInit
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Boolean: bEtat
						Actions
							Call clsDisableField.LBFDisableInit( )
							Set bEtat = FALSE
							Call DisableSetBackgroundColor( bEtat, COLOR_Default )
							Set bEtat = TRUE
							Call DisableSetBackgroundColor( bEtat, COLOR_Default )
				Message Actions
					On SAM_Click
						Call SalSendClassMessageNamed( clsClearableRb, SAM_Click, wParam, lParam )
					On PAM_Language
						Call SalSendClassMessageNamed( clsRbMultiLanguage, PAM_Language, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableRb, PAM_Clear, wParam, lParam )
			Radio Button Class: clsBaseRbReadOnly
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsRbMultiLanguage
					Class: clsClearableRb
				Class Variables
				Instance Variables
				Functions
				Message Actions
					! On SAM_Click
						Call SalSendClassMessageNamed( clsClearableRb, SAM_Click, wParam, lParam )
					On PAM_Language
						Call SalSendClassMessageNamed( clsRbMultiLanguage, PAM_Language, wParam, lParam )
					On PAM_Clear
						Call SalSendClassMessageNamed( clsClearableRb, PAM_Clear, wParam, lParam )
					On WM_KEYDOWN
						Return FALSE
					On WM_KEYUP
						Return FALSE
					On WM_LBUTTONDOWN
						Return FALSE
					On WM_LBUTTONUP
						Return FALSE
					On WM_LBUTTONDBLCLK
						Return FALSE
			Picture Class: clsBasePic
				Window Location and Size
					Left:
					Top:
					Width:  2.0"
					Width Editable? Class Default
					Height: 1.8"
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				File Name:
				Storage: Class Default
				Picture Transparent Color: Class Default
				Fit: Size to Fit
				Scaling
					Width:  Class Default
					Height:  Class Default
				Corners: Class Default
				Border Style: Etched
				Border Thickness: Class Default
				Tile To Parent? Class Default
				Border Color: Class Default
				Background Color: 3D Face Color
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearablePic
				Class Variables
				Instance Variables
				Functions
				Message Actions
			Table Window Class: clsBaseTbl
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Visible at Design time? Yes
					Automatically Created at Runtime? No
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: ctblWndInfoTable
					Class: clsTblMultiLanguage
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
				Instance Variables
				Functions
				Message Actions
			Pushbutton Class: clsBasePbToolbar
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  0.5"
					Width Editable? Class Default
					Height: 0.355"
					Height Editable? Yes
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Single
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Button Appearance: Class Default
				Description:
				Derived From
					! Class: PB_CS
					Class: DynaToolTipPushbutton
					Class: cResizePushButton
					Class: clsDisableField
				Class Variables
				Instance Variables
				Functions
					Function: SetStatusText
						Description: Change the text displayed on the status bar
						Returns
							Boolean:
						Parameters
							String: p_sText
								! Text to be displayed on the status bar
						Static Variables
						Local variables
						Actions
							Call AddTool( hWndItem, p_sText, p_sText, FALSE )
				Message Actions
					! On WM_MOUSEMOVE
						Call SalSendClassMessageNamed( PB_CS, WM_MOUSEMOVE, wParam, lParam )
			Pushbutton Class: clsBasePbOnForm
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Yes
					Height: Class Default
					Height Editable? Yes
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Single
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Button Appearance: Class Default
				Description:
				Derived From
					! Class: PB_CS
					Class: clsPbMultiLanguage
					Class: DynaToolTipPushbutton
					Class: cResizePushButton
					Class: clsDisableField
				Class Variables
				Instance Variables
				Functions
					Function: SetStatusText
						Description: Change the text displayed on the status bar
						Returns
							Boolean:
						Parameters
							String: p_sText
								! Text to be displayed on the status bar
						Static Variables
						Local variables
						Actions
							Call AddTool( hWndItem, p_sText, p_sText, FALSE )
					! /##### 17/10/2003
					Function: LBFDisableInit
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Boolean: bEtat
						Actions
							Set bEtat = FALSE
							If not DisableIsBackgroundColorSet( bEtat )
								Call DisableSetBackgroundColor( bEtat, COLOR_3DFace )
							If not DisableIsTextColorSet( bEtat )
								Call DisableSetTextColor( bEtat, COLOR_Black )
							Set bEtat = TRUE
							If not DisableIsBackgroundColorSet( bEtat )
								Call DisableSetBackgroundColor( bEtat, COLOR_3DFace )
							If not DisableIsTextColorSet( bEtat )
								Call DisableSetTextColor( bEtat, COLOR_Black )
					! \##### 17/10/2003
				Message Actions
					! On WM_MOUSEMOVE
						Call SalSendClassMessageNamed( PB_CS, WM_MOUSEMOVE, wParam, lParam )
					On PAM_Language
						Call SalSendClassMessageNamed( clsPbMultiLanguage, PAM_Language, wParam, lParam )
			Pushbutton Class: clsBasePbToolbarML
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  0.5"
					Width Editable? Class Default
					Height: 0.355"
					Height Editable? Yes
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Single
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Button Appearance: Class Default
				Description:
				Derived From
					Class: clsBasePbToolbar
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On WM_NCCREATE
						Call SetWindowLongA( hWndItem, GWL_STYLE, GetWindowLongA( hWndItem, GWL_STYLE )  | BS_MULTILINE )
			Pushbutton Class: clsBasePbOnFormML
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Yes
					Height: Class Default
					Height Editable? Yes
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Single
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Button Appearance: Class Default
				Description:
				Derived From
					Class: clsBasePbOnForm
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On WM_NCCREATE
						Call SetWindowLongA( hWndItem, GWL_STYLE, GetWindowLongA( hWndItem, GWL_STYLE )  | BS_MULTILINE )
			! ====================================================================
			!
			! Classes in TOOLTIPS.APL --------------------------------------------------------------------------------------------
			! Functional Class: INT_CS_ToolTip
.winattr
.end
				Description: INT_CS_ToolTip interface between tool tip dialog box:
						dlgBB_ToolTip and pushbutton (PB_CS) dervied from this class.
						
						Defines class variables used to move tip text and control when
						tool tip are displayed.
				Derived From 
				Class Variables 
					Window Handle: cv_hWndToolTip
				Instance Variables 
				Functions 
					Function: M_ShowTip
						Description: [PUBLIC]
								M_ShowTip late bound function that notifies tool tip dialog that it
								is time to show tip.
						Returns 
						Parameters 
							String: sText
						Static Variables 
						Local variables 
						Actions 
					! ---------------------------!
					Function: M_HideTip
						Description: [PUBLIC]
								M_HideTip late bound function that notifies tool tip dialog that it
								is time to hide tip.
						Returns 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
			! General Window Class: CWC_CS_ToolTip
.winattr
.end
				Description: CWC_CS_ToolTip by Tool Bar pushbutton classes or other 
						graphical classes to allow displaying of Tool Tip like MS Word.
						
						CWC_CS_ToolTip uses a time (SAM_Timer) to control when Tool Tips
						are displayed.
				Derived From 
					Class: INT_CS_ToolTip
				Class Variables 
					Number: cv_nMouseX
					! ---------------------------!
					Number: cv_nMouseY
					! ---------------------------!
					Boolean: cv_bWait
					! ---------------------------!
					Boolean: cv_bShowing
					! ---------------------------!
					Boolean: cv_bDisableToolTips
				Instance Variables 
					String: iv_sTip
				Functions 
					Function: __KillTimer
						Description: [PRIVATE]
								__KillTimer is used to kill the timer that drives the polling 
								of the mouse position and sending the SAM_Timer message.
								 __KillTimer is called in the WM_MOUSEMOVE processing
						Returns 
						Parameters 
							Number: nTimer
						Static Variables 
						Local variables 
						Actions 
							Call SalTimerKill( hWndItem, nTimer )
					! ---------------------------!
					Function: __MakeLong
						Description: [PRIVATE]
								__MakeLong is used to create a LONG value 32 bit.
						Returns 
						Parameters 
							Number: nLow
							Number: nHigh
						Static Variables 
						Local variables 
						Actions 
							Return nHigh * 65536 | nLow
					! ---------------------------!
					Function: DisableToolTips
						Description: [PUBLIC]
								DisableToolTips is used to turn off the displaying of ToolTips.
								DisableToolTips set a class variable which turns off ToolTips
								for all Pushbuttons on all objects.
						Returns 
						Parameters 
							Boolean: bDisable
						Static Variables 
						Local variables 
						Actions 
							Set cv_bDisableToolTips = bDisable
					! ---------------------------!
					Function: SetTip
						Description: [PUBLIC]
								SetTip is used to set the ToolTip text.
						Returns 
						Parameters 
							String: sText
						Static Variables 
						Local variables 
						Actions 
							Set iv_sTip = sText
					! ---------------------------!
					Function: GetTip
						Description: [PUBLIC]
								GetTip is used to get the current ToolTip text.
						Returns 
							String: 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Return iv_sTip
				Message Actions 
					! ---------------------------!
					On WM_MOUSEMOVE
						If NOT cv_bDisableToolTips
							If NOT cv_bWait
								If SalTimerSet( hWndItem, 1, 500 )
									Set cv_bWait = TRUE
					! ---------------------------!
					On SAM_Timer
						If NOT cv_bDisableToolTips
							Call GetCursorPos( cv_nMouseX, cv_nMouseY )
							If hWndItem = WindowFromPoint( __MakeLong(cv_nMouseX, cv_nMouseY) )
								If SalIsWindowVisible(hWndItem)
									If NOT cv_bShowing
										If cv_hWndToolTip = hWndNULL
											Set cv_hWndToolTip = SalCreateWindow( dlgBB_ToolTip, hWndNULL )
										If cv_hWndToolTip != hWndNULL
											If GetTip( ) != ''
												Call cv_hWndToolTip.INT_CS_ToolTip..M_ShowTip( iv_sTip )
												Set cv_bShowing = TRUE
												Call SalTimerSet( hWndItem, 1, 5 )
								Else 
									If cv_hWndToolTip != hWndNULL
										Call cv_hWndToolTip.INT_CS_ToolTip..M_HideTip( )
									Set cv_bShowing = FALSE
									Call __KillTimer( 1 )
									Set cv_bWait = FALSE
							Else 
								If cv_hWndToolTip != hWndNULL
									Call cv_hWndToolTip.INT_CS_ToolTip..M_HideTip( )
								Set cv_bShowing = FALSE
								Call __KillTimer( 1 )
								Set cv_bWait = FALSE
					! ---------------------------!
					On SAM_Destroy
						If NOT cv_bDisableToolTips
							If cv_bShowing
								Call cv_hWndToolTip.INT_CS_ToolTip..M_HideTip( )
								Set cv_bShowing = FALSE
							If cv_bWait
								Call __KillTimer( 1 )
								Set cv_bWait = FALSE
			! Dialog Box Class: DLG_CS_ToolTip
.winattr
				Title:
				Accessories Enabled? No
				Visible? Yes
				Display Settings
					Display Style? Default
					Visible at Design time? Yes
					Type of Dialog: Modeless
					Allow Dock to Parent? No
					Docking Orientation: All
					Window Location and Size
						Left: 0.399"
						Top: 0.0"
						Width:  0.001"
						Width Editable? No
						Height: 0.001"
						Height Editable? No
					Absolute Screen Location? No
					Font Name:
					Font Size: 1
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Resizable?
					Vertical Scroll?
					Horizontal Scroll?
				Next Class Child Key: 1
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
.end
				Description: DLG_CS_ToolTip is Tool Tip Dialog Box that shows up under 
						Tool Bar items. This class is designed for Tool Tip support only.
				Tool Bar 
.winattr
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Yes
						Toolbar Docking Orientation: Top | Bottom
						Font Name: Default
						Font Size: 1
						Font Enhancement: Default
						Text Color: Default
						Background Color: Default
						Resizable? No
.end
					Contents 
				Contents 
					Data Field: dfTip
.winattr
						Class Child Ref Key: 0
						Class ChildKey: 1
						Class:
						Property Template:
						Class DLL Name:
						Data
							Maximum Data Length: Default
							Data Type: String
							Editable? No
						Display Settings
							Window Location and Size
								Left: 0.0"
								Top: 0.0"
								Width:  3.317"
								Width Editable? Yes
								Height: 0.238"
								Height Editable? Yes
							Visible? Yes
							Border? Yes
							Justify: Left
							Format: Unformatted
							Country: Default
							Font Name: Arial
							Font Size: 8
							Font Enhancement: None
							Text Color: Default
							Background Color: Maize
							Input Mask: Unformatted
.end
						Message Actions 
							On SAM_Create
								! Call SalColorSet(hWndItem,COLOR_IndexWindow,
										COLOR_Yellow)
								Call SalColorSet(hWndItem,COLOR_IndexWindow,
										SalColorFromRGB(255,255,90))
								Call SalColorSet(hWndItem,COLOR_IndexWindowText,COLOR_Black)
				Derived From 
					Class: INT_CS_ToolTip
				Class Variables 
				Instance Variables 
				Functions 
					! ---------------------------!
					Function: M_ShowTip
						Description: [PUBLIC]
								M_ShowTip is used to display the Tool Tip for the object the
								cursor is currently positioned over.
								
								M_ShowTip is a ..Late Bound function that is invoked when 
								a timer (SAM_Timer) indicates the cursor is positioned over
								a pushbutton.
						Returns 
						Parameters 
							String: sText
						Static Variables 
						Local variables 
							Number: nMouseX
							Number: nMouseY
							!
							Number: hDC
							Number: nTextWidth
							Number: nTextHeight
							Number: nScreenWidth
							Number: nScreenHeight
						Actions 
							Set dfTip = sText
							Set nScreenWidth = GetSystemMetrics( SM_CXSCREEN )
							Set nScreenHeight = GetSystemMetrics( SM_CYSCREEN )
							Call SalFmtFieldToStr( dfTip, sText, TRUE )
							! ------------------------------------------------------- !
							Set hDC = GetDC( dfTip )
							Call SelectObject( hDC, SalNumberLow( SalSendMsg( dfTip, WM_GETFONT, 0, 0 ) ) )
							Set nTextWidth = SalNumberLow( GetTextExtent( hDC, sText, 
											SalStrLength( sText ) + 1 ) ) + 2
							Set nTextHeight = SalNumberHigh( GetTextExtent( hDC, sText, 
											SalStrLength( sText ) + 1 ) ) + 6
							Call ReleaseDC ( dfTip, hDC )
							! ------------------------------------------------------- !
							Call GetCursorPos( nMouseX, nMouseY )
							! Make sure the width of tip is not off the screen
							If nMouseX + nTextWidth >= nScreenWidth
								Set nMouseX = nScreenWidth - nTextWidth - 5
							! Make sure the height of tip is not off the screen
							If nMouseY + nTextHeight + 18 > nScreenHeight
								Set nMouseY = nMouseY - nTextHeight - 30
							Set nMouseX = SalPixelsToFormUnits( hWndNULL, nMouseX - 2, FALSE )
							Set nMouseY = SalPixelsToFormUnits( hWndNULL, nMouseY + 18, TRUE )
							Call SalSetWindowLoc( hWndForm, nMouseX, nMouseY )
							! Size dialog by data field...
							Set nTextWidth = SalPixelsToFormUnits( dfTip, nTextWidth, FALSE )
							Set nTextHeight = SalPixelsToFormUnits( dfTip, nTextHeight, TRUE ) 
							Call SalSetWindowSize( dfTip, nTextWidth, nTextHeight )
							Call SalSetWindowSize( hWndForm, nTextWidth, nTextHeight )
							! -------------------------------------------------------- !
							Call ShowWindow( hWndForm, SW_SHOWNOACTIVATE )
					! ---------------------------!
					Function: M_HideTip
						Description: [PUBLIC]
								M_HideTip is used to destroy the instance of the Tool Tip 
								dialog.
								
								M_HideTip is invoked when a time (SAM_Timer) indicates
								that the cursor is no longer over a pushbutton.
						Returns 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							! Call SalHideWindow( hWndForm )
							Call SalDestroyWindow(hWndForm)
							Set cv_hWndToolTip  = hWndNULL
				Message Actions 
					! ---------------------------!
					On WM_NCCREATE
						Call SetWindowLongA ( hWndItem, GWL_STYLE, 
								GetWindowLongA (hWndItem, GWL_STYLE) & NO_WS_CAPTION )
					! ---------------------------!
					On SAM_Create
						Call SalColorSet(hWndItem,COLOR_IndexWindow,
								SalColorFromRGB(255,255,90))
						Call SalHideWindow( hWndForm )
			! Pushbutton Class: PB_CS
.winattr
				Title:
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Default
					Width Editable? No
					Height: 0.25"
					Height Editable? No
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Button Appearance: Standard
.end
				Description: PB_CS base Building Blocks Pushbutton Class. All Pushbuttons
						should be derived from the class.
						PB_CS derived from Tool Tip class.  Any class derived from or 
						object created from this class will have Tool Tip support.
				Derived From 
					! Class: CWC_CS_ToolTip
				Class Variables 
				Instance Variables 
					String: iv_sStatusText
				Functions 
					Function: GetStatusText
						Description: GetStatusText returns the Text to be displayed in the status bar 
								when the mouse move over a Pushbutton of class: PB_CS. 
								GetStatusText returns the value set by SetStatusText.
								
						Returns 
							String: 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Return iv_sStatusText
					Function: SetStatusText
						Description: SetStatusText sets the Text to be displayed in the status bar when the 
								mouse moves over  a Pushbutton of class: PB_CS. 
								SetStatusText and returns the value set by GetStatusText.
								
						Returns 
						Parameters 
							String: sStatusText
						Static Variables 
						Local variables 
						Actions 
							Set iv_sStatusText = sStatusText
							! Call SetTip( iv_sStatusText )
							Call TTSetStatusText( hWndItem, sStatusText )
							Call TTSetTipText( hWndItem, sStatusText )
				Message Actions 
					! On WM_MOUSEMOVE
						Call SalSendClassMessage(WM_MOUSEMOVE,wParam,lParam)
						Call SalStatusSetText(hWndForm,GetStatusText())
			! ----------------------------------------------------------------------------------------------------------------------------------------
			!
			! Classes in WININFO.APL ---------------------------------------------------------------------------------------------------------
			! PRIVATE
			Functional Class: cWndInfoStructure
				Description: Definition of a structure for storing information about a MDI window child (form or table window).
				Derived From
				Class Variables
				Instance Variables
					String: isWindowName
					Number: inChainNumber
					Boolean: ibBaseWindowOfChain
					Window Handle: ihWndWindowHandle
					Number: inWndParmArr[*]
				Functions
			Functional Class: cWndInfoList
				Description:
				Derived From
				Class Variables
				Instance Variables
					! List of cWndInfoStructure's
						Each window participating in a chain is listed in this array.
						The variable inWndInfoListUpperBound indicates the number of windows in the list 
								(also the next free place in the array)
					FunctionalVar: iWndInfoStructure[*]
						Class: cWndInfoStructure
					Number: inWndInfoListUpperBound
				Functions
					Function: GetUpperBound
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
							Number: lnUpperBound
						Actions
							Call SalArrayGetUpperBound( iWndInfoStructure, 1, lnUpperBound )
							Return lnUpperBound
					Function: GetArrayIndex
						Description:
						Returns
							Number:
						Parameters
							String: psWindowName
						Static Variables
						Local variables
							Number: lnTeller
							Number: lnWndInfoListUpperBound
						Actions
							Set lnTeller = 0
							Set lnWndInfoListUpperBound = GetUpperBound( )
							While lnTeller <= lnWndInfoListUpperBound
								If iWndInfoStructure[lnTeller].isWindowName = psWindowName
									Return lnTeller
								Set lnTeller = lnTeller + 1
							Return -1
					Function: WndInfoAddWindow
						Description: Adds a cWndInfoStructure to the list
						Returns
						Parameters
							String: psWindowName
							Number: pnChainNumber
							Boolean: pbBaseWindowOfChain
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
						Actions
							Set pWndInfoList.iWndInfoStructure[inWndInfoListUpperBound].isWindowName = psWindowName
							Set pWndInfoList.iWndInfoStructure[inWndInfoListUpperBound].inChainNumber = pnChainNumber
							Set pWndInfoList.iWndInfoStructure[inWndInfoListUpperBound].ibBaseWindowOfChain = pbBaseWindowOfChain
							Set pWndInfoList.inWndInfoListUpperBound = inWndInfoListUpperBound + 1
					Function: GetChainNumber
						Description: Returns, using the window name, the chain number of the window in the receive parameter pnChainNumber. 
						Returns
							Boolean:
						Parameters
							String: psWindowName
							Receive Number: pnChainNumber
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Number: lnIndex
						Actions
							Set lnIndex = pWndInfoList.GetArrayIndex(psWindowName)
							If lnIndex < 0
								Return FALSE
							Else
								Set pnChainNumber =  pWndInfoList.iWndInfoStructure[lnIndex].inChainNumber
								Return TRUE
					Function: GetWindowHandle
						Description: Lookups the window handle in the Window Info List using the window name.
						Returns
							Window Handle:
						Parameters
							String: psWindowName
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Number: lnIndex
						Actions
							Set lnIndex = pWndInfoList.GetArrayIndex(psWindowName)
							If lnIndex < 0
								Return hWndNULL
							Else
								Return pWndInfoList.iWndInfoStructure[lnIndex].ihWndWindowHandle
					Function: GetBaseWindowOfChain
						Description: Lookups the base window of a window chain.
						Returns
							Boolean:
						Parameters
							Number: pnChainNumber
							Receive String: psWindowName
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Number: lnTeller
							Number: lnWndInfoListUpperBound
						Actions
							Set lnWndInfoListUpperBound  = pWndInfoList.GetUpperBound()
							While lnTeller <= lnWndInfoListUpperBound
								If pWndInfoList.iWndInfoStructure[lnTeller].inChainNumber = pnChainNumber
									If pWndInfoList.iWndInfoStructure[lnTeller].ibBaseWindowOfChain
										Set psWindowName =  pWndInfoList.iWndInfoStructure[lnTeller].isWindowName
										Return TRUE
								Set lnTeller = lnTeller + 1
							Return FALSE
					Function: WndInfoSetWindowHandle
						Description: Stores the window handle in the window info list.
						Returns
							Boolean:
						Parameters
							String: psWindowName
							Window Handle: phWndWindowHandle
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Number: lnIndex
						Actions
							Set lnIndex = pWndInfoList.GetArrayIndex(psWindowName)
							If lnIndex < 0
								Return FALSE
							Else
								Set pWndInfoList.iWndInfoStructure[lnIndex].ihWndWindowHandle = phWndWindowHandle
					Function: WndParmArrSetParm
						Description: Stores the window parameters in the window info list.
						Returns
							Boolean:
						Parameters
							String: psWindowName
							Number: pnWndParmArr[*]
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Number: lnIndex
							Number: lnTellerWndParm
							Number: lnWndParmArrUpperBound
						Actions
							Set lnIndex = pWndInfoList.GetArrayIndex(psWindowName)
							If lnIndex < 0
								Return FALSE
							Else
								Call SalArrayGetUpperBound( pnWndParmArr, 1, lnWndParmArrUpperBound )
								Set lnTellerWndParm = 0
								While lnTellerWndParm <= lnWndParmArrUpperBound 
									Set pWndInfoList.iWndInfoStructure[lnIndex].inWndParmArr[lnTellerWndParm] = pnWndParmArr[lnTellerWndParm]
									Set lnTellerWndParm = lnTellerWndParm + 1
								Call SalArraySetUpperBound( pWndInfoList.iWndInfoStructure[lnIndex].inWndParmArr, 1, lnWndParmArrUpperBound )
								Return TRUE
					Function: WndParmArrGetParm
						Description:
						Returns
							Number:
						Parameters
							String: psWindowName
							Number: psWndParmNr
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Number: lnUpperBound
							Boolean: lbFound
							Number: lnIndex
							Number: lnWndParmArrUpperBound
						Actions
							Set lnIndex = pWndInfoList.GetArrayIndex(psWindowName)
							If lnIndex < 0
								Return NUMBER_Null
							Else
								Call SalArrayGetUpperBound( pWndInfoList.iWndInfoStructure[lnIndex].inWndParmArr, 1, lnWndParmArrUpperBound )
								If psWndParmNr > lnWndParmArrUpperBound
									Call SalMessageBox( 'Parameter ' || 
											SalNumberToStrX( psWndParmNr, 0 ) || ' cann\'t be used for window ' || psWindowName, 
											'Development error', MB_Ok )
									Return NUMBER_Null
								Set lbFound = TRUE
								Return pWndInfoList.iWndInfoStructure[lnIndex].inWndParmArr[psWndParmNr]
					Function: WndParmArrGetUpperBound
						Description: Returns upperbound of parameter array
						Returns
							Number:
						Parameters
							String: psWindowName
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Number: lnIndex
							Number: lnWndParmArrUpperBound
						Actions
							Set lnIndex = pWndInfoList.GetArrayIndex(psWindowName)
							If lnIndex < 0
								Return NUMBER_Null
							Else
								Call SalArrayGetUpperBound( pWndInfoList.iWndInfoStructure[lnIndex].inWndParmArr, 1, lnWndParmArrUpperBound )
								Return lnWndParmArrUpperBound
					Function: WndParmArrClear
						Description: Clears the window parameters in the window info list.
						Returns
							Boolean:
						Parameters
							String: psWindowName
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Number: lnUpperBound
							Number: lnIndex
							Number: lnWndParmArrUpperBound
						Actions
							Set lnIndex = pWndInfoList.GetArrayIndex(psWindowName)
							If lnIndex < 0
								Return FALSE
							Else
								Call SalArrayGetUpperBound(  pWndInfoList.iWndInfoStructure[lnIndex].inWndParmArr, 1, lnWndParmArrUpperBound )
								Call VisArrayFillNumber(  pWndInfoList.iWndInfoStructure[lnIndex].inWndParmArr, NUMBER_Null, lnWndParmArrUpperBound + 1 )
								Return TRUE
			Functional Class: cExistingWndList
				Description: Functional class is a list of window handles of all created form or table windows within a MDI window.
						The instance variable inListUpperBound indicates the next free place in the list..
				Derived From
				Class Variables
				Instance Variables
					Window Handle: iExistingWndHandle[*]
					Number: inListUpperBound
				Functions
					Function: AddToList
						Description: This function adds the received window handle at the end of the window list. 
								The instance variable inListUpperBound is modified accordingly.
								This function may only be called by instances of functional class cExistingWndMasterList.
						Returns
							Boolean: ! TRUE if successfull; otherwise FALSE
						Parameters
							Window Handle: phWndWindowHandle
							String: psWindowName
						Static Variables
						Local variables
						Actions
							! Add window handle at the end of the list
							Set iExistingWndHandle[ inListUpperBound ] = phWndWindowHandle
							! Adjust inListUpperBound
							Set inListUpperBound = inListUpperBound + 1
							Return TRUE
					Function: DeleteFromList
						Description: This function finds and deletes the window handle in the list using the window name.
								The window handle will be returned in the receive parameter phWndWindowHandle. 
								The instance variable inListUpperBound is modified accordingly.
								This function may only be called by instances of functional class cExistingWndMasterList.
						Returns
							Boolean: ! TRUE if successfull; otherwise FALSE
						Parameters
							String: psWindowName
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Boolean: lbFound
							Number: lnTeller
						Actions
							! Lookup window handle in list
							Set lbFound = FALSE
							While lnTeller < inListUpperBound
								If pWndInfoList.GetWindowHandle(psWindowName, pWndInfoList) = iExistingWndHandle[ lnTeller ]
									Set lbFound = TRUE
								If lbFound
									! If found, delete window handle by shifting the remaining window handles one position to the left
									Set iExistingWndHandle[ lnTeller ] =  iExistingWndHandle[ lnTeller + 1]
								Set lnTeller = lnTeller + 1
							If lbFound
								Set iExistingWndHandle[ inListUpperBound ] = hWndNULL
								! Adjust inListUpperBound
								Set inListUpperBound = inListUpperBound - 1
							Return lbFound
					Function: IsInList
						Description: This function finds the window handle in the list using the window name. 
								The window handle will be returned in the receive parameter phWndWindowHandle. 
						Returns
							Boolean: ! TRUE if found; otherwise FALSE
						Parameters
							String: psWindowName
							Receive Window Handle: phWndWindowHandle
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Boolean: lbFound
							Number: lnTeller
						Actions
							Set lbFound = FALSE
							While lnTeller < inListUpperBound And Not lbFound
								If iExistingWndHandle[ lnTeller ] = pWndInfoList.GetWindowHandle(psWindowName, pWndInfoList) 
									Set lbFound = TRUE
								Set phWndWindowHandle =  iExistingWndHandle[ lnTeller ]
								Set lnTeller = lnTeller + 1
							Return lbFound
					Function: BringWindowsOfListToTop
						Description: Bring all the windows in the list to top.
						Returns
						Parameters
						Static Variables
						Local variables
							Number: lnTeller
						Actions
							While lnTeller < inListUpperBound
								Call ShowWindow( iExistingWndHandle[lnTeller], SW_SHOWNORMAL)
								Call SalBringWindowToTop( iExistingWndHandle[lnTeller] )
								Set lnTeller = lnTeller + 1
					Function: IconizeWindowsOfList
						Description: Iconize all the windows in the list.
						Returns
						Parameters
						Static Variables
						Local variables
							Number: lnTeller
						Actions
							While lnTeller < inListUpperBound
								Call ShowWindow(  iExistingWndHandle[lnTeller], SW_SHOWMINIMIZED )
								Set lnTeller = lnTeller + 1
			Functional Class: cExistingWndMasterList
				Description: Functional class defines cWhcMasterList as a list of lists of type cExistingWndList. 
				Derived From
				Class Variables
				Instance Variables
					FunctionalVar: iExistingWndList[*]
						Class: cExistingWndList
					Number: inMasterListUpperBound
					Number: inNumberOfCreatedWindows
				Functions
					Function: ActivateWindowChain
						Description: This functions brings all the windows of a window chain to top. 
								The other windows will be send to background or mimized (parameter gParamWndInfoIconize).
						Returns
						Parameters
							Number: pnMasterListIndex
						Static Variables
						Local variables
							Number: lnTeller
						Actions
							While lnTeller < inMasterListUpperBound
								If lnTeller != pnMasterListIndex
									If gParamWndInfoIconize
										Call iExistingWndList[lnTeller].IconizeWindowsOfList()
								Set lnTeller = lnTeller + 1
							Call iExistingWndList[pnMasterListIndex].BringWindowsOfListToTop()
					Function: OpenWindow
						Description: If the window to be created isn't a part of a window chain (this means chain 0), it will be created.
								If the window is a part of a window chain, then the window chain will be activated. 
								This means that if there are some windows of the chain created, these windows will be brought to 
								top; otherwise the base window of the chain will be created. 
						Returns
							Window Handle:
						Parameters
							String: psWindowName
							Window Handle: phWndMDI
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
							Number: pnWindowParmArr[*]
						Static Variables
						Local variables
							Boolean: lbFound
							Number: lnChainNumber
							String: lsBaseWindowName
							Window Handle: lhWndWindowHandle
						Actions
							Set lbFound = FALSE
							If pWndInfoList.GetChainNumber(psWindowName, lnChainNumber, pWndInfoList)
								If lnChainNumber > 0
									! Scherm maakt deel uit van een ketting (verschillend van ketting 0)
									If iExistingWndList[lnChainNumber].inListUpperBound > 0
										! Er zijn schermen van de ketting open
										Call ActivateWindowChain( lnChainNumber ) 
										If iExistingWndList[lnChainNumber].IsInList(psWindowName, lhWndWindowHandle, pWndInfoList)
											Call pWndInfoList.WndParmArrSetParm(psWindowName, pnWindowParmArr, pWndInfoList)
										Else
											Call pWndInfoList.WndParmArrSetParm(psWindowName, pnWindowParmArr, pWndInfoList)
											Set lhWndWindowHandle = SalCreateWindow( psWindowName, phWndMDI )
											If lhWndWindowHandle
												Call pWndInfoList.WndInfoSetWindowHandle(psWindowName, lhWndWindowHandle, pWndInfoList)
												! NU HIER
									Else
										! Er zijn geen schermen van de ketting open: create van base window
										Call pWndInfoList.GetBaseWindowOfChain(lnChainNumber, lsBaseWindowName, pWndInfoList)
										Call pWndInfoList.WndParmArrSetParm(psWindowName, pnWindowParmArr, pWndInfoList)
										Set lhWndWindowHandle = SalCreateWindow( lsBaseWindowName, phWndMDI )
										If lhWndWindowHandle
											Call pWndInfoList.WndInfoSetWindowHandle(lsBaseWindowName, lhWndWindowHandle, pWndInfoList)
								Else
									! Scherm maakt geen deel uit van een ketting (dus ketting 0)
									If iExistingWndList[lnChainNumber].IsInList(psWindowName, lhWndWindowHandle, pWndInfoList)
										Call ShowWindow(lhWndWindowHandle, SW_SHOWNORMAL)
										Call SalBringWindowToTop( lhWndWindowHandle )
									Else
										Call pWndInfoList.WndParmArrSetParm(psWindowName, pnWindowParmArr, pWndInfoList)
										Set lhWndWindowHandle = SalCreateWindow( psWindowName, phWndMDI )
										If lhWndWindowHandle
											Call pWndInfoList.WndInfoSetWindowHandle(psWindowName, lhWndWindowHandle, pWndInfoList)
								Return lhWndWindowHandle
							Else
								Call SalMessageBox( 'Window not specified in MDI function WndInfoInitialise', 'Development Error', MB_Ok )
								Return hWndNULL
					Function: OpenWindowLink
						Description: If the window to be created isn't a part of a window chain (this means chain 0), it will be created.
								If the window is a part of a window chain, then the window chain will be activated. 
								This means that if there are some windows of the chain created, these windows will be brought to 
								top; otherwise the base window of the chain will be created. 
						Returns
						Parameters
							String: psWindowName
							Window Handle: phWndMDI
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
							Number: pnWindowParmArr[*]
							String: psWindowToPen
						Static Variables
						Local variables
							Boolean: lbFound
							Number: lnChainNumber
							String: lsBaseWindowName
							Window Handle: lhWndWindowHandle
						Actions
							Set lbFound = FALSE
							If pWndInfoList.GetChainNumber(psWindowName, lnChainNumber, pWndInfoList)
								If lnChainNumber > 0
									! Scherm maakt deel uit van een ketting (verschillend van ketting 0)
									If iExistingWndList[lnChainNumber].inListUpperBound > 0
										! Er zijn schermen van de ketting open
										Call ActivateWindowChain( lnChainNumber ) 
										If iExistingWndList[lnChainNumber].IsInList(psWindowName, lhWndWindowHandle, pWndInfoList)
											Call pWndInfoList.WndParmArrSetParm(psWindowName, pnWindowParmArr, pWndInfoList)
										Else
											Call pWndInfoList.WndParmArrSetParm(psWindowName, pnWindowParmArr, pWndInfoList)
											Set lhWndWindowHandle = SalCreateWindow( psWindowToPen, phWndMDI )
											If lhWndWindowHandle
												Call pWndInfoList.WndInfoSetWindowHandle(psWindowName, lhWndWindowHandle, pWndInfoList)
												! NU HIER
									Else
										! Er zijn geen schermen van de ketting open: create van base window
										Call pWndInfoList.GetBaseWindowOfChain(lnChainNumber, lsBaseWindowName, pWndInfoList)
										Call pWndInfoList.WndParmArrSetParm(psWindowToPen, pnWindowParmArr, pWndInfoList)
										Set lhWndWindowHandle = SalCreateWindow( psWindowToPen, phWndMDI )
										If lhWndWindowHandle
											Call pWndInfoList.WndInfoSetWindowHandle(lsBaseWindowName, lhWndWindowHandle, pWndInfoList)
								Else
									! Scherm maakt geen deel uit van een ketting (dus ketting 0)
									If iExistingWndList[lnChainNumber].IsInList(psWindowName, lhWndWindowHandle, pWndInfoList)
										Call ShowWindow(lhWndWindowHandle, SW_SHOWNORMAL)
										Call SalBringWindowToTop( lhWndWindowHandle )
									Else
										Call pWndInfoList.WndParmArrSetParm(psWindowName, pnWindowParmArr, pWndInfoList)
										Set lhWndWindowHandle = SalCreateWindow( psWindowToPen, phWndMDI )
										If lhWndWindowHandle
											Call pWndInfoList.WndInfoSetWindowHandle(psWindowName, lhWndWindowHandle, pWndInfoList)
							Else
								Call SalMessageBox( 'Window not specified in MDI function WndInfoInitialise', 'Development Error', MB_Ok )
					Function: IsWindowCreated
						Description:
						Returns
							Boolean:
						Parameters
							String: psWindowName
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Boolean: lbFound
							Number: lnChainNumber
							String: lsBaseWindowName
							Window Handle: lhWndWindowHandle
						Actions
							Set lbFound = FALSE
							If pWndInfoList.GetChainNumber(psWindowName, lnChainNumber, pWndInfoList)
								If lnChainNumber > 0
									! Scherm maakt deel uit van een ketting (verschillend van ketting 0)
									If iExistingWndList[lnChainNumber].inListUpperBound > 0
										! Er zijn schermen van de ketting open
										If iExistingWndList[lnChainNumber].IsInList(psWindowName, lhWndWindowHandle, pWndInfoList)
											Return TRUE
								Else
									! Scherm maakt geen deel uit van een ketting (dus ketting 0)
									If iExistingWndList[lnChainNumber].IsInList(psWindowName, lhWndWindowHandle, pWndInfoList)
										Return TRUE
							Return FALSE
					Function: IsAnyWindowCreated
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return inNumberOfCreatedWindows > 0
					Function: RegisterWindow
						Description: This function adds a window to the list of created windows. This function has to be called by each 
								MDI child window in the SAM_CreateComplete event.
						Returns
						Parameters
							Window Handle: phWndWindowHandle
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							Number: lnMasterListIndex
							String: lsWindowName
						Actions
							Call SalGetItemName( phWndWindowHandle, lsWindowName )
							Call pWndInfoList.GetChainNumber(lsWindowName, lnMasterListIndex, pWndInfoList)
							Call iExistingWndList[lnMasterListIndex].AddToList(phWndWindowHandle, lsWindowName)
							If inMasterListUpperBound < lnMasterListIndex + 1
								Set inMasterListUpperBound = lnMasterListIndex + 1
							Set inNumberOfCreatedWindows = inNumberOfCreatedWindows + 1
							Call ActivateWindowChain(lnMasterListIndex)
					Function: UnRegisterWindow
						Description: This function deletes a window to the list of created windows. 
								This function has to be called by each top level window in the SAM_Close event.
						Returns
						Parameters
							Window Handle: phWndWindowHandle
							FunctionalVar: pWndInfoList
								Class: cWndInfoList
						Static Variables
						Local variables
							String: lsWindowName
							Number: lnMasterListIndex
						Actions
							Call SalGetItemName( phWndWindowHandle, lsWindowName )
							Call pWndInfoList.GetChainNumber(lsWindowName, lnMasterListIndex, pWndInfoList)
							Call iExistingWndList[lnMasterListIndex].DeleteFromList(lsWindowName, pWndInfoList)
							Set inNumberOfCreatedWindows = inNumberOfCreatedWindows - 1
			General Window Class: cgenWndInfo
				Description:
				Derived From
				Class Variables
				Instance Variables
					String: isWindowName
					Number: inWindowChain
					Window Handle: ihWndMDI
				Functions
				Message Actions
					On SAM_CreateComplete
						Call SalGetItemName( hWndForm, isWindowName )
						Set ihWndMDI = SalParentWindow( hWndForm )
						Call SalSendMsg( ihWndMDI, PAM_WndInfo, 1, SalWindowHandleToNumber( hWndForm ) )
					On SAM_Close
						Call SalGetItemName( hWndForm, isWindowName )
						Set ihWndMDI = SalParentWindow( hWndForm )
						Call SalSendMsg( ihWndMDI, PAM_WndInfo, 0, SalWindowHandleToNumber( hWndForm ) )
						Return 1
					! LS le 24/04/2006
					! On WM_SIZE
						! If hWndMDI != hWndNULL
						Call SalMDIArrangeIcons( hWndMDI )
			! PUBLIC
			MDI Window Class: cmdiWndInfoMDI
				Title:
				Display Settings
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Yes
						Height: Class Default
						Height Editable? Yes
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
				Icon File:
				Accessories Enabled? Class Default
				Visible? Yes
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Class Variables
				Instance Variables
					FunctionalVar: iExistingWndMasterList
						Class: cExistingWndMasterList
					FunctionalVar: iWndInfoListOfMdi
						Class: cWndInfoList
				Functions
					Function: WndInfoInitialise
						Description: Late Bound Function: must be overwritten by a function in the instance
						Returns
						Parameters
						Static Variables
						Local variables
							String: lsMdiWindowName
						Actions
							Call SalGetItemName( hWndMDI, lsMdiWindowName )
							Call SalMessageBox(  'Window Info List is not initialised for the mdi window ' || lsMdiWindowName ||
									'
									Redefine late bound function in cmdiWndInfoMDI instance', 
									'Development Error', MB_Ok | MB_IconStop )
					Function: PalCreateWindow
						Description:
						Returns
							Window Handle:
						Parameters
							String: psWindowName
							Window Handle: phWndMDI
							Number: pnWndParmArr[*]
						Static Variables
						Local variables
							Window Handle: hWnd
						Actions
							Call VisWaitCursor( TRUE )
							Call LockWindowUpdate( hWndMDI)
							Set hWnd = iExistingWndMasterList.OpenWindow(psWindowName, phWndMDI, iWndInfoListOfMdi, pnWndParmArr)
							Call LockWindowUpdate( hWndNULL)
							Call VisWaitCursor( FALSE )
							Return hWnd
					Function: PalCreateWindowLink
						Description:
						Returns
						Parameters
							String: psWindowName
							Window Handle: phWndMDI
							Number: pnWndParmArr[*]
							String: psWindowToOpen
						Static Variables
						Local variables
						Actions
							Call VisWaitCursor( TRUE )
							Call LockWindowUpdate( hWndMDI)
							Call iExistingWndMasterList.OpenWindowLink(psWindowName, phWndMDI, iWndInfoListOfMdi, pnWndParmArr, psWindowToOpen)
							Call LockWindowUpdate( hWndNULL)
							Call VisWaitCursor( FALSE )
					Function: PalIsWindowCreated
						Description:
						Returns
							Boolean:
						Parameters
							String: psWindowName
						Static Variables
						Local variables
						Actions
							Return iExistingWndMasterList.IsWindowCreated(psWindowName, iWndInfoListOfMdi)
					Function: PalIsAnyWindowCreated
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return iExistingWndMasterList.IsAnyWindowCreated()
					Function: PalGetWndParm
						Description:
						Returns
							Number:
						Parameters
							String: psWndName
							Number: psWndParmNr
						Static Variables
						Local variables
						Actions
							Return iWndInfoListOfMdi.WndParmArrGetParm( psWndName, psWndParmNr, iWndInfoListOfMdi )
					Function: PalGetUpperBoundWndParm
						Description:
						Returns
							Number:
						Parameters
							String: psWndName
						Static Variables
						Local variables
						Actions
							Return iWndInfoListOfMdi.WndParmArrGetUpperBound( psWndName, iWndInfoListOfMdi )
					Function: PalSetNoWndParm
						Description:
						Returns
						Parameters
							String: psWndName
						Static Variables
						Local variables
						Actions
							Call iWndInfoListOfMdi.WndParmArrClear( psWndName, iWndInfoListOfMdi )
					Function: PalSetWndParm
						Description:
						Returns
						Parameters
							String: psWndName
							Number: pnWndParmArr[*]
						Static Variables
						Local variables
						Actions
							Call iWndInfoListOfMdi.WndParmArrSetParm( psWndName, pnWndParmArr , iWndInfoListOfMdi)
				Message Actions
					On WM_SIZE
						Call SalMDIArrangeIcons( hWndMDI )
					On SAM_CreateComplete
						Call ..WndInfoInitialise()
					On PAM_WndInfo
						If wParam = 1
							Call iExistingWndMasterList.RegisterWindow(SalNumberToWindowHandle( lParam ), iWndInfoListOfMdi )
						Else
							Call iExistingWndMasterList.UnRegisterWindow(SalNumberToWindowHandle( lParam ), iWndInfoListOfMdi )
			Form Window Class: cfrmWndInfoForm
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Form Size
						Width:  Class Default
						Height: Class Default
						Number of Pages: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description: Form will be registered in the Window Handle List
				Derived From
					Class: cgenWndInfo
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
				Instance Variables
				Functions
				Message Actions
			Dialog Box Class: clsDlgWndInfoForm
				Title:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Type of Dialog: Modal
					Allow Dock to Parent? Class Default
					Docking Orientation: Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Absolute Screen Location? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Resizable? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Derived From
					Class: cgenWndInfo
				Class Variables
				Instance Variables
				Functions
				Message Actions
			Table Window Class: ctblWndInfoTable
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: cgenWndInfo
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
				Instance Variables
				Functions
				Message Actions
			! ----------------------------------------------------------------------------------------------------------------------------------------
			!
			! Classes in DYNSQL.APL ---------------------------------------------------------------------------------------------------------
			! PRIVATE
			Functional Class: cDynamicSQL
				Description: Deze class bevat alle informatie ivm met de sql-statements voor een form window, 
						child table window of table window.
				Derived From
				Class Variables
				Instance Variables
					! Sql Handles
					Sql Handle: ihSqlSelect
					Sql Handle: ihSqlModify
					!
					! Onderdelen van sql statements
					! Delen van select statements
					Long String: isSqlSelectColumns
					Long String: isSqlSelectTables
					Long String: isSqlSelectWhere
					Long String: isSqlSelectOrderBy
					Long String: isSqlSelectInto
					Long String: isSqlSelectWhereEqual
					! Delen van update statement
					Long String: isSqlUpdateTable
					Long String: isSqlUpdateSet
					Long String: isSqlUpdateWhereEqual
					! Delen van insert statement
					Long String: isSqlInsertTable
					Long String: isSqlInsertColumns
					Long String: isSqlInsertValues
					! Delen van delete statement
					Long String: isSqlDeleteTable
					Long String: isSqlDeleteWhereEqual
					!
					! Volledige sql statements
					Long String: isSelectStmt
					Long String: isSelectEqualStmt
					Long String: isUpdateStmt
					Long String: isInsertStmt
					Long String: isDeleteStmt
					!
					! Aantal records in result set (wordt pas ingevuld na fetch van laatste record )
					Number: inResultSetCount
					!
					! Named transaction
					String: isNamedTransaction
					!
					!
					String: __sOldIsoLev
				Functions
					!
					! PUBLIC
					!
					! /#### LS : 13/04/2007
					Function: SetReadOnly
						Description:
						Returns
						Parameters
							Boolean: pbOk
						Static Variables
						Local variables
						Actions
							If pbOk 
								If __sOldIsoLev = ''
									Set __sOldIsoLev = PalgetIsolationLevel( ihSqlSelect )
								Call SqlSetIsolationLevel( ihSqlSelect, 'RO' )
							Else
								! Call SqlSetIsolationLevel( ihSqlSelect, 'RL' )
								Call SqlSetIsolationLevel( ihSqlSelect, __sOldIsoLev )
								Set __sOldIsoLev = ''
					! \#### LS : 13/04/2007
					Function: AutoAttach
						Description: Lier un object (data field, combo box, column, ...) à une colonne dans la base de données. 
								Ajouter cet objet et la colonne dans les sql-statements correspondants.
						Returns
							Boolean:
						Parameters
							String: psControlName
							String: psTableName
							String: psColumnName
							Number: pnFlags
						Static Variables
						Local variables
						Actions
							If pnFlags & DS_Select
								If Not AddColumnToSqlSelectColumns(psTableName, psColumnName)
									Return FALSE
								If Not AddColumnToSqlSelectInto(psControlName)
									Return FALSE
							If pnFlags & DS_Update
								If Not AddColumnToSqlUpdateSet( psTableName, psColumnName, psControlName)
									Return FALSE
							If pnFlags & DS_Insert
								If Not AddColumnToSqlInsertColumns( psColumnName)
									Return FALSE
								If Not AddColumnToSqlInsertValues( psControlName)
									Return FALSE
							If pnFlags & DS_SelectWhereEqual
								If Not AddColumnToSqlSelectWhereEqual(psTableName, psColumnName, psControlName)
									Return FALSE
							If pnFlags & DS_UpdateWhereEqual
								If Not AddColumnToSqlUpdateWhereEqual(psTableName, psColumnName, psControlName)
									Return FALSE
							If pnFlags & DS_DeleteWhereEqual
								If Not AddColumnToSqlDeleteWhereEqual(psTableName, psColumnName, psControlName)
									Return FALSE
							Return TRUE
					!
					Function: SetSqlSelUpdInsDelTable
						Description:
						Returns
						Parameters
							String: psSqlSelUpdInsDelTables
						Static Variables
						Local variables
						Actions
							Call SetSqlSelectTables( psSqlSelUpdInsDelTables )
							Call SetSqlInsertTable( psSqlSelUpdInsDelTables )
							Call SetSqlUpdateTable( psSqlSelUpdInsDelTables )
							Call SetSqlDeleteTable( psSqlSelUpdInsDelTables )
					!
					Function: SetSqlSelectColumns
						Description: Attribution dune valeur: isSqlSelectColumns
						Returns
						Parameters
							String: psSqlSelectColumns
						Static Variables
						Local variables
						Actions
							Set isSqlSelectColumns = psSqlSelectColumns
					Function: SetSqlSelectWhere
						Description: Attribution dune valeur: isSqlSelectWhere
						Returns
						Parameters
							String: psSqlSelectWhere
						Static Variables
						Local variables
						Actions
							Set isSqlSelectWhere = psSqlSelectWhere
					Function: SetSqlSelectTables
						Description: Attribution dune valeur: isSqlSelectTables
						Returns
						Parameters
							String: psSqlSelectTables
						Static Variables
						Local variables
						Actions
							Set isSqlSelectTables = psSqlSelectTables
					Function: SetSqlSelectOrderBy
						Description: Attribution dune valeur: isSqlSelectOrderBy
						Returns
						Parameters
							String: psSqlSelectOrderBy
						Static Variables
						Local variables
						Actions
							Set isSqlSelectOrderBy = psSqlSelectOrderBy
					Function: SetSqlSelectInto
						Description: Attribution dune valeur: isSqlSelectInto
						Returns
						Parameters
							String: psSqlSelectInto
						Static Variables
						Local variables
						Actions
							Set isSqlSelectInto = psSqlSelectInto
					Function: SetSqlSelectWhereEqual
						Description: Attribution dune valeur: isSqlSelectWhereEqual
						Returns
						Parameters
							String: psSqlSelectWhereEqual
						Static Variables
						Local variables
						Actions
							Set isSqlSelectWhereEqual = psSqlSelectWhereEqual
					! /#### LS : 22/002/2007
					Function: GetSqlSelectWhere
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isSqlSelectWhere
					Function: GetSqlSelectColumns
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isSqlSelectColumns
					Function: GetSqlSelectOrderBy
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isSqlSelectOrderBy
					Function: GetSqlSelectTables
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isSqlSelectTables
					Function: GetSqlSelectWhereEqual
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isSqlSelectWhereEqual
					! \#### LS : 22/002/2007
					!
					Function: SetSqlUpdateTable
						Description: Attribution dune valeur: isSqlUpdateTable
						Returns
						Parameters
							String: psSqlUpdateTable
						Static Variables
						Local variables
						Actions
							Set isSqlUpdateTable = psSqlUpdateTable
					Function: SetSqlUpdateSet
						Description: Attribution dune valeur: isSqlUpdateSet
						Returns
						Parameters
							String: psSqlUpdateSet
						Static Variables
						Local variables
						Actions
							Set isSqlUpdateSet = psSqlUpdateSet
					Function: SetSqlUpdateWhereEqual
						Description: Attribution dune valeur: isSqlUpdateWhereEqual
						Returns
						Parameters
							String: psSqlUpdateWhereEqual
						Static Variables
						Local variables
						Actions
							Set isSqlUpdateWhereEqual = psSqlUpdateWhereEqual
					!
					Function: SetSqlInsertTable
						Description: Attribution dune valeur: isSqlInsertTable
						Returns
						Parameters
							String: psSqlInsertTable
						Static Variables
						Local variables
						Actions
							Set isSqlInsertTable = psSqlInsertTable
					Function: SetSqlInsertColumns
						Description: Attribution dune valeur: isSqlInsertColumns
						Returns
						Parameters
							String: psSqlInsertColumns
						Static Variables
						Local variables
						Actions
							Set isSqlInsertColumns = psSqlInsertColumns
					Function: SetSqlInsertValues
						Description: Attribution dune valeur: isSqlInsertValues
						Returns
						Parameters
							String: psSqlInsertValues
						Static Variables
						Local variables
						Actions
							Set isSqlInsertValues = psSqlInsertValues
					!
					Function: SetSqlDeleteTable
						Description: Attribution dune valeur: isSqlDeleteTable
						Returns
						Parameters
							String: psSqlDeleteTable
						Static Variables
						Local variables
						Actions
							Set isSqlDeleteTable = psSqlDeleteTable
					Function: SetSqlDeleteWhereEqual
						Description: Attribution dune valeur: isSqlDeleteWhereEqual
						Returns
						Parameters
							String: psSqlDeleteWhereEqual
						Static Variables
						Local variables
						Actions
							Set isSqlDeleteWhereEqual = psSqlDeleteWhereEqual
					!
					Function: DoInsertStmt ! NOG NIET VOLLEDIG XXX
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lntmp
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = BuildInsertStmt(  )
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, isInsertStmt , lbSuccess)
							If lbSuccess
								! When SqlError
									Set gnError = SqlError( ihSqlModify )
									Call SqlGetErrorText( gnError, gsErrorMessage )
									Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || isInsertStmt  )
									! Return TRUE
									Return FALSE
								Set gsErrorSqlStatement = isInsertStmt
								Set lbSuccess = SqlPrepareAndExecute( ihSqlModify, isInsertStmt )
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoDeleteStmt ! NOG NIET VOLLEDIG XXX
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnRecordNr
						Static Variables
						Local variables
							! Number: lntmp
							Boolean: lbSuccess
							Number: lnFetchUpdDel
							Number: lnRecordNr
						Actions
							When SqlError
								If SqlError( ihSqlModify ) = ERROR_InvalidRowID
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
									Call SqlFetchRow( ihSqlSelect, pnRecordNr, lnFetchUpdDel )
									If lnFetchUpdDel = FETCH_Update
										Call SalMessageBox( 'Record is updated by another user', 'Warning', MB_Ok )
									Else If lnFetchUpdDel = FETCH_Delete
										Call SalMessageBox( 'Record is deleted by another user', 'Warning', MB_Ok )
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
								Return FALSE
							Set lnRecordNr = pnRecordNr
							Call VisWaitCursor( TRUE )
							Set lbSuccess = BuildDeleteStmt(  )
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, isDeleteStmt , lbSuccess)
							If lbSuccess
								! When SqlError
									Set gnError = SqlError( ihSqlModify )
									Call SqlGetErrorText( gnError, gsErrorMessage )
									Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || isDeleteStmt  )
									! Return TRUE
									Return FALSE
								Set gsErrorSqlStatement = isDeleteStmt
								Set lbSuccess = SqlPrepareAndExecute( ihSqlModify, isDeleteStmt )
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					!
					!
					Function: DoRefreshRows
						Description:
						Returns
							Number:
						Parameters
							Sql Handle: phSql
							Long String: psWhere
						Static Variables
						Local variables
							Long String: lsReq
							Number: lnReturn
							String: lsTest
						Actions
							Set lnReturn = -1
							If ( psWhere = '' ) or ( psWhere = STRING_Null )
								Call ..DoRefresh( )
								Set lnReturn = 0
							Else
								Set lsReq =	SELECT	|| isSqlSelectColumns ||
													FROM	|| isSqlSelectTables
								Set lsReq = lsReq	||
													WHERE	|| psWhere
								Set lsReq = lsReq	||
													INTO	|| isSqlSelectInto
								If PalSqlTrans ( phSql, lsReq ) = TRANS_Ok
									Call SqlFetchNext ( phSql, lnReturn )
									!
									! Je vais envoyer un message SAM_Click au tableau plutôt que l'appel à la fonction LBFOnRowGetFocus
									! Call ..LBFOnRowGetFocus( )
									Call SalPostMsg( hWndItem, SAM_Click, 0, SalTblQueryContext( hWndItem ) )
									! Call SalGetItemName( hWndItem, lsTest )
									! Call SalMessageBox( lsTest, '', MB_Ok )
							Return lnReturn
					!
					! PRIVATE
					!
					Function: DoRefresh
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalMessageBox( "La fonction DoRefresh doit être redéfinie dans les tables dérivées", 'Erreur', MB_Ok )
					! Function: LBFOnRowGetFocus
						Description: LBF
						Returns 
						Parameters 
						Static Variables 
						Local variables 
						Actions 
							Call SalMessageBox( "La fonction LBFOnRowGetFocus doit être redéfinie dans les tables dérivées", 'Erreur', MB_Ok )
					Function: ConnectSqlHandles
						Description: Connecter ihSqlSelect et ihSqlModify avec named transaction isNamedTransaction. 
								Isolation level: RL
								DBP_Preserve=TRUE: cursor-context preservation
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							If isNamedTransaction = ''
								Call SqlConnect( ihSqlSelect )
								Call SqlConnect( ihSqlModify )
							Else
								Call SqlConnect( ihSqlSelect )
								Call SqlConnect( ihSqlModify )
								! HIER NORMAAL VOLGENDE REGEL VERWIJDEREN !!!
							Call SqlSetIsolationLevel( ihSqlSelect, 'RL' )
							Call SqlSetIsolationLevel( ihSqlModify, 'RL' )
							If SalStrLength( gsIdPrgm ) > 0
								Call SqlSetParameterAll( ihSqlSelect, 3024, 0, gsIdPrgm, FALSE )
							Call SqlSetParameter( ihSqlSelect, DBP_PRESERVE, TRUE, '' )
							Call SqlSetParameter( ihSqlSelect, DBP_AUTOCOMMIT, FALSE, '' )
							Call SqlSetParameter( ihSqlModify, DBP_PRESERVE, TRUE, '' )
							Call SqlSetParameter( ihSqlModify, DBP_AUTOCOMMIT, FALSE, '' )
					Function: DisconnectSqlHandles
						Description: Terminer la connection de ihSqlSelect et ihSqlModify
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							! /##### LS : 28/01/2004
							If ihSqlSelect != hWndNULL
								Call SqlDisconnect( ihSqlSelect )
							If ihSqlModify != hWndNULL
								Call SqlDisconnect( ihSqlModify )
							! \##### LS : 28/01/2004
					!
					Function: AddColumnToSqlSelectColumns
						Description:
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psColumnName
						Static Variables
						Local variables
							String: lsSel
						Actions
							If Not SalStrLength( psColumnName ) 
								Return FALSE
							If SalStrLength( psTableName ) 
								Set lsSel = psTableName || DOT || psColumnName
							Else
								Set lsSel = psColumnName
							If SalStrLength( isSqlSelectColumns )  
								Set lsSel = COMMA || lsSel
							Set isSqlSelectColumns = isSqlSelectColumns || lsSel
							Return TRUE
					Function: AddColumnToSqlSelectInto
						Description:
						Returns
							Boolean:
						Parameters
							String: psControlName
						Static Variables
						Local variables
							String: lsSel
						Actions
							If Not SalStrLength( psControlName ) 
								Return FALSE
							Set lsSel = COLON || psControlName
							If SalStrLength( isSqlSelectInto )  
								Set lsSel = COMMA || lsSel
							Set isSqlSelectInto = isSqlSelectInto || lsSel
							Return TRUE
					Function: AddColumnToSqlSelectWhereEqual
						Description:
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psColumnName
							String: psControlName
						Static Variables
						Local variables
							String: lsSel
						Actions
							If Not SalStrLength( psColumnName ) 
								Return FALSE
							If Not SalStrLength( psControlName ) 
								Return FALSE
							If SalStrLength( psTableName ) 
								Set lsSel = psTableName || DOT || psColumnName
							Else
								Set lsSel = psColumnName
							Set lsSel = lsSel || EQUAL || COLON || psControlName
							If SalStrLength( isSqlSelectWhereEqual )  
								Set lsSel = S_AND || lsSel
							Set isSqlSelectWhereEqual = isSqlSelectWhereEqual || lsSel
							Return TRUE
					Function: AddColumnToSqlUpdateSet
						Description:
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psColumnName
							String: psControlName
						Static Variables
						Local variables
							String: lsSel
						Actions
							If Not SalStrLength( psColumnName ) 
								Return FALSE
							If Not SalStrLength( psControlName ) 
								Return FALSE
							If SalStrLength( psTableName ) 
								Set lsSel = psTableName || DOT || psColumnName
							Else
								Set lsSel = psColumnName
							Set lsSel = lsSel || EQUAL || COLON || psControlName
							If SalStrLength( isSqlUpdateSet )  
								Set lsSel = COMMA || lsSel
							Set isSqlUpdateSet = isSqlUpdateSet || lsSel
							Return TRUE
					Function: AddColumnToSqlUpdateWhereEqual
						Description:
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psColumnName
							String: psControlName
						Static Variables
						Local variables
							String: lsSel
						Actions
							If Not SalStrLength( psColumnName ) 
								Return FALSE
							If Not SalStrLength( psControlName ) 
								Return FALSE
							If SalStrLength( psTableName ) 
								Set lsSel = psTableName || DOT || psColumnName
							Else
								Set lsSel = psColumnName
							Set lsSel = lsSel || EQUAL || COLON || psControlName
							If SalStrLength( isSqlUpdateWhereEqual )  
								Set lsSel = S_AND || lsSel
							Set isSqlUpdateWhereEqual = isSqlUpdateWhereEqual || lsSel
							Return TRUE
					Function: AddColumnToSqlInsertColumns
						Description:
						Returns
							Boolean:
						Parameters
							String: psColumnName
						Static Variables
						Local variables
							String: lsSel
						Actions
							If Not SalStrLength( psColumnName ) 
								Return FALSE
							Set lsSel = psColumnName
							If SalStrLength( isSqlInsertColumns)  
								Set lsSel = COMMA || lsSel
							Set isSqlInsertColumns = isSqlInsertColumns || lsSel
							Return TRUE
					Function: AddColumnToSqlInsertValues
						Description:
						Returns
							Boolean:
						Parameters
							String: psControlName
						Static Variables
						Local variables
							String: lsSel
						Actions
							If Not SalStrLength( psControlName ) 
								Return FALSE
							Set lsSel = COLON || psControlName
							If SalStrLength( isSqlInsertValues)  
								Set lsSel = COMMA || lsSel
							Set isSqlInsertValues = isSqlInsertValues || lsSel
							Return TRUE
					Function: AddColumnToSqlDeleteWhereEqual
						Description:
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psColumnName
							String: psControlName
						Static Variables
						Local variables
							String: lsSel
						Actions
							If Not SalStrLength( psColumnName ) 
								Return FALSE
							If Not SalStrLength( psControlName ) 
								Return FALSE
							If SalStrLength( psTableName ) 
								Set lsSel = psTableName || DOT || psColumnName
							Else
								Set lsSel = psColumnName
							Set lsSel = lsSel || EQUAL || COLON || psControlName
							If SalStrLength( isSqlDeleteWhereEqual )  
								Set lsSel = S_AND || lsSel
							Set isSqlDeleteWhereEqual = isSqlDeleteWhereEqual || lsSel
							Return TRUE
					!
					Function: BuildSelectStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Call ..SetSqlSelectColumns(isSqlSelectColumns)
							Call ..SetSqlSelectWhere(isSqlSelectWhere)
							Call ..SetSqlSelectTables(isSqlSelectTables)
							Call ..SetSqlSelectOrderBy(isSqlSelectOrderBy)
							Call ..SetSqlSelectInto(isSqlSelectInto)
							! SELECT statement
							If Not SalStrLength( isSqlSelectColumns ) 
								Return FALSE
							If Not SalStrLength(isSqlSelectTables)
								Return FALSE
							If Not SalStrLength(isSqlSelectInto)
								Return FALSE
							Set isSelectStmt = SELECT || isSqlSelectColumns || FROM || isSqlSelectTables
							If SalStrLength( isSqlSelectWhere )
								Set isSelectStmt = isSelectStmt || WHERE || isSqlSelectWhere
							If SalStrLength( isSqlSelectOrderBy )
								Set isSelectStmt = isSelectStmt || ORDER_BY || isSqlSelectOrderBy
							If SalStrLength( isSqlSelectInto )
								Set isSelectStmt = isSelectStmt || INTO || isSqlSelectInto
							Return TRUE
					Function: BuildSelectEqualStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Call ..SetSqlSelectColumns(isSqlSelectColumns)
							Call ..SetSqlSelectWhereEqual(isSqlSelectWhereEqual)
							Call ..SetSqlSelectTables(isSqlSelectTables)
							Call ..SetSqlSelectOrderBy(isSqlSelectOrderBy)
							Call ..SetSqlSelectInto(isSqlSelectInto)
							! SELECT statement
							If Not SalStrLength( isSqlSelectColumns ) 
								Return FALSE
							If Not SalStrLength(isSqlSelectTables)
								Return FALSE
							If Not SalStrLength(isSqlSelectInto)
								Return FALSE
							Set isSelectEqualStmt = SELECT || isSqlSelectColumns || FROM || isSqlSelectTables
							If SalStrLength( isSqlSelectWhereEqual )
								Set isSelectEqualStmt = isSelectEqualStmt || WHERE || isSqlSelectWhereEqual
							If SalStrLength( isSqlSelectOrderBy )
								Set isSelectEqualStmt = isSelectEqualStmt || ORDER_BY || isSqlSelectOrderBy
							If SalStrLength( isSqlSelectInto )
								Set isSelectEqualStmt = isSelectEqualStmt || INTO || isSqlSelectInto
							Return TRUE
					Function: BuildUpdateStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							! UPDATE statement
							Call ..SetSqlUpdateSet( isSqlUpdateSet )
							Call ..SetSqlUpdateTable( isSqlUpdateTable )
							Call ..SetSqlUpdateWhereEqual( isSqlUpdateWhereEqual )
							If Not SalStrLength(isSqlUpdateSet)
								Return FALSE
							If Not SalStrLength(isSqlSelectTables)
								Return FALSE
							If Not SalStrLength(isSqlUpdateWhereEqual)
								Return FALSE
							Set isUpdateStmt = UPDATE || isSqlUpdateTable || S_SET || isSqlUpdateSet
							Set isUpdateStmt = isUpdateStmt || WHERE || isSqlUpdateWhereEqual
							Return TRUE
					Function: BuildInsertStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Call ..SetSqlInsertColumns( isSqlInsertColumns )
							Call ..SetSqlInsertTable( isSqlInsertTable )
							Call ..SetSqlInsertValues( isSqlInsertValues )
							! INSERT statement
							If Not SalStrLength(isSqlInsertColumns)
								Return FALSE
							If Not SalStrLength(isSqlInsertTable)
								Return FALSE
							If Not SalStrLength(isSqlInsertValues)
								Return FALSE
							Set isInsertStmt = INSERT_INTO || isSqlInsertTable || OPEN_PAR || isSqlInsertColumns || CLOSE_PAR
							Set isInsertStmt = isInsertStmt || VALUES || OPEN_PAR || isSqlInsertValues || CLOSE_PAR
							Return TRUE
					Function: BuildDeleteStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Call ..SetSqlDeleteTable( isSqlDeleteTable )
							Call ..SetSqlDeleteWhereEqual( isSqlDeleteWhereEqual )
							! DELETE statement
							If Not SalStrLength(isSqlDeleteTable)
								Return FALSE
							Set isDeleteStmt = DELETE_FROM || isSqlDeleteTable || WHERE || isSqlDeleteWhereEqual
							Return TRUE
					!
					!
			! PUBLIC
			General Window Class: clsGenDynSql
				Description: Parent voor clsFrmDynSql en clsDlgDynSql
				Derived From
					Class: cDynamicSQL
					! Class: clsAskToLoseChanges
				Class Variables
				Instance Variables
					Number: inRecordNr
					Boolean: ibSuccess
					Number: inReturn
					! SQLMode
					Number: inSqlMode
				Functions
					Function: OkToLoseChangesIfAny
						Description: Vraagt de gebruiker of de aangebrachte wijzingen verloren mogen gaan.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return _OkToLoseChangesIfAny( )
					Function: _OkToLoseChangesIfAny
						Description: Vraagt de gebruiker of de aangebrachte wijzingen verloren mogen gaan.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							If ( inSqlMode = SQLMODE_NewModified Or inSqlMode = SQLMODE_Modified Or inSqlMode = SQLMODE_EmptyModified  ) 
									And
									PalMessageBox( 'De gegevens zijn gewijzigd.
									De wijzigingen negeren ?', 'Les données sont modifiées.
									Annulation des modifications ?', 
									 'Vraag', 'Question', MB_YesNo | MB_IconQuestion | MB_DefButton2  ) = IDNO
								Return FALSE
							Else
								Set inSqlMode = SQLMODE_NotModified
								Return TRUE
					Function: SetSqlModeModified
						Description: Bij het wijzigen van gegevens op het scherm wordt SQL_Mode aangepast.
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Select Case inSqlMode
								Case SQLMODE_Empty
									Set inSqlMode = SQLMODE_EmptyModified
									Break
								Case SQLMODE_EmptyModified
									Break
								Case SQLMODE_Modified
									Break
								Case SQLMODE_New
									Set inSqlMode = SQLMODE_NewModified
									Break
								Case SQLMODE_NewModified
									Break
								Case SQLMODE_NotModified
									Set inSqlMode = SQLMODE_Modified
									Break
					Function: ResetSqlModeModified
						Description: Zet de vlag die het wijzigen van gegevens op het scherm bijhoudt terug op ongewijzigd
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Select Case inSqlMode
								Case SQLMODE_New
									Break
								Case SQLMODE_NewModified
									Set inSqlMode = SQLMODE_New
									Break
								Case SQLMODE_Empty
									Break
								Case SQLMODE_EmptyModified
									Set inSqlMode = SQLMODE_Empty
									Break
								Case SQLMODE_NotModified
									Break
								Case SQLMODE_Modified
									Set inSqlMode = SQLMODE_NotModified
									Break
					Function: IsSqlModeSetModified
						Description: Test of de vlag SqlMode gezet werd.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							If ( inSqlMode = SQLMODE_NewModified Or inSqlMode = SQLMODE_Modified Or inSqlMode = SQLMODE_EmptyModified  ) 
								Return TRUE
							Else
								Return FALSE
					Function: DoSelectStmt
						Description: Opbouwen en uitvoeren van een SELECT statement.
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnReturn
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = BuildSelectStmt(  )
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, isSelectStmt, lbSuccess )
							If lbSuccess
								Set lbSuccess = SqlPrepareAndExecute( ihSqlSelect, isSelectStmt )
								If lbSuccess
									Set gbRollback = FALSE
								! Set ibSuccess = FirstRecord(lnReturn)
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoSelectEqualStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lntmp
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = BuildSelectEqualStmt(  )
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, isSelectEqualStmt, lbSuccess )
							If lbSuccess
								Set lbSuccess = SqlPrepareAndExecute( ihSqlSelect, isSelectEqualStmt )
								If lbSuccess
									Call SqlFetchNext( ihSqlSelect, lntmp )
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoUpdateStmt
						Description: Opbouwen en uitvoeren van een UPDATE statement.
						Returns
							Number:
						Parameters
							Number: pnRecordNr
						Static Variables
						Local variables
							Number: lnFetchUpdDel
							Number: lnReturn
							Number: lnRecordNr
							Boolean: lbSuccess
						Actions
							! When SqlError
								If SqlError( ihSqlModify ) = ERROR_InvalidRowID
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
									Call SqlFetchRow( ihSqlSelect, lnRecordNr, lnFetchUpdDel )
									If lnFetchUpdDel = FETCH_Update
										Call SalMessageBox( 'Record is updated by another user', 'Warning', MB_Ok )
									Else If lnFetchUpdDel = FETCH_Delete
										Call SalMessageBox( 'Record is deleted by another user', 'Warning', MB_Ok )
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
								Return FALSE
							Set lnRecordNr = pnRecordNr
							Call VisWaitCursor( TRUE )
							Set lbSuccess = BuildUpdateStmt(  )
							If lbSuccess
								Set lnReturn = PalSqlTrans( ihSqlModify, isUpdateStmt )
							Call VisWaitCursor( FALSE )
							Return lnReturn
					Function: DoApplyChanges
						Description: Deze functie voert een update-statement of een insert-statement uit
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnFetchUpdDel
							Boolean: lbSuccess
							Number: lnReturn
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess =  TRUE
							Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_ApplyChanges, 0 )
							Call ..LBFInitFieldsBeforeSave()
							Select Case inSqlMode
								Case SQLMODE_Modified
									Set lnReturn =  DoUpdateStmt( inRecordNr  )
									Select Case lnReturn
										Case TRANS_Ok
											Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
											Call SqlFetchRow( ihSqlSelect, inRecordNr, lnFetchUpdDel )
											Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
											Set inSqlMode = SQLMODE_NotModified
											Break
										Case TRANS_Error
											Call VisWaitCursor( FALSE )
											Return FALSE
											Break
										Case TRANS_Retry
											Break
										Case TRANS_Cancel
											Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
											Call SqlFetchRow( ihSqlSelect, inRecordNr, lnFetchUpdDel )
											Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
											Break
									Break
								Case SQLMODE_Empty
									Break
								Case SQLMODE_EmptyModified
									! Een leeg scherm waarin de gebruikers gegevens inbrengt, 
											aanvaarden we niet als nieuwe gegevens !
									Break
								Case SQLMODE_New
									Set lbSuccess =  DoInsertStmt(  )
									If lbSuccess
										If Not gbRollback
											! Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
											! Call SqlFetchNext( ihSqlSelect,  lnFetchUpdDel )
											! Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
											Set inSqlMode = SQLMODE_NotModified
									Break
								Case SQLMODE_NewModified
									Set lbSuccess =  DoInsertStmt(  )
									If lbSuccess
										If Not gbRollback
											! Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
											! Call SqlFetchNext( ihSqlSelect,  lnFetchUpdDel )
											! Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
											Set inSqlMode = SQLMODE_NotModified
									Break
								Case SQLMODE_NotModified
									Break
							Call ..LBFAfterDoApplyChanges()
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoCommitChanges
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, 'COMMIT', TRUE )
							Return SqlCommit( ihSqlModify )
					Function: DoRollbackChanges
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, 'ROLLBACK', TRUE )
							Return SqlPrepareAndExecute( ihSqlModify,  'ROLLBACK' )
					Function: UndoChanges
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: lnFetchUpdDel
						Actions
							Call VisWaitCursor( TRUE )
							If inSqlMode = SQLMODE_Modified
								Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
								Call SqlFetchRow( ihSqlSelect, inRecordNr, lnFetchUpdDel )
								Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
								Set inSqlMode = SQLMODE_NotModified
							Else If inSqlMode = SQLMODE_EmptyModified
								Call SalSendMsg( hWndForm, PAM_Actions, ACT_Clear, 0 )
								Set inSqlMode = SQLMODE_Empty
							Else If inSqlMode = SQLMODE_NewModified
								Call SalSendMsg( hWndForm, PAM_Actions, ACT_Clear, 0 )
								Set inSqlMode = SQLMODE_Empty
							Else If inSqlMode = SQLMODE_New
								Call SalSendMsg( hWndForm, PAM_Actions, ACT_Clear, 0 )
								Set inSqlMode = SQLMODE_Empty
							Call VisWaitCursor( FALSE )
					! Navigating in result set
					Function: FirstRecord
						Description:
						Returns
							Boolean:
						Parameters
							Receive Number: pnReturn
						Static Variables
						Local variables
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = FALSE
							If ..OkToLoseChangesIfAny()
								Set lbSuccess =  SqlFetchRow( ihSqlSelect, 0, pnReturn )
								If Not lbSuccess
									Call SalMessageBeep( 0 )
								Else
									Set inSqlMode = SQLMODE_NotModified
									Set inRecordNr = 0
								Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_FirstRecord, 0 )
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: PreviousRecord
						Description:
						Returns
							Boolean:
						Parameters
							Receive Number: pnReturn
						Static Variables
						Local variables
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = FALSE
							If ..OkToLoseChangesIfAny()
								Set lbSuccess =  SqlFetchPrevious( ihSqlSelect, pnReturn )
								If Not lbSuccess
									Call SalMessageBeep( 0 )
									Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_FirstRecord, 0 )
								Else
									Set inSqlMode = SQLMODE_NotModified
									Set inRecordNr = inRecordNr - 1
									Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_PreviousRecord, 0 )
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: NextRecord
						Description:
						Returns
							Boolean:
						Parameters
							Receive Number: pnReturn
						Static Variables
						Local variables
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = FALSE
							If ..OkToLoseChangesIfAny()
								Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
								Set lbSuccess =  SqlFetchNext( ihSqlSelect, pnReturn )
								Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
								If Not lbSuccess
									Call SalMessageBeep( 0 )
									Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_LastRecord, 0 )
								Else
									Set inSqlMode = SQLMODE_NotModified
									Set inRecordNr = inRecordNr + 1
									Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_NextRecord, 0 )
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: LastRecord
						Description:
						Returns
							Boolean:
						Parameters
							Receive Number: pnReturn
						Static Variables
						Local variables
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = FALSE
							If ..OkToLoseChangesIfAny()
								Call SqlGetResultSetCount( ihSqlSelect, inResultSetCount )
								Set lbSuccess =  SqlFetchRow( ihSqlSelect, inResultSetCount - 1, pnReturn )
								If Not lbSuccess
									Call SalMessageBeep( 0 )
								Else
									Set inSqlMode = SQLMODE_NotModified
									Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_LastRecord, 0 )
								Set inRecordNr = inResultSetCount
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: GoToRecord
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnRecordNr
						Static Variables
						Local variables
							Boolean: lbSuccess
							Number: lnLoopRecords
							Number: lnReturn
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = FALSE
							If ..OkToLoseChangesIfAny()
								If Not SqlFetchRow( ihSqlSelect, pnRecordNr, lnReturn )
									! Call SalMessageBeep( 0 )
								Else
									Set inSqlMode = SQLMODE_NotModified
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					! LBF functions
					Function: LBFInitFieldsBeforeSave
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFBeforeRetrieve
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFAfterRetrieve
						Description: Late Bound Function wordt opgeroepen na het uitvoeren van een retrieve.
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFAfterNewRecord
						Description: Late Bound Function wordt opgeroepen na het invoegen van een nieuw record.
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFBeforeClear
						Description: Late Bound Function wordt opgeroepen na het wissen van het scherm: Geen clear indien return FALSE
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFAfterClear
						Description: Late Bound Function wordt opgeroepen na het wissen van het scherm
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFAfterDoApplyChanges
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					!
				Message Actions
					On SAM_CreateComplete
						Set inSqlMode = SQLMODE_Empty
						Call ConnectSqlHandles(  )
					On PAM_NavigateRecord
						Select Case wParam
							Case NAV_FirstRecord
								If FirstRecord(inReturn)
									Call SalSendMsgToChildren( hWndForm, PAM_NavigateRecord, wParam, lParam )
								Break
							Case NAV_PreviousRecord
								If PreviousRecord(inReturn)
									Call SalSendMsgToChildren( hWndForm, PAM_NavigateRecord, wParam, lParam )
								Break
							Case NAV_NextRecord
								If NextRecord(inReturn)
									Call SalSendMsgToChildren( hWndForm, PAM_NavigateRecord, wParam, lParam )
								Break
							Case NAV_LastRecord
								If LastRecord(inReturn)
									Call SalSendMsgToChildren( hWndForm, PAM_NavigateRecord, wParam, lParam )
								Break
					On SAM_Close
						If ..OkToLoseChangesIfAny()
							Return TRUE
						Else
							Return FALSE
					On SAM_Destroy
						Call DisconnectSqlHandles(  )
					On PAM_Dirty
						Call SetSqlModeModified()
			Form Window Class: clsFrmDynSql
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Form Size
						Width:  Class Default
						Height: Class Default
						Number of Pages: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsGenDynSql
					Class: clsClearableFrm
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On PAM_Actions
						Select Case wParam
							Case ACT_ApplyChanges
								! Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_ApplyChanges, 0 )
								Call DoApplyChanges()
								Break
							Case ACT_Commit
								Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_Commit, 0 )
								Call DoCommitChanges()
								Break
							Case ACT_Rollback
								Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_Rollback, 0 )
								Call DoRollbackChanges()
								Break
							Case ACT_Clear
								If ..OkToLoseChangesIfAny()
									If ..LBFBeforeClear()
										Call Clear()
										Set inSqlMode = SQLMODE_Empty
										Call ..LBFAfterClear()
								Break
							Case ACT_DeleteRecord
								Select Case inSqlMode
									Case SQLMODE_Modified
										Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_DeleteAllDetails, 0 )
										If DoDeleteStmt(inRecordNr )
											If inRecordNr > 0
												Call SalSendMsg( hWndForm, PAM_NavigateRecord, NAV_PreviousRecord, 0 )
											Else
												Call SalSendMsg( hWndForm, PAM_NavigateRecord, NAV_NextRecord, 0 )
										Break
									Case SQLMODE_Empty
										Call SalSendMsg( hWndForm, PAM_Actions, ACT_UndoChanges, 0 )
										Break
									Case SQLMODE_EmptyModified
										Call SalSendMsg( hWndForm, PAM_Actions, ACT_UndoChanges, 0 )
										Break
									Case SQLMODE_New
										Call SalSendMsg( hWndForm, PAM_Actions, ACT_UndoChanges, 0 )
										Break
									Case SQLMODE_NewModified
										Call SalSendMsg( hWndForm, PAM_Actions, ACT_UndoChanges, 0 )
										Break
									Case SQLMODE_NotModified
										Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_DeleteAllDetails, 0 )
										If DoDeleteStmt(inRecordNr )
											! Call SqlCommit( ihSqlModify )
											! Call DoRefresh( )
											If Not gbRollback
												If inRecordNr > 0
													Call GoToRecord( inRecordNr - 1)
												Else
													Call GoToRecord( inRecordNr + 1)
										Break
								Break
							Case ACT_NewRecord
								If ..OkToLoseChangesIfAny()
									Call Clear()
									Set inSqlMode = SQLMODE_New
									Call ..LBFAfterNewRecord()
								Break
							Case ACT_Retrieve
								If ..OkToLoseChangesIfAny()
									Call VisWaitCursor( TRUE )
									If Not ..LBFBeforeRetrieve()
										Return FALSE
									If DoSelectStmt()
										Set inSqlMode = SQLMODE_NotModified
										Call SalSendMsg( hWndForm, PAM_NavigateRecord, NAV_FirstRecord, 0 )
										! Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_Retrieve, 0 )
										Call ..LBFAfterRetrieve()
									Call VisWaitCursor( FALSE )
								Break
							Case ACT_UndoChanges
								Call UndoChanges()
								Break
			Dialog Box Class: clsDlgDynSql
				Title:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Type of Dialog: Modal
					Allow Dock to Parent? Class Default
					Docking Orientation: Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Absolute Screen Location? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Resizable? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
				Next Class Child Key: 3
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Derived From
					Class: clsGenDynSql
					Class: clsClearableDlg
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On PAM_Actions
						Select Case wParam
							Case ACT_ApplyChanges
								! Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_ApplyChanges, 0 )
								Call DoApplyChanges()
								Break
							Case ACT_Commit
								Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_Commit, 0 )
								Call DoCommitChanges()
								Break
							Case ACT_Rollback
								Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_Rollback, 0 )
								Call DoRollbackChanges()
								Break
							Case ACT_Clear
								If ..OkToLoseChangesIfAny()
									If ..LBFBeforeClear()
										Call Clear()
										Set inSqlMode = SQLMODE_Empty
										Call ..LBFAfterClear()
								Break
							Case ACT_DeleteRecord
								Select Case inSqlMode
									Case SQLMODE_Modified
										Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_DeleteAllDetails, 0 )
										If DoDeleteStmt(inRecordNr )
											If inRecordNr > 0
												Call SalSendMsg( hWndForm, PAM_NavigateRecord, NAV_PreviousRecord, 0 )
											Else
												Call SalSendMsg( hWndForm, PAM_NavigateRecord, NAV_NextRecord, 0 )
										Break
									Case SQLMODE_Empty
										Call SalSendMsg( hWndForm, PAM_Actions, ACT_UndoChanges, 0 )
										Break
									Case SQLMODE_EmptyModified
										Call SalSendMsg( hWndForm, PAM_Actions, ACT_UndoChanges, 0 )
										Break
									Case SQLMODE_New
										Call SalSendMsg( hWndForm, PAM_Actions, ACT_UndoChanges, 0 )
										Break
									Case SQLMODE_NewModified
										Call SalSendMsg( hWndForm, PAM_Actions, ACT_UndoChanges, 0 )
										Break
									Case SQLMODE_NotModified
										Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_DeleteAllDetails, 0 )
										If DoDeleteStmt(inRecordNr )
											! Call SqlCommit( ihSqlModify )
											! Call DoRefresh( )
											If Not gbRollback
												If inRecordNr > 0
													Call GoToRecord( inRecordNr - 1)
												Else
													Call GoToRecord( inRecordNr + 1)
										Break
								Break
							Case ACT_NewRecord
								If ..OkToLoseChangesIfAny()
									Call Clear()
									Set inSqlMode = SQLMODE_New
									Call ..LBFAfterNewRecord()
								Break
							Case ACT_Retrieve
								If ..OkToLoseChangesIfAny()
									Call VisWaitCursor( TRUE )
									If Not ..LBFBeforeRetrieve()
										Return FALSE
									If DoSelectStmt()
										Set inSqlMode = SQLMODE_NotModified
										Call SalSendMsg( hWndForm, PAM_NavigateRecord, NAV_FirstRecord, 0 )
										! Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_Retrieve, 0 )
										Call ..LBFAfterRetrieve()
									Call VisWaitCursor( FALSE )
								Break
							Case ACT_UndoChanges
								Call UndoChanges()
								Break
			!
			Child Table Class: clsCTblDynSql
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: cDynamicSQL
					Class: clsClearableCTbl
				Contents
				Class Variables
				Instance Variables
					Number: inRecordNr
					Boolean: ibParamSetAutoSelect
					Number: isArrSortColID[*]
					String: isArrSortColTitle[*]
					String: isArrSortColTableAndColumn[*]
					Number: isArrSortColOrderNr[*]
					Number: inTblFillMode
					Number: inInsertMode
					!
					!
					Window Handle: __whWnd
					!
					! Variable pour la fonction de recherche de chaine de caractères
					Number: __wnRow
				Functions
					Function: OkToLoseChangesIfAny
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return _OkToLoseChangesIfAny( )
					Function: _OkToLoseChangesIfAny
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							If SalTblAnyRows( hWndItem, ROW_Edited | ROW_MarkDeleted | ROW_New, 0) 
								If PalMessageBox( 'De gegevens zijn gewijzigd.
										De wijzigingen negeren ?', 'Les données sont modifiées.
										Annulation des modifications ?', 
										 'Vraag', 'Question', MB_YesNo | MB_IconQuestion | MB_DefButton2  ) = IDNO
									Return FALSE
							Return TRUE
					Function: DoSelectStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lntmp
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = BuildSelectStmt(  )
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, isSelectStmt, lbSuccess )
							Set gsErrorSqlStatement = isSelectStmt
							Set gsErrorSqlStmt = isSelectStmt
							If lbSuccess
								Set lbSuccess = SqlPrepare( ihSqlSelect, isSelectStmt )
								If lbSuccess
									Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, '', inTblFillMode )
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoSelectEqualStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lntmp
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess =  BuildSelectEqualStmt(  )
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, isSelectEqualStmt, lbSuccess )
							Set gsErrorSqlStatement = isSelectEqualStmt
							Set gsErrorSqlStmt = isSelectEqualStmt
							If lbSuccess
								Set lbSuccess = SqlPrepare( ihSqlSelect, isSelectEqualStmt )
								If lbSuccess
									Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, '', inTblFillMode )
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoUpdateStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							! Number: lnFetchUpdDel
							Boolean: lbSuccess
							! Number: lnRecordNr
						Actions
							! When SqlError
								If SqlError( ihSqlModify ) = ERROR_InvalidRowID
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
									Call SqlFetchRow( ihSqlSelect, lnRecordNr, lnFetchUpdDel )
									If lnFetchUpdDel = FETCH_Update
										Call SalMessageBox( 'Record is updated by another user', 'Warning', MB_Ok )
									Else If lnFetchUpdDel = FETCH_Delete
										Call SalMessageBox( 'Record is deleted by another user', 'Warning', MB_Ok )
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
								Return FALSE
							! Set lnRecordNr = pnRecordNr
							Call VisWaitCursor( TRUE )
							Set lbSuccess = BeforeDoUpdates() 
							If lbSuccess
								Set lbSuccess = BuildUpdateStmt(  )
								If gbDynSqlDebug
									Call SalModalDialog( dlgDebugDynSql, hWndForm, isUpdateStmt , lbSuccess)
							If lbSuccess
								! When SqlError
									Set gnError = SqlError( ihSqlModify )
									Call SqlGetErrorText( gnError, gsErrorMessage )
									Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || isUpdateStmt  )
									Return TRUE
								Set lbSuccess = SqlPrepare( ihSqlModify, isUpdateStmt )
								If lbSuccess
									Set lbSuccess = SalTblDoUpdates( hWndItem, ihSqlModify, FALSE )
							Set lbSuccess = AfterDoUpdates() 
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoDeleteStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							! Number: lnFetchUpdDel
							Boolean: lbSuccess
							Number: lnSqlError
							Number: lnErrorPos
							Number: lnStatusCode
							! Number: lnRecordNr
						Actions
							! When SqlError
								If SqlError( ihSqlModify ) = ERROR_InvalidRowID
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
									Call SqlFetchRow( ihSqlSelect, lnRecordNr, lnFetchUpdDel )
									If lnFetchUpdDel = FETCH_Update
										Call SalMessageBox( 'Record is updated by another user', 'Warning', MB_Ok )
									Else If lnFetchUpdDel = FETCH_Delete
										Call SalMessageBox( 'Record is deleted by another user', 'Warning', MB_Ok )
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
								Return FALSE
							! Set lnRecordNr = pnRecordNr
							Call VisWaitCursor( TRUE )
							Set lbSuccess = BeforeDoDeletes()
							If lbSuccess
								Set lbSuccess = BuildDeleteStmt(  )
								If gbDynSqlDebug
									Call SalModalDialog( dlgDebugDynSql, hWndForm, isDeleteStmt , lbSuccess)
							If lbSuccess
								! When SqlError
									Set gnError = SqlError( ihSqlModify )
									Call SqlGetErrorText( gnError, gsErrorMessage )
									Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || isDeleteStmt  )
									Return TRUE
								Set lbSuccess = SqlPrepare( ihSqlModify, isDeleteStmt )
								If lbSuccess
									When SqlError
										Call SqlExtractArgs( wParam, lParam, ghSqlError, lnSqlError, lnErrorPos )
										Select Case lnSqlError
											Case ERROR_TimeOut
												If Not PalLockTimeOut(isDeleteStmt, ERROR_TimeOut)
													Set lnStatusCode = TRANS_Cancel
												Else
													Set lnStatusCode = TRANS_Retry
												Break
											Case ERROR_DeadLock
												If Not PalLockTimeOut(isDeleteStmt, ERROR_DeadLock)
													Set lnStatusCode = TRANS_Cancel
												Else
													Set lnStatusCode = TRANS_Retry
												Break
											Case ERROR_InvalidRowID
												Call SalMessageBox( 'This data cannot be updated. Another user has updated while you were reviewing it.
														Reselect the data to see those changes and make your own.  ', 
														'Database Error', MB_Ok | MB_IconHand)
												Set lnStatusCode = TRANS_Error
												Break
											Case ERROR_CannotDelete_DependentRows
												Call PalMessageBox( 
															'Verwijderen van het record is onmogelijk. 
														Er zijn referenties naar het betreffende record.', 
															'Suppression impossible. 
														Cette valeur est toujours utilisée.', 
														'Opgelet', 'Attention', MB_Ok | MB_IconExclamation )
												Break
											Default
												Call HandleSQLError(  )
												Set lnStatusCode = TRANS_Error
												Break
										Call VisWaitCursor( FALSE )
										Return FALSE
									Set lbSuccess = SalTblDoDeletes( hWndItem, ihSqlModify, ROW_MarkDeleted )
							! ## MARC 21/11/1997>> on ne fait le AfterDoDeletes () que si lbSuccess = TRUE
							If lbSuccess
								Set lbSuccess = AfterDoDeletes()
							! ## MARC 21/11/1997<<
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoInsertStmt
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							! Number: lnFetchUpdDel
							Boolean: lbSuccess
							! Number: lnRecordNr
						Actions
							! When SqlError
								If SqlError( ihSqlModify ) = ERROR_InvalidRowID
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, TRUE, '' )
									Call SqlFetchRow( ihSqlSelect, lnRecordNr, lnFetchUpdDel )
									If lnFetchUpdDel = FETCH_Update
										Call SalMessageBox( 'Record is updated by another user', 'Warning', MB_Ok )
									Else If lnFetchUpdDel = FETCH_Delete
										Call SalMessageBox( 'Record is deleted by another user', 'Warning', MB_Ok )
									Call SqlSetParameter( ihSqlSelect, DBP_FETCHTHROUGH, FALSE, '' )
								Return FALSE
							! Set lnRecordNr = pnRecordNr
							Call VisWaitCursor( TRUE )
							Set lbSuccess = BeforeDoInserts() 
							If lbSuccess
								Set lbSuccess =  BuildInsertStmt(  )
								If gbDynSqlDebug
									Call SalModalDialog( dlgDebugDynSql, hWndForm, isInsertStmt , lbSuccess)
							If lbSuccess
								! When SqlError
									Set gnError = SqlError( ihSqlModify )
									Call SqlGetErrorText( gnError, gsErrorMessage )
									Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || gsErrorMessage || ' 
											SQL: ' || isInsertStmt  )
									Return TRUE
								Set lbSuccess = SqlPrepare( ihSqlModify, isInsertStmt )
								If lbSuccess
									! /##### LS : 11/09/2003
									Set lbSuccess = SalTblDoInserts( hWndItem, ihSqlModify, FALSE )
									! Set lbSuccess = SalTblDoInserts( hWndForm, ihSqlModify, FALSE )
									! \##### LS : 11/09/2003
							If lbSuccess
								Set lbSuccess = AfterDoInserts()
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoRollbackChanges
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, 'ROLLBACK' , TRUE)
							Return SqlPrepareAndExecute( ihSqlModify,  'ROLLBACK' )
					Function: AfterDoInserts
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnRowNum
							Boolean: lbSuccess
						Actions
							Set lbSuccess = TRUE
							Set lnRowNum = TBL_MinRow
							While SalTblFindNextRow( hWndForm, lnRowNum, ROW_New, 0 ) And lbSuccess
								Call SalTblSetContext( hWndForm, lnRowNum )
								Set lbSuccess = ..LBFAfterDoInsertRow()
							Return lbSuccess
					Function: AfterDoUpdates
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnRowNum
							Boolean: lbSuccess
						Actions
							Set lbSuccess = TRUE
							Set lnRowNum = TBL_MinRow
							While SalTblFindNextRow( hWndForm, lnRowNum, ROW_Edited, 0 ) And lbSuccess
								Call SalTblSetContext( hWndForm, lnRowNum )
								Set lbSuccess = ..LBFAfterDoUpdateRow()
							Return lbSuccess
					Function: AfterDoDeletes
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnRowNum
							Boolean: lbSuccess
						Actions
							Set lbSuccess = TRUE
							Set lnRowNum = TBL_MinRow
							While SalTblFindNextRow( hWndForm, lnRowNum, ROW_MarkDeleted, 0 ) And lbSuccess
								Call SalTblSetContext( hWndForm, lnRowNum )
								Set lbSuccess = ..LBFAfterDoDeleteRow()
							Return lbSuccess
					Function: BeforeDoInserts
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: lnRowNum
							Boolean: lbSuccess
						Actions
							Set lbSuccess = TRUE
							Set lnRowNum = TBL_MinRow
							While SalTblFindNextRow( hWndForm, lnRowNum, ROW_New, 0 ) And lbSuccess
								Call SalTblSetContext( hWndForm, lnRowNum )
								Set lbSuccess =  ..LBFBeforeDoInsertRow()
							Return lbSuccess
					Function: BeforeDoUpdates
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnRowNum
							Boolean: lbSuccess
						Actions
							Set lbSuccess = TRUE
							Set lnRowNum = TBL_MinRow
							While SalTblFindNextRow( hWndForm, lnRowNum, ROW_Edited, 0 ) And lbSuccess
								Call SalTblSetContext( hWndForm, lnRowNum )
								Set lbSuccess = ..LBFBeforeDoUpdateRow()
							Return lbSuccess
					Function: BeforeDoDeletes
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnRowNum
							Boolean: lbSuccess
						Actions
							Set lbSuccess = TRUE
							Set lnRowNum = TBL_MinRow
							While SalTblFindNextRow( hWndForm, lnRowNum, ROW_MarkDeleted, 0 ) And lbSuccess
								Call SalTblSetContext( hWndForm, lnRowNum )
								Set lbSuccess = ..LBFBeforeDoDeleteRow()
							Return lbSuccess
					! LBF functions
					Function: LBFInitFieldsBeforeSave
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFAfterDoApplyChanges
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFBeforeDoDeleteRow
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFAfterDoDeleteRow
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFBeforeDoUpdateRow
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFAfterDoUpdateRow
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFBeforeDoInsertRow
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFAfterDoInsertRow
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFOnRowGetFocus
						Description: LBF
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFBeforeRetrieve
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFAfterRetrieve
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFBeforeRefresh
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return TRUE
					Function: LBFAfterRefresh
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFAfterNewRecord
						Description: Late Bound Function wordt opgeroepen na het invoegen van een nieuw record.
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: LBFAfterClear
						Description: Late Bound Function wordt opgeroepen na het wissen van het scherm
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					! Sorteren van een table window
					Function: AddColSort
						Description: Toevoegen van een kolom zodat op de kolom gesorteerd kan worden.
						Returns
						Parameters
							Number: pnColID
							String: psTableAndColumn
							Number: pnColSortNr
						Static Variables
						Local variables
							Number: lnUpperBound
						Actions
							If SalArrayIsEmpty( isArrSortColID )
								Set isArrSortColID[ 0  ] = pnColID
								Set isArrSortColTableAndColumn[ 0 ] = psTableAndColumn
								Set isArrSortColOrderNr[ 0 ] = pnColSortNr
							Else
								Call SalArrayGetUpperBound( isArrSortColID, 1, lnUpperBound )
								Set isArrSortColID[ lnUpperBound + 1 ] = pnColID
								Set isArrSortColTableAndColumn[ lnUpperBound + 1 ] = psTableAndColumn
								Set isArrSortColOrderNr[ lnUpperBound + 1 ] = pnColSortNr
					Function: GetSqlSelectOrderBy
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
							Number: lnTeller
							Number: lnUpperBound
							String: lsOrderArr[*]
							Number: lnOrderColumnsDepOrderBy[*]
							String: lsOrderBy
							Number: lnColumnOrder
							String: lsTmp
						Actions
							Call SalArrayGetUpperBound( isArrSortColID, 1, lnUpperBound )
							Set lnTeller  = 0
							While lnTeller <= lnUpperBound
								If isArrSortColOrderNr[lnTeller] < 0
									Set lsOrderArr[SalNumberAbs(isArrSortColOrderNr[lnTeller])] = 'D' ||  isArrSortColTableAndColumn[lnTeller]
								Else If isArrSortColOrderNr[lnTeller] > 0
									Set lsOrderArr[SalNumberAbs(isArrSortColOrderNr[lnTeller])] = 'A' ||  isArrSortColTableAndColumn[lnTeller]
								If gbPosColumnsDependingOrderBy 
									If isArrSortColOrderNr[lnTeller] != 0
										! Call SalMessageBox( SalNumberToStrX( lnOrderColumnsDepOrderBy[SalNumberAbs(isArrSortColOrderNr[lnTeller])]  , 0 ) ||
													'
												' ||  isArrSortColTableAndColumn[lnTeller], SalNumberToStrX( SalNumberAbs(isArrSortColOrderNr[lnTeller]),0 ), MB_Ok )
										Set lnOrderColumnsDepOrderBy[SalNumberAbs(isArrSortColOrderNr[lnTeller])]  = isArrSortColID[lnTeller]
									Else
										Set lnOrderColumnsDepOrderBy[SalNumberAbs(isArrSortColOrderNr[lnTeller])]  = 0
								Set lnTeller = lnTeller + 1
							! Call SalArrayGetUpperBound( lsOrderArr, 1, lnUpperBound )
							Set lnTeller  = 0
							While lnTeller <= lnUpperBound
								If lsOrderArr[lnTeller+1] != ''
									If lsOrderBy != ''
										Set lsOrderBy = lsOrderBy || COMMA
									If SalStrLeftX(  lsOrderArr[lnTeller+1], 1 ) = 'A'
										Set lsOrderBy = lsOrderBy || SalStrMidX(  lsOrderArr[lnTeller+1], 1, SalStrLength(  lsOrderArr[lnTeller+1] ) - 1 ) || ASC
									Else
										Set lsOrderBy = lsOrderBy || SalStrMidX(  lsOrderArr[lnTeller+1], 1, SalStrLength(  lsOrderArr[lnTeller+1] ) - 1 ) || DESC
									Set lnColumnOrder = lnColumnOrder + 1
								Set lnTeller = lnTeller + 1
							!
							If gbPosColumnsDependingOrderBy
								Set lnTeller  = 1
								Set lnColumnOrder =1
								Call SalArrayGetUpperBound( lnOrderColumnsDepOrderBy, 1, lnUpperBound )
								While lnTeller <= lnUpperBound
									If lnOrderColumnsDepOrderBy[lnTeller] != 0
										Call SalTblGetColumnTitle( SalTblGetColumnWindow( hWndForm, lnOrderColumnsDepOrderBy[lnTeller], COL_GetID ) , lsTmp, 40 )
										Call SalMessageBox( '
												Title: ' || lsTmp || '
												 Column ID: ' || SalNumberToStrX( lnOrderColumnsDepOrderBy[lnTeller]  , 0 ) || '
												Column old pos: ' ||  SalNumberToStrX( SalTblQueryColumnPos( SalTblGetColumnWindow( hWndForm, lnOrderColumnsDepOrderBy[lnTeller] , COL_GetID ) ),0 ) || '
												Column new pos: ' ||  SalNumberToStrX( lnColumnOrder,0 ) 
												, 'Debug', MB_Ok )
										! If SalTblQueryColumnPos( SalTblGetColumnWindow( hWndForm, lnOrderColumnsDepOrderBy[lnTeller] , COL_GetID ) ) != lnColumnOrder
										If Not SalTblSetColumnPos(  SalTblGetColumnWindow( hWndForm, lnOrderColumnsDepOrderBy[lnTeller] , COL_GetID ), lnColumnOrder  )
											Call SalMessageBeep( 0 )
										Set lnColumnOrder = lnColumnOrder + 1
									Set lnTeller = lnTeller + 1
							Return lsOrderBy
					!
					Function: SetTblFillMode
						Description:
						Returns
						Parameters
							Number: pnTblFillMode
						Static Variables
						Local variables
						Actions
							Set inTblFillMode = pnTblFillMode
					!
					!
					Function: SauverTri
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							String: lsFrmName
							String: lsTableName
							Number: i
							Number: lnUpperBound
							String: s
							! cBTRegistry: reg
						Actions
							Set i = 0
							Call SalArrayGetUpperBound( isArrSortColID, 1, lnUpperBound )
							Set lsFrmName = SalStrRepeatX( ' ', 254 )
							Set lsTableName = SalStrRepeatX( ' ', 254 )
							! ! Call SalTblGetColumnTitle( hWndItem, lsColName, 254 )
							Set lsTableName =  PalGetItemName( hWndItem )
							Set lsFrmName =  PalGetItemName( SalParentWindow( hWndItem ) )
							! Call SalMessageBox( lsTableName, lsFrmName, MB_Ok )
							Set s = 'sort' || cRegBackSlash || lsFrmName || cRegBackSlash || lsTableName
							! Call reg.SetRootKey( Number )
							Call RegistryDelete( 'NCCpas', s )
							Call RegistryWriteInteger( 'NCCpas', s, lnUpperBound+1 )
							While i <= lnUpperBound
								! Call SalSetProfileString( s, 'ColID' || SalNumberToStrX( i, 0 ), SalNumberToStrX( , 0 ), psFileName )
								Call RegistryWriteInteger( 'NCCpas', s || cRegBackSlash || SalNumberToStrX ( i, 0 ) || cRegBackSlash || 'ColID', isArrSortColID[ i ] )
								! Call SalSetProfileString( s, 'Order' || SalNumberToStrX( i, 0 ), SalNumberToStrX( , 0 ), psFileName )
								Call RegistryWriteInteger( 'NCCpas', s || cRegBackSlash || SalNumberToStrX ( i, 0 ) || cRegBackSlash || 'Order', isArrSortColOrderNr[ i ] )
								! Call SalSetProfileString( s, 'TableAndColumn' || SalNumberToStrX( i, 0 ),, psFileName )
								Call RegistryWriteString(  'NCCpas', s || cRegBackSlash || SalNumberToStrX ( i, 0 ) || cRegBackSlash || 'TableAndColumn', isArrSortColTableAndColumn[ i ] )
								! Set = pnColID
								! Set isArrSortColTableAndColumn[ lnUpperBound + 1 ] = psTableAndColumn
								! Set isArrSortColOrderNr[ lnUpperBound + 1 ] = pnColSortNr
								Set i = i + 1
					Function: RestaurerTri
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
							Number: n
							Number: lnUpperBound
							String: s
							String: lsFrmName
							String: lsTableName
						Actions
							Set i = 0
							Set lsFrmName = SalStrRepeatX( ' ', 254 )
							Set lsTableName = SalStrRepeatX( ' ', 254 )
							Set lsTableName =  PalGetItemName( hWndItem )
							Set lsFrmName =  PalGetItemName( SalParentWindow( hWndItem ) )
							Set s = 'sort' || cRegBackSlash || lsFrmName || cRegBackSlash || lsTableName
							Call RegistryReadInteger( 'NCCpas', s, 0, lnUpperBound )
							If not __VerifOrderTri( lnUpperBound, s )
								Call RegistryDelete( 'NCCpas', s )
							Else
								If lnUpperBound > 0
									While i < lnUpperBound
										! Set = SalGetProfileInt( s, 'ColID' || SalNumberToStrX( i, 0 ), 0, psFileName )
										Call RegistryReadInteger( 'NCCpas', s || cRegBackSlash || SalNumberToStrX ( i, 0 ) || cRegBackSlash || 'ColID', 0, isArrSortColID[ i ] )
										! Set n = SalGetProfileInt( s, 'Order' || SalNumberToStrX( i, 0 ), 0, psFileName )
										Call RegistryReadInteger( 'NCCpas', s || cRegBackSlash || SalNumberToStrX ( i, 0 ) || cRegBackSlash || 'Order', 0, n )
										If n > 32767
											Set n = n - 65536
										Set isArrSortColOrderNr[ i ] = n
										! Call SalGetProfileString( s, 'TableAndColumn' || SalNumberToStrX( i, 0 ), '', phWin.clsCTblDynSql. isArrSortColTableAndColumn[ i ], psFileName )
										Call RegistryReadString( 'NCCpas', s || cRegBackSlash || SalNumberToStrX ( i, 0 ) || cRegBackSlash || 'TableAndColumn', '', isArrSortColTableAndColumn[ i ] )
										Set i = i + 1
					Function: __VerifOrderTri
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnUpperBound
							String: psKey
						Static Variables
						Local variables
							Boolean: lbOk
							Number: lnColId
							Number: lnBound
							Number: i
							String: lsColName
						Actions
							Set lbOk = TRUE
							If SalArrayGetUpperBound( isArrSortColID, 1, lnBound )
								If lnBound + 1 = pnUpperBound
									Set i = 0
									If pnUpperBound > 0
										While lbOk and ( i < pnUpperBound )
											Call RegistryReadInteger( 'NCCpas', psKey || cRegBackSlash || SalNumberToStrX ( i, 0 ) || cRegBackSlash || 'ColID', 0, lnColId )
											If isArrSortColID[ i ] != lnColId
												Set lbOk = FALSE
											If lbOk
												Call RegistryReadString( 'NCCpas', psKey || cRegBackSlash || SalNumberToStrX ( i, 0 ) || cRegBackSlash || 'TableAndColumn', '', lsColName )
												If lsColName != isArrSortColTableAndColumn[ i ]
													Set lbOk = FALSE
											Set i = i + 1
								Else
									Set lbOk = FALSE
							Else
								Set lbOk = FALSE
							Return lbOk
					!
					! 11/04/2005
					! Fonction pour obtenir, en chaîne de caractère, le critère de tri de la requête
					Function: GetStringOrder
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
							Number: i
							Number: j
							Number: lnUpperBound
							String: lsCol[*]
							String: lsResult
						Actions
							Set i = 0
							Call SalArrayGetUpperBound( isArrSortColID, 1, lnUpperBound )
							While i <= lnUpperBound
								Set j = isArrSortColOrderNr[i]
								Set lsCol[ SalNumberAbs( j ) ] = isArrSortColTableAndColumn[ i ]
								If j < 0
									Set lsCol[ SalNumberAbs( j ) ] = lsCol[ SalNumberAbs( j ) ] || ' desc'
								Set i = i + 1
							Set i = 1
							Set lsResult = ''
							Call SalArrayGetUpperBound( lsCol, 1, lnUpperBound )
							While i <= lnUpperBound
								If i > 1
									Set lsResult = lsResult || ', '
								Set lsResult = lsResult || lsCol[ i ] 
								Set i = i + 1
							Return lsResult
					!
					!
					! Function de recherche dans la table
					Function: SearchString
						Description: Fonction de recherche d'une ligne dans la table.
								
								Le premier paramètre est la colonne de la table où il faut effectuer la recherche. 
								Mettre hWndNULL si la recherche doit se faire dans toutes les colonnes de la table
								
								Le deuxième paramètre est la chaine à rechercher.
								
								Le troisième paramètre retourne le numéro de la ligne trouvée. 
								Si la valeur initiale est -1, la recherche commence depuis le début de la table, sinon depuis la valeur fournie.
						Returns
							Boolean:
						Parameters
							Window Handle: pwhColumn
							String: psValue
							Receive Number: prnRow
						Static Variables
						Local variables
						Actions
							If psValue = ''
								Return FALSE
							Else
								If prnRow <= -1
									Set __wnRow = 0
								Else
									Set __wnRow = prnRow + 1
								Set __wnRow = VisTblFindString( hWndItem, __wnRow, pwhColumn, psValue || '%' )
								If __wnRow > -1
									! Call SalTblSetFocusRow( hWndItem, wnRow )
									! Call SalTblSetContext( hWndItem, wnRow )
									Set prnRow = __wnRow
									Set __wnRow = __wnRow + 1
									Return TRUE
								Else
									! Call SalMessageBeep( MB_Ok )
									! Call PalMessageBox( 'Eind van het zoek', 'Fin de la recherche', '', '', MB_Ok )
									Set prnRow = -1
									Return FALSE
					Function: SearchDateTime
						Description: Fonction de recherche d'une ligne dans la table.
								
								Le premier paramètre est la colonne de la table où il faut effectuer la recherche. 
								Mettre hWndNULL si la recherche doit se faire dans toutes les colonnes de la table
								
								Le deuxième paramètre est la date à rechercher.
								
								Le troisième paramètre retourne le numéro de la ligne trouvée. 
								Si la valeur initiale est -1, la recherche commence depuis le début de la table, sinon depuis la valeur fournie.
						Returns
							Boolean:
						Parameters
							Window Handle: pwhColumn
							Date/Time: pdtValue
							Receive Number: prnRow
						Static Variables
						Local variables
						Actions
							If pdtValue = DATETIME_Null
								Return FALSE
							Else
								If prnRow <= -1
									Set __wnRow = 0
								Else
									Set __wnRow = prnRow + 1
								Set __wnRow = VisTblFindDateTime( hWndItem, __wnRow, pwhColumn, pdtValue )
								If __wnRow > -1
									! Call SalTblSetFocusRow( hWndItem, wnRow )
									! Call SalTblSetContext( hWndItem, wnRow )
									Set prnRow = __wnRow
									Set __wnRow = __wnRow + 1
									Return TRUE
								Else
									! Call SalMessageBeep( MB_Ok )
									! Call PalMessageBox( 'Eind van het zoek', 'Fin de la recherche', '', '', MB_Ok )
									Set prnRow = -1
									Return FALSE
					Function: SearchNumber
						Description: Fonction de recherche d'une ligne dans la table.
								
								Le premier paramètre est la colonne de la table où il faut effectuer la recherche. 
								Mettre hWndNULL si la recherche doit se faire dans toutes les colonnes de la table
								
								Le deuxième paramètre est la valeur à rechercher.
								
								Le troisième paramètre retourne le numéro de la ligne trouvée. 
								Si la valeur initiale est -1, la recherche commence depuis le début de la table, sinon depuis la valeur fournie.
						Returns
							Boolean:
						Parameters
							Window Handle: pwhColumn
							Number: pnValue
							Receive Number: prnRow
						Static Variables
						Local variables
						Actions
							If pnValue = NUMBER_Null
								Return FALSE
							Else
								If prnRow <= -1
									Set __wnRow = 0
								Else
									Set __wnRow = prnRow + 1
								Set __wnRow = VisTblFindNumber( hWndItem, __wnRow, pwhColumn, pnValue )
								If __wnRow > -1
									! Call SalTblSetFocusRow( hWndItem, wnRow )
									! Call SalTblSetContext( hWndItem, wnRow )
									Set prnRow = __wnRow
									Set __wnRow = __wnRow + 1
									Return TRUE
								Else
									! Call SalMessageBeep( MB_Ok )
									! Call PalMessageBox( 'Eind van het zoek', 'Fin de la recherche', '', '', MB_Ok )
									Set prnRow = -1
									Return FALSE
				Message Actions
					On SAM_CreateComplete
						Call ConnectSqlHandles(  )
					On SAM_Close
						If Not ..OkToLoseChangesIfAny()
							Return FALSE
					On SAM_Destroy
						Call DisconnectSqlHandles(  )
					On WM_MOUSEWHEEL
						Call SalScrollOnWheel( hWndItem, wParam, lParam )
					On PAM_Language
						! Set __whWnd = SalGetFirstChild( hWndForm, TYPE_ChildTable )
						! While __whWnd != hWndNULL
							Call SalSendMsgToChildren( __whWnd, PAM_Language, wParam, lParam )
							Set __whWnd = SalGetNextChild( hWndForm, TYPE_ChildTable )
						Call SalSendMsgToChildren( hWndForm, PAM_Language, wParam, lParam )
			Child Table Class: clsCtblDynSqlMaster
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsCTblDynSql
				Contents
				Class Variables
				Instance Variables
					Number: inRowNum
				Functions
					Function: DoApplyChanges
						Description: Deze functie voert een update-statement of een insert-statement uit
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnFetchUpdDel
							Boolean: lbSuccess
							Boolean: lbChanged
							Window Handle: lhWndCTblWndDetail
						Actions
							Call VisWaitCursor( TRUE )
							Call ..LBFInitFieldsBeforeSave()
							! TOEGEVOEGD OP 11/04/97
							! Enigste verschil met child table window detail
							Set lhWndCTblWndDetail = SalGetFirstChild( SalParentWindow( hWndForm ), TYPE_ChildTable )
							While lhWndCTblWndDetail != hWndNULL 
								If lhWndCTblWndDetail != hWndForm
									Call SalSendMsg( lhWndCTblWndDetail, PAM_Actions, ACT_ApplyChanges, 0 )
								Set lhWndCTblWndDetail = SalGetNextChild(lhWndCTblWndDetail, TYPE_ChildTable)
							! TOT HIER 11/04/97
							Set lbSuccess = TRUE
							Set lbChanged = FALSE
							! ## MARC 18/09/1997>> j'ai ajouté 'and lbSuccess'  au niveau des ROW_Edited
							If SalTblAnyRows( hWndForm, ROW_MarkDeleted, 0 )
								Set lbSuccess = DoDeleteStmt()
								Set lbChanged = TRUE
								Call SalTblSetFlagsAnyRows( hWndForm, ROW_New | ROW_Edited | ROW_MarkDeleted, FALSE, ROW_MarkDeleted, 0 )
							If SalTblAnyRows( hWndForm, ROW_New, 0 ) And lbSuccess
								Set lbSuccess = DoInsertStmt()
								Set lbChanged = TRUE
								If lbSuccess
									Call SalTblSetFlagsAnyRows( hWndForm, ROW_New | ROW_Edited, FALSE, ROW_New, 0 )
							If SalTblAnyRows( hWndForm, ROW_Edited, 0 ) And lbSuccess
								Set lbSuccess = DoUpdateStmt()
								Set lbChanged = TRUE
								If lbSuccess
									Call SalTblSetFlagsAnyRows( hWndForm, ROW_Edited | ROW_New, FALSE, ROW_Edited | ROW_New, 0 )
							! ## MARC 18/09/1997<<
							If lbSuccess And lbChanged
								Call SalSendMsg( hWndItem, PAM_Actions, ACT_Refresh, 0 )
							Call ..LBFAfterDoApplyChanges()
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoRefresh
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = TRUE
							! OORSPRONKELIJK
							! Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, '', TBL_FillNormal )
							! TOT HIER OORSPRONKELIJK
							!
							! HIER 28/4/97
							! Normaal is de volgende regel voldoende maar in frmArticlesBudget gaf dit problemen:
							! Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, '', TBL_FillNormal )
							! Wat hier volgt geeft geen problemen, maar SqlPrepare wordt telkens opnieuw uitgevoerd (mindere performantie)
							! If isSelectStmt = ''
								Set lbSuccess =  BuildSelectStmt(  )
								If lbSuccess
									Set lbSuccess = SqlPrepare( ihSqlSelect, isSelectStmt )
							! If lbSuccess
								Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, '', clsCtblDynSqlMaster.inTblFillMode )
							! TOT HIER 28/4/97
							!
							! HIER 3/6/97
							! If isSelectStmt = ''
								Set lbSuccess =  BuildSelectStmt(  )
							! If lbSuccess
								Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, isSelectStmt, clsCtblDynSqlMaster.inTblFillMode )
							! TOT HIER 3/6/97
							!
							! HIER 6/6/97
							If gbShowOnlyModAndInsRows Or  isSelectStmt = ''
								Set lbSuccess =  BuildSelectStmt(  )
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, isSelectStmt, lbSuccess )
							Set gsErrorSqlStatement = isSelectStmt
							Set gsErrorSqlStmt = isSelectStmt
							If lbSuccess
								Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, isSelectStmt, clsCtblDynSqlMaster.inTblFillMode )
							! TOT HIER 6/6/97
							Call VisWaitCursor( FALSE )
							Return lbSuccess
				Message Actions
					On PAM_NavigateRecord
						If SalTblAnyRows( hWndForm, 0, 0 )
							Select Case wParam
								Case NAV_FirstRecord
									Set inRowNum =  SalTblSetRow( hWndForm, TBL_SetFirstRow )
									Call ..LBFOnRowGetFocus()
									Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_FirstRecord, 0 )
									Break
								Case NAV_PreviousRecord
									Set inRowNum = SalTblSetRow( hWndItem, TBL_SetPrevRow )
									If SalTblQueryContext( hWndItem ) = TBL_MinRow
										Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_FirstRecord, 0 )
									Else
										Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_PreviousRecord, 0 )
									Call ..LBFOnRowGetFocus()
									Break
								Case NAV_NextRecord
									Set inRowNum = SalTblSetRow( hWndItem, TBL_SetNextRow )
									If SalTblQueryContext( hWndItem ) = TBL_MaxRow
										Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_LastRecord, 0 )
									Else
										Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_NextRecord, 0 )
									Call ..LBFOnRowGetFocus()
									Break
								Case NAV_LastRecord
									Set inRowNum =  SalTblSetRow( hWndItem, TBL_SetLastRow )
									Call ..LBFOnRowGetFocus()
									Call SalSendMsgToChildren(  SalGetFirstChild( hWndMDI, TYPE_FormToolBar ), PAM_NavigateRecord, NAV_LastRecord, 0 )
									Break
							Call SalSendMsgToChildren( hWndForm, PAM_NavigateRecord, wParam, lParam )
					On PAM_Actions
						Select Case wParam
							Case ACT_ApplyChanges
								Call DoApplyChanges()
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 0, TRUE )
								Break
							Case ACT_Clear
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 0, TRUE )
								Call Clear()
								Call ..LBFAfterClear()
								Break
							Case ACT_DeleteRecord
								If SalTblAnyRows( hWndItem, ROW_Selected, 0 )
									Call SalTblSetFlagsAnyRows( hWndItem, ROW_MarkDeleted, TRUE, ROW_Selected, 0 )
								Else
									Call SalMessageBeep( 0 )
									Call SalMessageBox( 'No rows are selected.', 'Error', MB_Ok | MB_IconExclamation )
								Break
							Case ACT_NewRecord
								Call VisWaitCursor( TRUE )
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 5, TRUE )
									Set inRecordNr = SalTblInsertRow( hWndForm,TBL_MinSplitRow )
								Else
									If SalTblAnyRows( hWndForm, 0, 0 )
										Select Case inInsertMode
											Case INSERT_Before
												Set inRecordNr = SalTblInsertRow( hWndForm, SalTblQueryContext( hWndForm ) )
												Break
											Case INSERT_After
												Set inRecordNr = SalTblInsertRow( hWndForm, SalTblQueryContext( hWndForm ) + 1)
												Break
											Case INSERT_Top
												Set inRecordNr = SalTblInsertRow( hWndForm, TBL_MinRow )
												Break
											Case INSERT_Bottom
												Set inRecordNr = SalTblInsertRow( hWndForm, TBL_MaxRow )
												Break
									Else
										Set inRecordNr = SalTblInsertRow( hWndForm, TBL_MaxRow )
								If inRecordNr = TBL_Error
									Call SalMessageBeep( 0 )
									Call SalMessageBox( 'Sorry, could not insert a new row.', 'Error', MB_Ok | MB_IconExclamation )
									Call VisWaitCursor( FALSE )
									Return FALSE
								Call SalTblSetFocusRow( hWndForm, inRecordNr )
								If ibParamSetAutoSelect
									Call SalTblSetFlagsAnyRows( hWndForm, ROW_Selected, FALSE, ROW_Selected, 0 )
									Call SalTblSetRowFlags( hWndForm, inRecordNr, ROW_Selected, TRUE )
								Else
									Call SalTblSetFocusCell( hWndForm, inRecordNr, SalTblGetColumnWindow( hWndForm, 1, COL_GetPos ), 0, 0 )
								Call ..LBFAfterNewRecord()
								Call ..LBFOnRowGetFocus()
								Call SalSendMsg( SalParentWindow( hWndForm ), PAM_Dirty, 0, 0 )
								Call VisWaitCursor( FALSE )
								Break
							Case ACT_Retrieve
								Call VisWaitCursor( TRUE )
								If Not ..LBFBeforeRetrieve()
									Return FALSE
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 0, TRUE )
								Call SetTblFillMode(lParam)
								If DoSelectStmt()
									! Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_Retrieve, 0 )
									Call SalSendMsg( hWndItem, PAM_NavigateRecord, NAV_FirstRecord, 0 )
									Call ..LBFAfterRetrieve()
								Call VisWaitCursor( FALSE )
								Break
							Case ACT_UndoChanges
								Call SalSendMsg( hWndItem, PAM_Actions, ACT_Retrieve, 0 )
								Break
							Case ACT_Refresh
								If Not  ..LBFBeforeRefresh()
									Return FALSE
								Call DoRefresh()
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 0, TRUE )
								Call ..LBFAfterRefresh()
								Break
							Case ACT_DeleteAllDetails
								Call SalTblSetFlagsAnyRows( hWndItem, ROW_MarkDeleted, TRUE, 0, 0 )
								Call DoDeleteStmt()
								Break
							Case ACT_Rollback
								Call DoRollbackChanges()
								Break
			Child Table Class: clsCtblDynSqlDetail
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsCTblDynSql
				Contents
				Class Variables
				Instance Variables
				Functions
					Function: DoApplyChanges
						Description: Deze functie voert een update-statement of een insert-statement uit
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnFetchUpdDel
							Boolean: lbSuccess
							Boolean: lbChanged
						Actions
							Call VisWaitCursor( TRUE )
							Call ..LBFInitFieldsBeforeSave()
							Set lbSuccess = TRUE
							Set lbChanged = FALSE
							! ## MARC 18/09/1997>> j'ai ajouté 'and lbSuccess' au niveau des ROW_Edited
							If SalTblAnyRows( hWndItem, ROW_MarkDeleted, 0 ) And lbSuccess
								Set lbSuccess = DoDeleteStmt()
								Set lbChanged = TRUE
							If SalTblAnyRows( hWndItem, ROW_New, 0 ) And lbSuccess
								Set lbSuccess = DoInsertStmt()
								Set lbChanged = TRUE
								If lbSuccess
									! VAN HIER 28/03/97
									! Call SalTblSetFlagsAnyRows( hWndItem, ROW_Edited, FALSE, ROW_New, 0 )
									! TOT HIER 28/03/97 vervangen door de volgende lijn:
									Call SalTblSetFlagsAnyRows( hWndItem, ROW_New, FALSE, ROW_New, 0 )
							If SalTblAnyRows( hWndItem, ROW_Edited, 0 ) And lbSuccess
								Set lbSuccess = DoUpdateStmt()
								Set lbChanged = TRUE
								If lbSuccess
									Call SalTblSetFlagsAnyRows( hWndItem, ROW_Edited | ROW_New, FALSE, ROW_Edited | ROW_New, 0 )
							! ## MARC 18/09/1997<<
							If lbSuccess And lbChanged
								Call SalSendMsg( hWndItem, PAM_Actions, ACT_Refresh, 0 )
							Call ..LBFAfterDoApplyChanges()
							Call VisWaitCursor( FALSE )
							Return lbSuccess
					Function: DoRefresh
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Boolean: lbSuccess
						Actions
							Call VisWaitCursor( TRUE )
							Set lbSuccess = TRUE
							! OORSPRONKELIJK
							! Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, '', TBL_FillNormal )
							! TOT HIER OORSPRONKELIJK
							!
							! HIER 28/4/97
							! Normaal is de volgende regel voldoende maar in frmArticlesBudget gaf dit problemen:
							! Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, '', TBL_FillNormal )
							! Wat hier volgt geeft geen problemen, maar SqlPrepare wordt telkens opnieuw uitgevoerd (mindere performantie)
							! If isSelectEqualStmt = ''
								Set lbSuccess =  BuildSelectEqualStmt(  )
								If lbSuccess
									Set lbSuccess = SqlPrepare( ihSqlSelect, isSelectEqualStmt )
							! If lbSuccess
								Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, '', clsCtblDynSqlDetail.inTblFillMode )
							! TOT HIER 28/4/97
							!
							! HIER 3/6/97
							If isSelectEqualStmt = ''
								Set lbSuccess =  BuildSelectEqualStmt(  )
							Set gsErrorSqlStatement = isSelectEqualStmt
							Set gsErrorSqlStmt = isSelectEqualStmt
							If lbSuccess
								Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, isSelectEqualStmt, clsCtblDynSqlDetail.inTblFillMode )
							! TOT HIER 3/6/97
							!
							! HIER 6/6/97
							! If gbShowOnlyModAndInsRows Or  isSelectEqualStmt = ''
								Set lbSuccess =  BuildSelectEqualStmt(  )
							! If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, isSelectEqualStmt, lbSuccess )
							! If lbSuccess
								Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, isSelectEqualStmt, clsCtblDynSqlDetail.inTblFillMode )
							! TOT HIER 6/6/97
							!
							! HIER 22/7/97
							If isSelectEqualStmt = ''
								Set lbSuccess =  BuildSelectEqualStmt(  )
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, isSelectEqualStmt, lbSuccess )
							Set gsErrorSqlStatement = isSelectEqualStmt
							Set gsErrorSqlStmt = isSelectEqualStmt
							If lbSuccess
								Set lbSuccess = SalTblPopulate( hWndForm, ihSqlSelect, isSelectEqualStmt, clsCtblDynSqlDetail.inTblFillMode )
							! TOT HIER 22/7/97
							!
							Call VisWaitCursor( FALSE )
							Return lbSuccess
				Message Actions
					On PAM_NavigateRecord
						If DoSelectEqualStmt()
							Call SalTblSetContext( hWndForm, 0 )
							Call ..LBFOnRowGetFocus()
							Call SalSendMsgToChildren( hWndForm, PAM_NavigateRecord, wParam, lParam )
						Else
							Call SalMessageBox( 'Problem executing DoSelectEqualStmt in class clsCtblDynSqlDetail', 'Serious problem', MB_Ok )
					On PAM_Actions
						Select Case wParam
							Case ACT_ApplyChanges
								Call DoApplyChanges()
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 0, TRUE )
								Break
							Case ACT_Clear
								Call Clear()
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 0, TRUE )
								Call ..LBFAfterClear()
								Break
							Case ACT_DeleteRecord
								If SalTblAnyRows( hWndItem, ROW_Selected, 0 )
									Call SalTblSetFlagsAnyRows( hWndItem, ROW_MarkDeleted, TRUE, ROW_Selected, 0 )
								Else
									Call SalMessageBeep( 0 )
									Call SalMessageBox( 'No rows are selected.', 'Error', MB_Ok | MB_IconExclamation )
								Break
							Case ACT_NewRecord
								Call VisWaitCursor( TRUE )
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 5, TRUE )
									Set inRecordNr = SalTblInsertRow( hWndForm, TBL_MinSplitRow )
								Else
									If SalTblAnyRows( hWndForm, 0, 0 )
										Select Case inInsertMode
											Case INSERT_Before
												Set inRecordNr = SalTblInsertRow( hWndForm, SalTblQueryContext( hWndForm ) )
												Break
											Case INSERT_After
												Set inRecordNr = SalTblInsertRow( hWndForm, SalTblQueryContext( hWndForm ) + 1)
												Break
											Case INSERT_Top
												Set inRecordNr = SalTblInsertRow( hWndForm, TBL_MinRow )
												Break
											Case INSERT_Bottom
												Set inRecordNr = SalTblInsertRow( hWndForm, TBL_MaxRow )
												Break
									Else
										Set inRecordNr = SalTblInsertRow( hWndForm, TBL_MaxRow )
								If inRecordNr = TBL_Error
									Call SalMessageBeep( 0 )
									Call SalMessageBox( 'Sorry, could not insert a new row.', 'Error', MB_Ok | MB_IconExclamation )
									Call VisWaitCursor( FALSE )
									Return FALSE
								Call SalTblSetFocusRow( hWndForm, inRecordNr )
								If ibParamSetAutoSelect
									Call SalTblSetFlagsAnyRows( hWndForm, ROW_Selected, FALSE, ROW_Selected, 0 )
									Call SalTblSetRowFlags( hWndForm, inRecordNr, ROW_Selected, TRUE )
								Else
									Call SalTblSetFocusCell( hWndForm, inRecordNr, SalTblGetColumnWindow( hWndForm, 1, COL_GetPos ), 0, 0 )
								! Call SalSetFocus( SalTblGetColumnWindow( hWndForm, 1, COL_GetPos ) )
								Call ..LBFAfterNewRecord()
								Call ..LBFOnRowGetFocus()
								Call VisWaitCursor( FALSE )
								Break
							Case ACT_Retrieve
								Call VisWaitCursor( TRUE )
								If Not ..LBFBeforeRetrieve()
									Return FALSE
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 0, TRUE )
								Call SetTblFillMode(lParam)
								If DoSelectEqualStmt()
									! Call SalSendMsgToChildren( hWndForm, PAM_Actions, ACT_Retrieve, 0 )
									Call SalSendMsg( hWndItem, PAM_NavigateRecord, NAV_FirstRecord, 0 )
									Call ..LBFAfterRetrieve()
								Call VisWaitCursor( FALSE )
								Break
							Case ACT_UndoChanges
								Call SalSendMsg( hWndItem, PAM_Actions, ACT_Retrieve, 0 )
								Break
							Case ACT_Refresh
								If Not  ..LBFBeforeRefresh()
									Return FALSE
								If gbSplitTblWhenInsert
									Call SalTblDefineSplitWindow( hWndForm, 0, TRUE )
								Call DoRefresh()
								Call ..LBFAfterRefresh()
								Break
							Case ACT_DeleteAllDetails
								Call SalTblSetFlagsAnyRows( hWndItem, ROW_MarkDeleted, TRUE, 0, 0 )
								Call DoDeleteStmt()
								Break
							Case ACT_Rollback
								Call DoRollbackChanges()
								Break
			Combo Box Class: clsCmbDynSql
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description: Bij het navigeren en retrieven van data moeten de comboboxes de correcte display values tonen.
				Derived From
					Class: clsCmbCached
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
					On PAM_NavigateRecord
						Call clsCmbDynSql.LookupDisplayValue(  )
						! Soms verschijnt de inhoud van de combobox niet na een retrieve
						Call SalInvalidateWindow( hWndItem )
			Column Class: clsColCmbDynSql
				Title:
				Visible? Class Default
				Editable? Class Default
				Maximum Data Length: Class Default
				Data Type: Class Default
				Justify: Class Default
				Width:  Class Default
				Width Editable? Class Default
				Format: Class Default
				Country: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Cell Options
					Cell Type? Class Default
					Multiline Cell? Class Default
					Cell DropDownList
						Sorted? Class Default
						Vertical Scroll? Class Default
						Auto Drop Down? Class Default
						Allow Text Editing? Class Default
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Class Default
				Description:
				Derived From
					Class: clsColCmbCached
				Class Variables
				Instance Variables
				Functions
				List Values
				Message Actions
					! On PAM_NavigateRecord
						Call clsColCmbDynSql.LookupDisplayValue(  )
			MDI Window Class: clsMdiDynSql
				Title:
				Display Settings
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Yes
						Height: Class Default
						Height Editable? Yes
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
				Icon File:
				Accessories Enabled? Class Default
				Visible? Yes
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Class Variables
				Instance Variables
				Functions
				Message Actions
			! ----------------------------------------------------------------------------------------------------------------------------------------
			!
			! Classes in CLEAR.APL ---------------------------------------------------------------------------------------------------------
			! PRIVATE
			General Window Class: clsClearableObject
				Description:
				Derived From
				Class Variables
				Instance Variables
					Number: __nNbrStyle
					Number: __nStyle
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalMessageBox( 'Function Clear in class ClearableObject is a virtual function and should be redefined in descendant classes', 
									'Development error', MB_Ok | MB_IconExclamation )
					!
					! Function: AddStyle
						Description: 
						Returns 
						Parameters 
							Number: pnStyle
						Static Variables 
						Local variables 
						Actions 
							Set __nNbrStyle = __nNbrStyle + 1
							Set __nStyle = __nStyle | pnStyle
				Message Actions
					On PAM_Clear
						Call ..Clear()
					! On WM_NCCREATE
						If __nNbrStyle
							Call SetWindowLongA( hWndItem, GWL_STYLE, GetWindowLongA( hWndItem, GWL_STYLE )  | __nStyle )
			! PUBLIC
			Check Box Class: clsClearableCb
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  1.4"
					Width Editable? Class Default
					Height: 0.25"
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Set MyValue = FALSE
				Message Actions
					On SAM_Click
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On PAM_Dirty
						Call SalSendMsg( hWndForm, PAM_Dirty, wParam, lParam )
			Child Table Class: clsClearableCTbl
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Contents
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalTblReset( hWndItem )
				Message Actions
			Column Class: clsClearableCol
				Title:
				Visible? Class Default
				Editable? Class Default
				Maximum Data Length: Class Default
				Data Type: Class Default
				Justify: Class Default
				Width:  Class Default
				Width Editable? Class Default
				Format: Class Default
				Country: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Cell Options
					Cell Type? Class Default
					Multiline Cell? Class Default
					Cell DropDownList
						Sorted? Class Default
						Vertical Scroll? Class Default
						Auto Drop Down? Class Default
						Allow Text Editing? Class Default
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Class Default
				Description:
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
				List Values
				Message Actions
					On SAM_AnyEdit
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On PAM_Dirty
						Call SalSendMsg( SalParentWindow( hWndForm ), PAM_Dirty, 0, 0 )
			Combo Box Class: clsClearableCmb
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalClearField( hWndItem )
				List Initialization
				Message Actions
					On SAM_AnyEdit
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On SAM_Click
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On PAM_Dirty
						Call SalSendMsg( hWndForm, PAM_Dirty, wParam, lParam )
			Data Field Class: clsClearableDf
				Data
					Maximum Data Length: Class Default
					Data Type: Class Default
					Editable? Class Default
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Class Default
					Format: Class Default
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalClearField( hWndItem )
				Message Actions
					On SAM_AnyEdit
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On PAM_Dirty
						Call SalSendMsg( hWndForm, PAM_Dirty, wParam, lParam )
			Dialog Box Class: clsClearableDlg
				Title:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Type of Dialog: Modal
					Allow Dock to Parent? Class Default
					Docking Orientation: Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Absolute Screen Location? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Resizable? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalSendMsgToChildren( hWndForm, PAM_Clear, 0, 0 )
				Message Actions
			Form Window Class: clsClearableFrm
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Form Size
						Width:  Class Default
						Height: Class Default
						Number of Pages: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalSendMsgToChildren( hWndForm, PAM_Clear, 0, 0 )
				Message Actions
			List Box Class: clsClearableLb
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalListClear( hWndItem )
				List Initialization
				Message Actions
					On SAM_AnyEdit
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On SAM_Click
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On PAM_Dirty
						Call SalSendMsg( hWndForm, PAM_Dirty, wParam, lParam )
			Multiline Field Class: clsClearableMl
				Data
					Maximum Data Length: Class Default
					String Type: Class Default
					Editable? Class Default
				Display Settings
					Border? Class Default
					Word Wrap? Class Default
					Vertical Scroll? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalClearField( hWndItem )
				Message Actions
					On SAM_AnyEdit
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On PAM_Dirty
						Call SalSendMsg( hWndForm, PAM_Dirty, wParam, lParam )
			Option Button Class: clsClearableOb
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Button Style: Radio
				Image Style: Single
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Button Appearance: Class Default
				Description:
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Set MyValue = FALSE
				Message Actions
					On SAM_Click
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On PAM_Dirty
						Call SalSendMsg( hWndForm, PAM_Dirty, wParam, lParam )
			Radio Button Class: clsClearableRb
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Set MyValue = FALSE
				Message Actions
					On SAM_Click
						Call SalSendMsg( hWndItem, PAM_Dirty, wParam, lParam )
					On PAM_Dirty
						Call SalSendMsg( hWndForm, PAM_Dirty, wParam, lParam )
			Table Window Class: clsClearableTbl
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalTblReset( hWndItem )
				Message Actions
			Picture Class: clsClearablePic
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				File Name:
				Storage: Class Default
				Picture Transparent Color: Class Default
				Fit: Class Default
				Scaling
					Width:  Class Default
					Height:  Class Default
				Corners: Class Default
				Border Style: Class Default
				Border Thickness: Class Default
				Tile To Parent? Class Default
				Border Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsClearableObject
				Class Variables
				Instance Variables
				Functions
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalPicClear( hWndItem )
				Message Actions
			! ----------------------------------------------------------------------------------------------------------------------------------------
			!
			! Classes in COMBOBOX.APL --------------------------------------------------------------------------------------------
			Functional Class: clsTableCache
				Description: Cache voor één lijst. Voor elke lijst wordt de sleutel, de nederlandse  en de franse tekst bijgehouden.
				Derived From
				Class Variables
				Instance Variables
					String: isTableName
					String: isDbTableName
					String: isSelectStmt
					String: isWhereClause
					String: isOrderByClauseNL
					String: isOrderByClauseFR
					String: isElements[ * , 4 ]
					Boolean: ibFilled
					Boolean: ibPopulated
					Number: inLanguage
					Number: inElementCount
				Functions
					Function: Init
						Description: Initialiseer de table cache.
						Returns
							Boolean:
						Parameters
							Sql Handle: phSql
							String: psTableName
							String: psDbTableName
							String: psSelectStmt
							String: psWhereClause
							String: psOrderByClauseNL
							String: psOrderByClauseFR
						Static Variables
						Local variables
						Actions
							Call SetTableName( psTableName )
							Call SetDbTableName( psDbTableName )
							Set ibFilled = FALSE
							Set ibPopulated = FALSE
							Set inLanguage = gnLanguage
							Call SetSql ( psSelectStmt , psWhereClause, psOrderByClauseNL, psOrderByClauseFR )
							! Return TRUE
							Return Fill ( phSql )
					Function: __InitI
						Description: Initialiseer de table cache.
						Returns
							Boolean:
						Parameters
							String: psTableName
						Static Variables
						Local variables
						Actions
							Call SetTableName( psTableName )
							Set ibFilled = FALSE
							Set ibPopulated = FALSE
							Set inLanguage = gnLanguage
							Return TRUE
							! Return Fill ( phSql )
					Function: SetTableName
						Description:
						Returns
						Parameters
							String: psTableName
						Static Variables
						Local variables
						Actions
							Set isTableName = psTableName
					Function: SetDbTableName
						Description:
						Returns
						Parameters
							String: psDbTableName
						Static Variables
						Local variables
						Actions
							Set isDbTableName = psDbTableName
					Function: SetSql
						Description:
						Returns
						Parameters
							String: psSql
							String: psWhereClause
							String: psOrderByClauseNL
							String: psOrderByClauseFR
						Static Variables
						Local variables
						Actions
							Set isSelectStmt = psSql
							Set isWhereClause =  psWhereClause
							Set isOrderByClauseNL =  psOrderByClauseNL
							Set isOrderByClauseFR =  psOrderByClauseFR
					Function: GetTableName
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isTableName
					Function: GetDbTableName
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isDbTableName
					Function: GetSelectStmt
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isSelectStmt
					Function: GetWhereClause
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isWhereClause
					Function: GetOrderByClauseNL
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isOrderByClauseNL
					Function: GetOrderByClauseFR
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isOrderByClauseFR
					Function: Clear
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalArraySetUpperBound ( isElements , 1, -1 )
							Set inElementCount = 0
					Function: Fill
						Description:
						Returns
							Boolean:
						Parameters
							Sql Handle: phSql
						Static Variables
						Local variables
							Number: lnFetchInd
							Boolean: lbOK
							Number: lnCounter
							String: lsSqlStmt
							String: lsElem1
							String: lsElem2
							String: lsElem3
							String: lsElem4
							Number: lnError
							String: lsErrorMessage
						Actions
							Select Case gnLanguage
								Case Language_NL
									Set lsSqlStmt = isSelectStmt || ' INTO  :lsElem1, :lsElem2, :lsElem3, :lsElem4 FROM ' || 
												isDbTableName || isWhereClause || isOrderByClauseNL
									Break
								Case Language_FR
									Set lsSqlStmt = isSelectStmt || ' INTO  :lsElem1, :lsElem2, :lsElem3, :lsElem4 FROM ' || 
												isDbTableName || isWhereClause || isOrderByClauseFR
									Break
								Default
									Break
							If gbDynSqlDebug
								Call SalModalDialog( dlgDebugDynSql, hWndForm, lsSqlStmt, TRUE )
							When SqlError
								Set lnError = SqlError( phSql )
								Call SqlGetErrorText( lnError, lsErrorMessage )
								Call PalLogErrorInFile( PalGetItemName( hWndForm )  || ' - '  || lsErrorMessage || ' 
										SQL: ' || lsSqlStmt   )
								Return TRUE
							Set lbOK = SqlPrepareAndExecute( phSql , lsSqlStmt )
							Call SqlGetResultSetCount( phSql, inElementCount )
							Call SalArraySetUpperBound ( isElements , 1 , inElementCount )
							If lbOK
								Set lnCounter = 0
								While SqlFetchNext ( phSql, lnFetchInd )
									Set isElements[lnCounter,0] = lsElem1
									Set isElements[lnCounter,1] = lsElem2
									Set isElements[lnCounter,2] = lsElem3
									Set isElements[lnCounter,3] = lsElem4
									Set lnCounter = lnCounter + 1
								Set ibFilled = TRUE
							Return lbOK
					Function: GetElementCount
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
						Actions
							Return inElementCount
					Function: GetElement
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnElement
							Receive String: psItem1
							Receive String: psItem2
							Receive String: psItem3
							Receive String: psItem4
						Static Variables
						Local variables
						Actions
							If pnElement >= GetElementCount(  )
								Call SalMessageBox( 'Selection of an item in combo box or list box exceeds the upperbound of the cache.', 'Development Error', MB_Ok )
								Return FALSE
							Else
								Set psItem1 = isElements[ pnElement , 0 ]
								Set psItem2 = isElements[ pnElement , 1 ]
								Set psItem3 = isElements[ pnElement , 2 ]
								Set psItem4 = isElements[ pnElement , 3 ]
								Return TRUE
					Function: FindElement1
						Description: Zoek op basis van code de nederlandse en franse tekst. 
								Indien gevonden, return TRUE; anders FALSE
						Returns
							Boolean:
						Parameters
							Receive Number: pnIndex
							String: psItem1
							Receive String: psItem2
							Receive String: psItem3
							Receive String: psItem4
						Static Variables
						Local variables
							Number: lnTeller
						Actions
							While lnTeller < GetElementCount(  )
								If SalStrUpperX(  isElements[ lnTeller , 0 ] ) = SalStrUpperX( psItem1 )
									Set pnIndex = lnTeller
									Set psItem2 = isElements[ lnTeller , 1 ]
									Set psItem3 = isElements[ lnTeller , 2 ]
									Set psItem4 = isElements[ lnTeller , 3 ]
									Return TRUE
								Set lnTeller = lnTeller + 1
							Return FALSE
					Function: FindElement2
						Description: Zoek op basis van de nederlandse tekst , de code en franse tekst. 
								Indien gevonden, return TRUE; anders FALSE
						Returns
							Boolean:
						Parameters
							Receive Number: pnIndex
							Receive String: psItem1
							String: psItem2
							Receive String: psItem3
							Receive String: psItem4
						Static Variables
						Local variables
							Number: lnTeller
						Actions
							While lnTeller < GetElementCount(  )
								If SalStrUpperX( isElements[ lnTeller , 1 ] ) = SalStrUpperX( psItem2 )
									Set pnIndex = lnTeller
									Set psItem1 = isElements[ lnTeller , 0 ]
									Set psItem3 = isElements[ lnTeller , 2 ]
									Set psItem4 = isElements[ lnTeller , 3 ]
									Return TRUE
								Set lnTeller = lnTeller + 1
							Return FALSE
					Function: FindElement3
						Description: Zoek op basis van de nederlandse tekst , de code en franse tekst. 
								Indien gevonden, return TRUE; anders FALSE
						Returns
							Boolean:
						Parameters
							Receive Number: pnIndex
							Receive String: psItem1
							Receive String: psItem2
							String: psItem3
							Receive String: psItem4
						Static Variables
						Local variables
							Number: lnTeller
						Actions
							While lnTeller < GetElementCount(  )
								If SalStrUpperX( isElements[ lnTeller , 2 ] ) = SalStrUpperX( psItem3 )
									Set pnIndex = lnTeller
									Set psItem1 = isElements[ lnTeller , 0 ]
									Set psItem2 = isElements[ lnTeller , 1 ]
									Set psItem4 = isElements[ lnTeller , 3 ]
									Return TRUE
								Set lnTeller = lnTeller + 1
							Return FALSE
					!
					!
					! /@@@@@ Modification LS : 16/01/2002
					!
					! Le but de la fonction ci-dessous est de sélectionner le premier élément dans la liste, sans que l'on 
					! ait besoin de connaitre le code ce celui-ci.
					!
					Function: First
						Description: Zoek op basis van code de nederlandse en franse tekst. 
								Indien gevonden, return TRUE; anders FALSE
						Returns
							Boolean:
						Parameters
							Receive Number: pnIndex
							Receive String: psItem1
							Receive String: psItem2
							Receive String: psItem3
							Receive String: psItem4
						Static Variables
						Local variables
							Number: lnTeller
						Actions
							If GetElementCount(  ) >= 0
								Set pnIndex = 0
								Set psItem1 = isElements[ pnIndex , 0 ]
								Set psItem2 = isElements[ pnIndex , 1 ]
								Set psItem3 = isElements[ pnIndex , 2 ]
								Set psItem4 = isElements[ pnIndex , 3 ]
								Return TRUE
							Return FALSE
					Function: AddData
						Description:
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: ps1
							String: ps2
							String: ps3
							String: ps4
						Static Variables
						Local variables
							Number: lnFetchInd
							Boolean: lbOK
							Number: lnCounter
							String: lsSqlStmt
							String: lsElem1
							String: lsElem2
							String: lsElem3
							String: lsElem4
							Number: lnError
							String: lsErrorMessage
						Actions
							Set lnCounter = inElementCount 
							Set inElementCount = inElementCount + 1
							Call SalArraySetUpperBound ( isElements , 1 , inElementCount )
							Call SetTableName( psTableName )
							Set ibFilled = TRUE
							Set ibPopulated = TRUE
							Set inLanguage = gnLanguage
							Set isElements[lnCounter,0] = ps1
							Set isElements[lnCounter,1] = ps2
							Set isElements[lnCounter,2] = ps3
							Set isElements[lnCounter,3] = ps4
							Return TRUE
			Functional Class: clsCachePool
				Description:
				Derived From
				Class Variables
					FunctionalVar: cuCaches[ * ]
						Class: clsTableCache
					Sql Handle: chSql
					Number: cnNumCaches
				Instance Variables
				Functions
					Function: Init
						Description: Called at startup
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Set cnNumCaches = 0
							If SqlDatabase != '' 
								When SqlError
									Return FALSE
								Return SqlConnect ( chSql )
							Else
								Return FALSE
					Function: Close
						Description: Called on close
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							While cnNumCaches
								Call cuCaches[ cnNumCaches ].Clear ( )
								Set cnNumCaches = cnNumCaches - 1
							Call SalArraySetUpperBound( cuCaches , 1 , -1)
							Call SalArraySetUpperBound( cuCaches , 2 , -1)
							Call SalArraySetUpperBound( cuCaches , 3 , -1)
							Return SqlDisconnect ( chSql )
					Function: GetCacheIndex
						Description: Gives the number of a specified cache or '0' if the list doesn't exist
						Returns
							Boolean:
						Parameters
							String: psTableName
							Receive Number: pnCacheIndex
						Static Variables
						Local variables
							Number: lnCounter
							Boolean: lbFound
						Actions
							! Set lnCounter = 1
							Set lbFound = FALSE
							While lnCounter < cnNumCaches AND NOT lbFound
								If SalStrUpperX(cuCaches[lnCounter].GetTableName( )) = SalStrUpperX(psTableName)
									Set lbFound = TRUE
									Set pnCacheIndex = lnCounter
								Set lnCounter = lnCounter + 1
							Return lbFound
					Function: AddCache
						Description: Adds a new cache to the cache pool
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psDbTableName
							String: psSelectStmt
							String: psWhereClause
							String: psOrderByClauseNL
							String: psOrderByClauseFR
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If Not GetCacheIndex( psTableName , lnCacheIndex )
								Call cuCaches[ cnNumCaches ].Init( chSql , psTableName , psDbTableName, psSelectStmt , psWhereClause, psOrderByClauseNL, psOrderByClauseFR )
								Set cnNumCaches = cnNumCaches + 1
					Function: __AddCacheI
						Description: Adds a new cache to the cache pool
						Returns
							Boolean:
						Parameters
							String: psTableName
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If Not GetCacheIndex( psTableName , lnCacheIndex )
								Call cuCaches[ cnNumCaches ].__InitI( psTableName  )
								Set cnNumCaches = cnNumCaches + 1
					Function: Populate
						Description: Populates the object from the cache
						Returns
						Parameters
							String: psTableName
						Static Variables
						Local variables
							Number: lni
							Number: lnElementCount
							Number: lnCacheIndex
							String: lsElement1
							String: lsElement2
							String: lsElement3
							String: lsElement4
						Actions
							! Call SalStatusSetText( hWndMDI, 'Populating combobox ' || psTableName || '...' )
							If GetCacheIndex( psTableName , lnCacheIndex )
								If Not cuCaches[ lnCacheIndex ].ibPopulated
									Call cuCaches[ lnCacheIndex ].SetTableName(psTableName)
									If Not cuCaches[ lnCacheIndex ].ibFilled 
										Call cuCaches[ lnCacheIndex ].Fill(chSql)
									If cuCaches[ lnCacheIndex ].inLanguage != gnLanguage
										Call SortCache( psTableName )
										Set cuCaches[ lnCacheIndex ].inLanguage = gnLanguage
									! Call SalMessageBox( 'Populate: ' || psTableName, 'DEBUG', MB_Ok )
									Call ..DeleteAllRows()
									Set lni = 0
									! Call SalStatusSetText( hWndMDI, psTableName )
									Set lnElementCount = cuCaches[ lnCacheIndex ].GetElementCount( )
									While lni < lnElementCount
										Call cuCaches[ lnCacheIndex ].GetElement (lni, lsElement1 , lsElement2 , lsElement3, lsElement4 )
										If lsElement4 = 'Y'
											Set lsElement2 = '# ' || lsElement2 || ' #'
											Set lsElement3 = '# ' || lsElement3 || ' #'
										Call ..AddRow( lsElement1, lsElement2, lsElement3 )
										Set lni = lni + 1
									Set cuCaches[ lnCacheIndex ].ibPopulated = TRUE
							Else
								Call SalMessageBox( 'Combobox for ' || psTableName || ' not initialized in Application startup.' ,' Development error', MB_Ok)
							! Call SalStatusSetText( hWndMDI, '' )
					Function: AddRow
						Description: Late bound for filling object starting from array
						Returns
						Parameters
							String: ps1
							String: ps2
							String: ps3
						Static Variables
						Local variables
						Actions
							Call SalMessageBox( 'Programming Error :' , 'Function "AddRow" not defined for class' , MB_Ok )
					Function: DeleteAllRows
						Description: Late bound function for deleting the list
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: GetElement
						Description: Zoek de elementen op in de cache op basis van de index van de combo box.
						Returns
							Boolean:
						Parameters
							String: psTableName
							Number: pnIndex
							Receive String: psItem1
							Receive String: psItem2
							Receive String: psItem3
							Receive String: psItem4
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If GetCacheIndex(psTableName, lnCacheIndex)
								If cuCaches[lnCacheIndex].GetElement(pnIndex, psItem1, psItem2, psItem3, psItem4 )
									Return TRUE
							Return FALSE
					Function: LookupElement
						Description: Zoek de display values op basis van de code die opgeslagen is in de database.
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psItem1
							Receive Number: pnIndex
							Receive String: psItem2
							Receive String: psItem3
							Receive String: psItem4
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If GetCacheIndex(psTableName, lnCacheIndex)
								If cuCaches[lnCacheIndex].FindElement1(pnIndex, psItem1, psItem2, psItem3, psItem4 )
									Return TRUE
							Return FALSE
					Function: FindFirst
						Description: Zoek de display values op basis van de code die opgeslagen is in de database.
						Returns
							Boolean:
						Parameters
							String: psTableName
							Receive String: psItem1
							Receive Number: pnIndex
							Receive String: psItem2
							Receive String: psItem3
							Receive String: psItem4
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If GetCacheIndex(psTableName, lnCacheIndex)
								If cuCaches[lnCacheIndex].First(pnIndex, psItem1, psItem2, psItem3, psItem4 )
									Return TRUE
							Return FALSE
					Function: IsPopulated
						Description: Zoek de display values op basis van de code die opgeslagen is in de database.
						Returns
							Boolean:
						Parameters
							String: psTableName
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If GetCacheIndex(psTableName, lnCacheIndex)
								If cuCaches[lnCacheIndex].ibPopulated
									Return TRUE
							Return FALSE
					Function: LookupValueNl
						Description: Zoek de display values op basis van de tekst ingegeven in de combobox
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psItem2
							Receive Number: pnIndex
							Receive String: psDbValue
							Receive String: psDbValid
						Static Variables
						Local variables
							Number: lnCacheIndex
							String: lsItem1
							String: lsItem3
							String: lsItem4
						Actions
							If GetCacheIndex(psTableName, lnCacheIndex)
								If cuCaches[lnCacheIndex].FindElement2(pnIndex, lsItem1, psItem2, lsItem3, lsItem4 )
									Set psDbValue = lsItem1
									Set psDbValid = lsItem4
									Return TRUE
							Set psDbValue = ''
							Set psDbValid = ''
							Return FALSE
					Function: LookupValueFr
						Description: Zoek de display values op basis van de tekst ingegeven in de combobox
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psItem3
							Receive Number: pnIndex
							Receive String: psDbValue
							Receive String: psDbValid
						Static Variables
						Local variables
							Number: lnCacheIndex
							String: lsItem1
							String: lsItem2
							String: lsItem4
						Actions
							If GetCacheIndex(psTableName, lnCacheIndex)
								If cuCaches[lnCacheIndex].FindElement3(pnIndex, lsItem1, lsItem2, psItem3, lsItem4 )
									Set psDbValue = lsItem1
									Set psDbValid = lsItem4
									Return TRUE
							Set psDbValue = ''
							Return FALSE
					Function: SortCache
						Description: Sorteer Cache volgens één van de drie elementen van de table cache
						Returns
							Boolean:
						Parameters
							String: psTableName
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If GetCacheIndex( psTableName , lnCacheIndex )
								If cuCaches[ lnCacheIndex ].inLanguage != gnLanguage
									! Call SalMessageBox( 'Sorteren: ' || psTableName, 'DEBUG', MB_Ok )
									Call cuCaches[ lnCacheIndex ].Init( chSql , 
												psTableName , cuCaches[ lnCacheIndex ].GetDbTableName(),
												cuCaches[ lnCacheIndex ].GetSelectStmt() , 
												cuCaches[ lnCacheIndex ].GetWhereClause(), 
												cuCaches[ lnCacheIndex ].GetOrderByClauseNL(),
												cuCaches[ lnCacheIndex ].GetOrderByClauseFR() )
									! Call Populate(psTableName )
									Set cuCaches[ lnCacheIndex ].ibPopulated = FALSE
								Return TRUE
							Else
								Return FALSE
					Function: ModifyCacheWhereClause
						Description: Wijzig cache op basis van een andere where-clause
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: psNewWhereClause
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If GetCacheIndex( psTableName , lnCacheIndex )
								Call cuCaches[ lnCacheIndex ].Init( chSql , 
											psTableName , cuCaches[ lnCacheIndex ].GetDbTableName(),
											cuCaches[ lnCacheIndex ].GetSelectStmt() , 
											psNewWhereClause, 
											cuCaches[ lnCacheIndex ].GetOrderByClauseNL(),
											cuCaches[ lnCacheIndex ].GetOrderByClauseFR() )
								Call Populate(psTableName )
								Return TRUE
							Return FALSE
					Function: SetPopulated
						Description:
						Returns
						Parameters
							String: psTableName
							Boolean: pbPopulated
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If GetCacheIndex( psTableName , lnCacheIndex )
								Set cuCaches[ lnCacheIndex ].ibPopulated = pbPopulated
					!
					!
					!
					Function: AddData
						Description:
						Returns
							Boolean:
						Parameters
							String: psTableName
							String: ps1
							String: ps2
							String: ps3
							String: ps4
						Static Variables
						Local variables
							Number: lnCounter
							Number: lnCacheIndex
							String: lsElement1
							String: lsElement2
							String: lsElement3
							String: lsElement4
						Actions
							Set lsElement1 = ps1
							Set lsElement2 = ps2
							Set lsElement3 = ps3
							Set lsElement4 = ps4
							Call __AddCacheI( psTableName )
							If GetCacheIndex( psTableName , lnCacheIndex )
								Call cuCaches[ lnCacheIndex ].SetTableName(psTableName)
								Call cuCaches[ lnCacheIndex ].AddData( psTableName, ps1, ps2, ps3, ps4 )
								If cuCaches[ lnCacheIndex ].inLanguage != gnLanguage
									Call SortCache( psTableName )
									Set cuCaches[ lnCacheIndex ].inLanguage = gnLanguage
								If lsElement4 = 'Y'
									Set lsElement2 = '# ' || lsElement2 || ' #'
									Set lsElement3 = '# ' || lsElement3 || ' #'
								Call ..AddRow( lsElement1, lsElement2, lsElement3 )
								Set cuCaches[ lnCacheIndex ].ibPopulated = TRUE
								Set cuCaches[ lnCacheIndex ].ibFilled = TRUE
							Return TRUE
					Function: ClearCache
						Description: Called on close
						Returns
							Boolean:
						Parameters
							String: psTableName
						Static Variables
						Local variables
							Number: lnCacheIndex
						Actions
							If GetCacheIndex( psTableName , lnCacheIndex )
								Call cuCaches[ lnCacheIndex ].Clear ( )
								Return TRUE
							Else
								Return FALSE
			Combo Box Class: clsCmbCached
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: 2.0"
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? No
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsCachePool
					Class: clsCmbMultiLanguage
				Class Variables
				Instance Variables
					! PUBLIC
					String: isDbValue
					String: isDbObsolete
					! PRIVATE
					String: isTableName
					Number: inIndex
					String: isItem1
					String: isItem2
					String: isItem3
					String: isItem4
					Boolean: ibClicked
				Functions
					Function: AddRow
						Description:
						Returns
						Parameters
							String: ps1
							String: ps2
							String: ps3
						Static Variables
						Local variables
						Actions
							! Call SalListAdd( hWndItem , ps1|| TAB || ps2 || TAB || ps3 )
							Select Case gnLanguage
								Case Language_NL
									Call SalListInsert( hWndItem, -1, ps2 )
									Break
								Case Language_FR
									Call SalListInsert( hWndItem, -1, ps3 )
									Break
								Default
									Break
					Function: DeleteAllRows
						Description: Late bound function for deleting the list
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalListClear( hWndItem )
					Function: SetTableName
						Description:
						Returns
						Parameters
							String: psTableName
						Static Variables
						Local variables
						Actions
							Set isTableName = psTableName
					Function: LookupDisplayValue
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnCmbIndex
							String: lsLabelNl
							String: lsLabelFr
						Actions
							If clsCmbCached.LookupElement( isTableName, isDbValue, lnCmbIndex, lsLabelNl, lsLabelFr, isDbObsolete )
								If clsCmbCached.IsPopulated(isTableName)
									Call SalListSetSelect( hWndItem, lnCmbIndex)
								Else
									Select Case gnLanguage
										Case Language_NL
											Set MyValue = lsLabelNl
											Break
										Case Language_FR
											Set MyValue = lsLabelFr
											Break
								Return TRUE
							Else
								Set MyValue = ''
								Return FALSE
					Function: First
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnCmbIndex
							String: lsLabelNl
							String: lsLabelFr
						Actions
							If clsCmbCached.FindFirst( isTableName, isDbValue, lnCmbIndex, lsLabelNl, lsLabelFr, isDbObsolete )
								If clsCmbCached.IsPopulated(isTableName)
									Call SalListSetSelect( hWndItem, lnCmbIndex)
								Else
									Select Case gnLanguage
										Case Language_NL
											Set MyValue = lsLabelNl
											Break
										Case Language_FR
											Set MyValue = lsLabelFr
											Break
								Return TRUE
							Else
								Set MyValue = ''
								Return FALSE
					Function: LookupDbValueNl
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnCmbIndex
						Actions
							If clsCmbCached.LookupValueNl( isTableName, MyValue, lnCmbIndex, isDbValue, isDbObsolete  )
								Call SalListSetSelect( hWndItem, lnCmbIndex)
								Return TRUE
							Else
								Return FALSE
					Function: LookupDbValueFr
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: lnCmbIndex
						Actions
							If clsCmbCached.LookupValueFr( isTableName, MyValue, lnCmbIndex, isDbValue, isDbObsolete )
								Call SalListSetSelect( hWndItem, lnCmbIndex)
								Return TRUE
							Else
								Return FALSE
					!
					!
					! /@@@@@ LS : 16/01/2002
					Function: GetLabelFr
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
							Number: lnCmbIndex
							String: lsLabelNl
							String: lsLabelFr
						Actions
							If clsCmbCached.LookupElement( isTableName, isDbValue, lnCmbIndex, lsLabelNl, lsLabelFr, isDbObsolete )
								If clsCmbCached.IsPopulated(isTableName)
									Return lsLabelFr
								Else
									Return lsLabelFr
							Else
								Return ''
					Function: GetLabelNl
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
							Number: lnCmbIndex
							String: lsLabelNl
							String: lsLabelFr
						Actions
							If clsCmbCached.LookupElement( isTableName, isDbValue, lnCmbIndex, lsLabelNl, lsLabelFr, isDbObsolete )
								If clsCmbCached.IsPopulated(isTableName)
									Return lsLabelNl
								Else
									Return lsLabelNl
							Else
								Return ''
					!
					Function: SetValue
						Description:
						Returns
							Boolean:
						Parameters
							String: psValue
						Static Variables
						Local variables
						Actions
							Set isDbValue = psValue
							Return LookupDisplayValue(  )
					Function: GetValue
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
						Actions
							Return isDbValue
				List Initialization
				Message Actions
					On SAM_Create
						Call SetPopulated(isTableName, FALSE)
						!
						Call Populate ( isTableName )
						!
						Set ibClicked = FALSE
					! On SAM_DropDown
						Call Populate ( isTableName )
						Call LookupDisplayValue(  )
						Set ibClicked = FALSE
					On SAM_Click
						Set inIndex = SalListQuerySelection( hWndItem )
						If inIndex!= LB_Err
							If GetElement(isTableName, inIndex, isItem1, isItem2, isItem3, isItem4 )
								If isItem4 != 'Y'
									Set isDbValue = isItem1
									Set isDbObsolete = 'N'
								Else
									Set isDbValue = ''
									Set isDbObsolete = 'Y'
									Call SalListSetSelect( hWndItem, -1 )
							Else
								Set isDbValue = ''
								Set isDbObsolete = ''
							Set ibClicked =  TRUE
							Call SalSendValidateMsg(  )
					On PAM_Language
						Call clsCmbCached.SortCache( isTableName)
						Call LookupDisplayValue()
					On PAM_Clear
						Set isDbValue = ''
						Set isDbObsolete = ''
					On SAM_Validate
						If Not ibClicked
							If MyValue = ''
								Set isDbValue = ''
							Else
								Select Case gnLanguage  
									Case Language_NL
										If LookupDbValueNl()
											Return VALIDATE_Ok
										Else
											Return VALIDATE_Cancel
										Break
									Case Language_FR
										If LookupDbValueFr()
											Return VALIDATE_Ok
										Else
											Return VALIDATE_Cancel
										Break
						Else
							Set ibClicked = FALSE
					On SAM_AnyEdit
						Call SalSendMsg( hWndItem, CB_SHOWDROPDOWN, TRUE, TRUE )
						! Call SalPostMsg( hWndItem, CB_SETEDITSEL, 0, 0x00010001 )
			Column Class: clsColCmbCached
				Title:
				Visible? Class Default
				Editable? Class Default
				Maximum Data Length: Class Default
				Data Type: Class Default
				Justify: Class Default
				Width:  Class Default
				Width Editable? Class Default
				Format: Class Default
				Country: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Cell Options
					Cell Type? Class Default
					Multiline Cell? Class Default
					Cell DropDownList
						Sorted? Class Default
						Vertical Scroll? Class Default
						Auto Drop Down? Class Default
						Allow Text Editing? Class Default
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Class Default
				Description: Column with combo box, cached.
				Derived From
					Class: clsCachePool
					Class: clsColMultiLanguage
				Class Variables
				Instance Variables
					! PRIVATE
					String: isTableName
					Number: inIndex
					String: isItem1
					String: isItem2
					String: isItem3
					String: isItem4
				Functions
					Function: AddRow
						Description:
						Returns
						Parameters
							String: ps1
							String: ps2
							String: ps3
						Static Variables
						Local variables
						Actions
							! Call SalListAdd( hWndItem , ps1|| TAB || ps2 || TAB || ps3 )
							Select Case gnLanguage
								Case Language_NL
									Call SalListInsert( hWndItem, -1, ps2 )
									Break
								Case Language_FR
									Call SalListInsert( hWndItem, -1, ps3 )
									Break
								Default
									Break
					Function: DeleteAllRows
						Description: Late bound function for deleting the list
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							Call SalListClear( hWndItem )
					Function: SetTableName
						Description:
						Returns
						Parameters
							String: psTableName
						Static Variables
						Local variables
						Actions
							Set isTableName = psTableName
					Function: LookupDisplayValue
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnColIDCode
							Receive String: psDbValid
						Static Variables
						Local variables
							Number: lnCmbIndex
							String: lsColText
							String: lsLabelNl
							String: lsLabelFr
						Actions
							Call SalTblGetColumnText( hWndForm, pnColIDCode, lsColText )
							If clsCmbCached.LookupElement( isTableName, lsColText, lnCmbIndex, lsLabelNl, lsLabelFr, psDbValid )
								If clsCmbCached.IsPopulated(isTableName)
									Call SalListSetSelect( hWndItem, lnCmbIndex)
								Else
									Select Case gnLanguage
										Case Language_NL
											Set MyValue = lsLabelNl
											Break
										Case Language_FR
											Set MyValue = lsLabelFr
											Break
								Return TRUE
							Else
								Return FALSE
					Function: SetDbValue
						Description:
						Returns
						Parameters
							Number: pnColIDCode
						Static Variables
						Local variables
						Actions
							Set inIndex = SalListQuerySelection( hWndItem )
							If inIndex != LB_Err
								If GetElement(isTableName, inIndex, isItem1, isItem2, isItem3, isItem4 )
									Call SalTblSetColumnText( hWndForm, pnColIDCode, isItem1 )
				List Values
				Message Actions
					On SAM_Create
						Call SetPopulated(isTableName, FALSE)
						!
						Call Populate ( isTableName )
					On SAM_AnyEdit
						Set inIndex = SalListQuerySelection( hWndItem )
						If inIndex != LB_Err
							If GetElement(isTableName, inIndex, isItem1, isItem2, isItem3, isItem4 )
								If isItem4 = 'Y'
									Set MyValue = ''
					On PAM_Language
						Call clsCmbCached.SortCache( isTableName)
						! Call LookupDisplayValue()
			! ----------------------------------------------------------------------------------------------------------------------------------------
			!
			! Classes in LANGUAGE.APL --------------------------------------------------------------------------------------------
			Functional Class: Language
				Description:
				Derived From
				Class Variables
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							Call SalMessageBox( 'Error', 'The LBF-function is not defined. Please contact your administrator', MB_Ok )
							Return FALSE
			General Window Class: clsMultiLanguage
				Description:
				Derived From
					Class: Language
				Class Variables
				Instance Variables
				Functions
				Message Actions
					On PAM_Language
						Call ..LanguageTranslate(wParam)
			Background Text Class: clsBgdMultiLanguage
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Title:
				Justify: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
			Check Box Class: clsCbMultiLanguage
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowText( hWndItem, sLabel )
								Call SalInvalidateWindow( hWndItem )
								Return TRUE
							Else
								Return FALSE
				Message Actions
			Child Table Class: clsChildTblMultiLanguage
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
					Class: cResizeChildTable
				Contents
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
							Boolean: bResult
						Actions
							Set bResult = FALSE
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowLabelText( hWndItem, sLabel )
								Set bResult = TRUE
							Call SalSendMsgToChildren( hWndItem, PAM_Language, pnLanguage, 0 )
							Return bResult
				Message Actions
			Column Class: clsColMultiLanguage
				Title:
				Visible? Class Default
				Editable? Class Default
				Maximum Data Length: Class Default
				Data Type: Class Default
				Justify: Class Default
				Width:  Class Default
				Width Editable? Class Default
				Format: Class Default
				Country: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Cell Options
					Cell Type? Class Default
					Multiline Cell? Class Default
					Cell DropDownList
						Sorted? Class Default
						Vertical Scroll? Class Default
						Auto Drop Down? Class Default
						Allow Text Editing? Class Default
					Cell CheckBox
						Check Value:
						Uncheck Value:
						Ignore Case? Class Default
				Description:
				Derived From
					Class: clsMultiLanguage
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalTblSetColumnTitle( hWndItem, sLabel )
								Return TRUE
							Else
								Return FALSE
				List Values
				Message Actions
			Combo Box Class: clsCmbMultiLanguage
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Editable? Class Default
				String Type: Class Default
				Maximum Data Length: Class Default
				Sorted? Class Default
				Always Show List? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowLabelText( hWndItem, sLabel )
								Return TRUE
							Else
								Return FALSE
				List Initialization
				Message Actions
			Data Field Class: clsDfMultiLanguage
				Data
					Maximum Data Length: Class Default
					Data Type: Class Default
					Editable? Class Default
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Class Default
					Format: Class Default
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowLabelText( hWndItem, sLabel )
								Return TRUE
							Else
								Return FALSE
				Message Actions
			Dialog Box Class: clsDlgMultiLanguage
				Title:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Type of Dialog: Modal
					Allow Dock to Parent? Class Default
					Docking Orientation: Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Absolute Screen Location? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Resizable? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Derived From
					Class: clsMultiLanguage
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
							Boolean: bResult
						Actions
							Set bResult = FALSE
							If GetLabelLanguage( hWndForm, pnLanguage, sLabel )
								Call SalSetWindowText( hWndForm, sLabel )
								Call SalUpdateWindow( hWndForm )
								Set bResult = TRUE
							Call SalSendMsgToChildren( hWndForm, PAM_Language, pnLanguage, 0 )
							Return bResult
				Message Actions
			Form Window Class: clsFrmMultiLanguage
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Form Size
						Width:  Class Default
						Height: Class Default
						Number of Pages: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
					String: sLabel
				Instance Variables
					String: __GroupboxTranslations[*,4]
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
							Boolean: bResult
						Actions
							Set bResult = FALSE
							If GetLabelLanguage( hWndForm, pnLanguage, sLabel )
								Call SalSetWindowText( hWndForm, sLabel )
								Call SalUpdateWindow( hWndForm )
								Set bResult = TRUE
							Call __TranslateGroupbox( )
							Call SalSendMsgToChildren( hWndForm, PAM_Language, pnLanguage, 0 )
							Call SalSendMsg( hWndForm, PAM_TranslateTabLabels, pnLanguage, 0 )
							Return bResult
					Function: LBFTranslateGroupbox
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
							Number: nMin
							Number: nMax
						Actions
					Function: __TranslateGroupbox
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Number: i
							Number: nMin
							Number: nMax
							Window Handle: whWnd
						Actions
							Call LockWindowUpdate( hWndForm )
							Call SalArrayGetLowerBound( __GroupboxTranslations, 1, nMin )
							Call SalArrayGetUpperBound( __GroupboxTranslations, 1, nMax )
							Set whWnd = SalGetFirstChild( hWndForm, TYPE_GroupBox )
							Set i = 0
							While whWnd != hWndNULL
								Set i = i + 1
								If i <= nMax
									Call SalSetWindowText( whWnd, __GroupboxTranslations[i,gnLanguage] )
								Set whWnd = SalGetNextChild( whWnd, TYPE_GroupBox )
							Call ..LBFTranslateGroupbox( )
							Call LockWindowUpdate( hWndNULL )
					Function: SetGroupboxTranslation
						Description:
						Returns
						Parameters
							Number: pnLng
							Number: pnTabs
							String: psLabel
						Static Variables
						Local variables
						Actions
							Set __GroupboxTranslations[ pnTabs, pnLng ] = psLabel
				Message Actions
					On SAM_CreateComplete
						Call SalPostMsg( hWndMDI, PAM_MenuLanguage, gnLanguage, 0 )
					On SAM_Create
						Call LockWindowUpdate( hWndMDI )
					On SAM_Close
						Call LockWindowUpdate( hWndMDI )
						Call SalPostMsg( hWndMDI, PAM_MenuLanguage, gnLanguage, 0 )
					On SAM_Activate
						Call LockWindowUpdate( hWndMDI )
						Call SalPostMsg( hWndMDI, PAM_MenuLanguage, gnLanguage, 0 )
			List Box Class: clsLbMultiLanguage
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowLabelText( hWndItem, sLabel )
								Return TRUE
							Else
								Return FALSE
				List Initialization
				Message Actions
			MDI Window Class: clsMdiMultiLanguage
				Title:
				Display Settings
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Yes
						Height: Class Default
						Height Editable? Yes
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
				Icon File:
				Accessories Enabled? Class Default
				Visible? Yes
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
							Boolean: bResult
						Actions
							Set bResult = FALSE
							If GetLabelLanguage( hWndMDI, pnLanguage, sLabel )
								Call SalSetWindowText( hWndMDI, sLabel )
								Call SalUpdateWindow( hWndMDI )
								Set bResult = TRUE
							Call SalSendMsgToChildren( hWndMDI, PAM_Language, pnLanguage, 0 )
							Return bResult
				Message Actions
			Multiline Field Class: clsMlMultiLanguage
				Data
					Maximum Data Length: Class Default
					String Type: Class Default
					Editable? Class Default
				Display Settings
					Border? Class Default
					Word Wrap? Class Default
					Vertical Scroll? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowLabelText( hWndItem, sLabel )
								Return TRUE
							Else
								Return FALSE
				Message Actions
			Option Button Class: clsObMultiLanguage
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Button Style: Radio
				Image Style: Single
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Button Appearance: Class Default
				Description:
				Derived From
					Class: clsMultiLanguage
					Class: clsDisableField
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowText( hWndItem, sLabel )
								Call SalUpdateWindow( hWndItem )
								Return TRUE
							Else
								Return FALSE
				Message Actions
			Pushbutton Class: clsPbMultiLanguage
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Yes
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Single
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Button Appearance: Class Default
				Description:
				Derived From
					Class: clsMultiLanguage
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowText( hWndItem, sLabel )
								Call SalUpdateWindow( hWndItem )
								Return TRUE
							Else
								Return FALSE
				Message Actions
			Quest Child Window Class: clsQuestChildWndMultiLanguage
.data INHERITQUEST
0000: 0100
.enddata
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Auto Execute? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Object Links
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
							Boolean: bResult
						Actions
							Set bResult = FALSE
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowLabelText( hWndItem, sLabel )
								Set bResult = TRUE
							Call SalSendMsgToChildren( hWndItem, PAM_Language, pnLanguage, 0 )
							Return bResult
				Message Actions
			Quest Table Window Class: clsQuestTableWndMultiLanguage
				Title:
				Icon File:
				Accessories Enabled? No
				Visible? Class Default
				Display Settings
					Visible at Design time? Yes
					Automatically Created at Runtime? Yes
					Initial State: Normal
					Maximizable? Yes
					Minimizable? Yes
					System Menu? Yes
					Resizable? Yes
					Window Location and Size
						Left:
						Top:
						Width:  Default
						Width Editable? Yes
						Height: Class Default
						Height Editable? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					View: Table
					Allow Row Sizing? No
					Lines Per Row: Default
					Allow Child Docking? Yes
					Docking Orientation: All
				Memory Settings
					Maximum Rows in Memory: Default
					Discardable? No
				Auto Execute? Yes
				Next Class Child Key: 1
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Object Links
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
							Boolean: bResult
						Actions
							Set bResult = FALSE
							If GetLabelLanguage( hWndForm, pnLanguage, sLabel )
								Call SalSetWindowText( hWndForm, sLabel )
								Call SalUpdateWindow( hWndForm )
								Set bResult = TRUE
							Call SalSendMsgToChildren( hWndForm, PAM_Language, pnLanguage, 0 )
							Return bResult
				Message Actions
			Radio Button Class: clsRbMultiLanguage
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
						Actions
							If GetLabelLanguage( hWndItem, pnLanguage, sLabel )
								Call SalSetWindowText( hWndItem, sLabel )
								Call SalInvalidateWindow( hWndItem )
								Return TRUE
							Else
								Return FALSE
				Message Actions
			Table Window Class: clsTblMultiLanguage
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template: ,,,,N,N
				Class DLL Name:
				Description:
				Derived From
					Class: clsMultiLanguage
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
					String: sLabel
				Instance Variables
				Functions
					Function: LanguageTranslate
						Description:
						Returns
							Boolean:
						Parameters
							Number: pnLanguage
						Static Variables
						Local variables
							Boolean: bResult
						Actions
							Set bResult = FALSE
							If GetLabelLanguage( hWndForm, pnLanguage, sLabel )
								Call SalSetWindowText( hWndForm, sLabel )
								Call SalUpdateWindow( hWndForm )
									Set bResult = TRUE
							Call SalSendMsgToChildren( hWndForm, PAM_Language, pnLanguage, 0 )
							Return bResult
				Message Actions
			! ----------------------------------------------------------------------------------------------------------------------------------------
			!
			!
			! Classe pour les ToolTips
			!
			General Window Class: DynaToolTip
				Description:
				Derived From
					! Class: cTableHittest
				Class Variables
				Instance Variables
					! Number: i_nItemHeight
					! Number: i_nTopItem
					! Number: i_nOffset
					! Number: i_nItem
					! Number: i_nPreviousItem
					! Boolean: i_bTipSet
					String: i_sTipText
				Functions
					Function: GetTipText
						Description:
						Returns
							String:
						Parameters
							Number: p_nDataItem
						Static Variables
						Local variables
						Actions
							Return STRING_Null
					Function: GetItemHeight
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
						Actions
							Return -1
					Function: GetTopItem
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
						Actions
							Return -1
					Function: GetOffset
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
						Actions
							Return 0
				Message Actions
					! On SAM_Create
						                         Set i_nPreviousItem = -1
					On WM_MOUSEMOVE
						If i_sTipText != ''
							Call TTAddTool( hWndItem, i_sTipText,  i_sTipText )
			Pushbutton Class: DynaToolTipPushbutton
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Yes
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Single
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Button Appearance: Class Default
				Description:
				Derived From
					Class: DynaToolTip
					Class: cQuickTipPushbutton
				Class Variables
				Instance Variables
				Functions
					! Function: GetTipText
						Description: 
						Returns 
							String: 
						Parameters 
							Number: p_nDataItem
						Static Variables 
						Local variables 
						Actions 
							Return i_sTipText
					! Function: SetTipText
						Description: 
						Returns 
						Parameters 
							String: psText_NL
							String: psText_FR
							String: psText_DE
						Static Variables 
						Local variables 
							String: s
						Actions 
							Select Case gnLanguage
								Case Language_NL
									Set s = psText_NL
									Break 
								Case Language_DE
									Set s = psText_DE
									Break 
								Default 
									Set s = psText_FR
									Break 
							Call cQuickTipPushbutton.AddTool( hWndItem, s, s, FALSE )
					Function: SetTipText
						Description:
						Returns
						Parameters
							String: ps
						Static Variables
						Local variables
							String: s
						Actions
							! Select Case gnLanguage
								Case Language_NL
									Set s = psText_NL
									Break 
								Case Language_DE
									Set s = psText_DE
									Break 
								Default 
									Set s = psText_FR
									Break 
							Call cQuickTipPushbutton.AddTool( hWndItem, ps, ps, FALSE )
				Message Actions
			!
			!
			!
			! !
			! ! resize and align:
			! !
			! ! What is "resizing"?
				! "Resizing" means, that a control (like table windows, listboxes, etc.) changes its
						  size whenever the form changes its size. The control's borders maintain a fixed
						  distance to the right or bottom border of the parent window.
			! ! What is "aligning"?
				! "Aligning" means, that a control changes its relative position to the top or the
						  bottom (or both) of the parent form, whenever its parent form's size changes. The
						  controls maintain a fixed distance to the right or bottom border of the parent window.
			! ! How can I achieve this?
				! First you have to derive a class (for example a child table) from cControlParent and
						  drop it on a cFormWindow. Then call the Init-functions of the control during creation
						  of the form. If you want a minimum size or position for the control, call SetMinInfo()
						  additionally. That's all
			! !
			General Window Class: cResizeControlParent
				Description: Use this as a common parent for all controls that need to
						handle resizing of the parent form.
				Derived From
				Class Variables
				Instance Variables
					! internal variables:
					Boolean: m_ResizeRight
					Boolean: m_ResizeBottom
					Boolean: m_AlignWidth
					Boolean: m_AlignHeight
					Number: m_DX	! distance to the right border of the parent form
					Number: m_DY	! distance to the bottom border of the parent form
					Number: m_MinX	! minimum x-position or minimum-width (depends on fStyle)
					Number: m_MinY	! minimum y-position or minimum-height (depends on fStyle)
					Number: m_LastW	! store last width
					Number: m_LastH	! store last height
				Functions
					!
					! Initialize the control:
					Function: InitResize_Move
						Description: Call InitResize_Move( bResizeRight, bResizeBottom )
								<bResizeRight>	TRUE: resize width, when parent's width changes
								<bResizeBottom>	TRUE: resize height, when parent's height changes
								
								Use this function to define the resize parameters.
								Depending on the parameters the control maintains it's size
								relatively to the right/bottom border of the parent form
						Returns
						Parameters
							Boolean: ResizeRight
							Boolean: ResizeBottom
						Static Variables
						Local variables
							! helpers:
							Number: x
							Number: y
							Number: w
							Number: h
						Actions
							! set Style according to parameters:
							Set m_ResizeRight = ResizeRight
							Set m_ResizeBottom = ResizeBottom
							! where am I and who's my parent form?
							Call SalGetWindowLoc( hWndItem, x, y )
							Call SalGetWindowSize( SalParentWindow( hWndItem ), w, h )
							! store the distance from right/bottom border for later use:
							Set m_DX = w - x
							Set m_DY = h - y
					Function: InitResize_Align
						Description: Call InitResize_Align( bAlignWidth, bAlignHeight )
								<bAlignWidth>	TRUE: align x-position, when parent's width changes
								<bAlignHeight>	TRUE: align y-position, when parent's height changes
								
								Use this function to define the align parameters.
								Depending on the parameters the control maintains it's position
								relatively to the right/bottom border of the parent form
						Returns
						Parameters
							Boolean: AlignWidth
							Boolean: AlignHeight
						Static Variables
						Local variables
							! helpers:
							Number: x
							Number: y
							Number: w
							Number: h
							Number: pw
							Number: ph
						Actions
							! set Style according to parameters:
							Set m_AlignWidth = AlignWidth
							Set m_AlignHeight = AlignHeight
							! where am I, who's my parent form and how big am I?
							Call SalGetWindowLoc( hWndItem, x, y )
							Call SalGetWindowSize( SalParentWindow( hWndItem ), pw, ph )
							Call SalGetWindowSize( hWndItem, w, h )
							! store distance from borders:
							Set m_DX = pw - (x + w)
							Set m_DY = ph - (y + h)
							! set minimum values to default:
							Set m_MinX = 0.2
							Set m_MinY = 0.2
					!
					! set the minimum X/Y positions or minimum width/height:
					Function: SetMinInfo
						Description: Call SetMinInfo( nMinX, nMinY )
								if initialized via InitResize_Move, MinX/MinY are minimum positions
								if initialized via InitResize_Align, MinX/MinY are minimum sizes
						Returns
						Parameters
							Number: MinX
							Number: MinY
						Static Variables
						Local variables
						Actions
							Set m_MinX = MinX
							Set m_MinY = MinY
					Function: SetMinInfoPos
						Description: Call SetMinInfo( nMinX, nMinY )
								if initialized via InitResize_Move, MinX/MinY are minimum positions
								if initialized via InitResize_Align, MinX/MinY are minimum sizes
						Returns
						Parameters
						Static Variables
						Local variables
							Number: MinX
							Number: MinY
						Actions
							Call SalGetWindowLoc( hWndItem, MinX, MinY )
							Call SetMinInfo( MinX, MinY )
					Function: SetMinInfoSize
						Description: Call SetMinInfo( nMinX, nMinY )
								if initialized via InitResize_Move, MinX/MinY are minimum positions
								if initialized via InitResize_Align, MinX/MinY are minimum sizes
						Returns
						Parameters
						Static Variables
						Local variables
							Number: MinX
							Number: MinY
						Actions
							Call SalGetWindowSize( hWndItem, MinX, MinY )
							Call SetMinInfo( MinX, MinY )
					!
					! internal:
					Function: __OnFormResize
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							! and again we need some helpers:
							Number: w
							Number: h
							Number: NewX
							Number: NewY
							Number: NewW
							Number: NewH
						Actions
							! At first we need the current size of our parent window:
							Call SalGetWindowSize( SalParentWindow( hWndItem ), w, h )
							! I that size didn't change, we don't need to do anything:
							If (w != m_LastW) or (h != m_LastH)
								! save current width/height of parent form for the next time:
								Set m_LastW = w
								Set m_LastH = h
								! Is this a "glue" control?
								If m_ResizeRight or m_ResizeBottom
									! where am I?
									Call SalGetWindowLoc( hWndItem, NewX, NewY )
									! if glued to right border, then calculate new x-position
									If m_ResizeRight
										Set NewX = w - m_DX
										If (m_MinX > 0) and (NewX < m_MinX)
											Set NewX = m_MinX
									! if glued to bottomt border, then calculate new y-position
									If m_ResizeBottom
										Set NewY = h - m_DY
										If (m_MinY > 0) and (NewY < m_MinY)
											Set NewY = m_MinY
									! now set the new position and repaint myself:
									Call SalSetWindowLoc( hWndItem, NewX, NewY )
									Call SalInvalidateWindow( hWndItem )
								! is this a "resize" control?
								If m_AlignWidth or m_AlignHeight
									! where am I and how big am I?
									Call SalGetWindowSize( hWndItem, NewW, NewH )
									Call SalGetWindowLoc( hWndItem, NewX, NewY )
									! if width aligned, then calculate new width
									If m_AlignWidth
										Set NewW = __Max( m_MinX, w - NewX - m_DX )
									! if height aligned, then calculate new height
									If m_AlignHeight
										Set NewH = __Max( m_MinY, h - NewY - m_DY )
									! now set the new width and repaint myself:
									Call SalSetWindowSize( hWndItem, NewW, NewH )
									Call SalInvalidateWindow( hWndItem )
								! we're done.
					Function: __Max
						Description: returns the higher one of two given numbers
						Returns
							Number:
						Parameters
							Number: N1
							Number: N2
						Static Variables
						Local variables
						Actions
							If N1 > N2
								Return N1
							Return N2
				Message Actions
					On PM_FORM_RESIZED
						! This Message handler get's called by the parent form (if the
								  form is derived from cFormWindow) every time, the size of
								  the parent form has changed.
						! /##### LS : 18/08/2003
						Call __OnFormResize()
						! \##### LS : 18/08/2003
			Form Window Class: cResizeFormWindow
				Title:
				Icon File:
				Accessories Enabled? Class Default
				Visible? Class Default
				Display Settings
					Display Style? Class Default
					Visible at Design time? Yes
					Automatically Created at Runtime? Class Default
					Initial State: Class Default
					Maximizable? Class Default
					Minimizable? Class Default
					Allow Child Docking? Class Default
					Docking Orientation: Class Default
					System Menu? Class Default
					Resizable? Class Default
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Form Size
						Width:  Class Default
						Height: Class Default
						Number of Pages: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description: Class to be used as the parent of a resizable form.
						It handles the WM_SIZE (0x0005) message and informs all the child
						controls when the parent size has changed. It also avoids
						unnecessary resizing during the creation process.
						
						Important:
						  SAM_Create and SAM_CreateComplete are implemented which means
						  you have to place SalSendClassMessage( SAM_..., wParam, lParam )
						  in overriden message actions.
				Derived From
				Menu
				Tool Bar
					Display Settings
						Display Style? Default
						Location? Top
						Visible? Yes
						Size: Default
						Size Editable? Yes
						Docking Toolbar? Class Default
						Toolbar Docking Orientation: Class Default
						Font Name: Default
						Font Size: Default
						Font Enhancement: Default
						Text Color: Default
						Background Color: Class Default
						Resizable? Class Default
					Contents
				Contents
				Class Variables
				Instance Variables
					! needed to suppress resizing during creation of the parent form:
					Number: iv_nArrGroupBox_hWnd[*]		! Window handles of group boxes in number format
					Boolean: iv_bArrGroupBox_ResizeRight[*]
					Boolean: iv_bArrGroupBox_ResizeBottom[*]
					Boolean: iv_bArrGroupBox_AlignWidth[*]
					Boolean: iv_bArrGroupBox_AlignHeight[*]
					Number: iv_nArrGroupBox_DX[*]		! distance to the right border of the parent form
					Number: iv_nArrGroupBox_DY[*]		! distance to the bottom border of the parent form
					Number: iv_nArrGroupBox_MinX[*]		! minimum x-position or minimum-width (depends on fStyle)
					Number: iv_nArrGroupBox_MinY[*]		! minimum y-position or minimum-height (depends on fStyle)
					Number: iv_nArrGroupBox_LastW[*]	! store last width
					Number: iv_nArrGroupBox_LastH[*]	! store last height
					! Added to save the initial size of form window
					Number: iv_ParentWindow_Width
					Number: iv_ParentWindow_Height
					!
					Number: iv_Tmp1
					Number: iv_Tmp2
				Functions
					! Late Bound Function
					Function: M_InitResize_GroupBoxes
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Window Handle: lhWndGroupBox
							Number: lnSeq
							!
							Number: lnWidth
							Number: lnHeigth
						Actions
							Set lnSeq = 1
							Set lhWndGroupBox = SalGetFirstChild( hWndForm, TYPE_GroupBox )
							While lhWndGroupBox != hWndNULL
								! Define  minimal window size as window size in development environment
								Call SalGetWindowSize( lhWndGroupBox, lnWidth, lnHeigth )
								Call SetMinInfo_OneGroupBox(lhWndGroupBox,  lnWidth, lnHeigth )
								!
								! Set options for each group box, same order as in outline !!
								! Criteria
								If lnSeq = 1
									Call InitResize_Align_OneGroupBox( lhWndGroupBox, TRUE, FALSE )
								! Partner
								If lnSeq = 2
									Call InitResize_Align_OneGroupBox( lhWndGroupBox, TRUE, FALSE )
								! Et cetera.......
								!
								Set lhWndGroupBox =  SalGetNextChild( lhWndGroupBox, TYPE_GroupBox )
								Set lnSeq = lnSeq + 1
					!
					Function: InitResize_Move_OneGroupBox
						Description: Call InitResize_Move( phWndGBox, pbResizeRight, pbResizeBottom )
								<phWndGBox>	Window Handle of group box
								<pbResizeRight>	TRUE: resize width, when parent's width changes
								<pbResizeBottom>	TRUE: resize height, when parent's height changes
								
								Use this function to define the resize parameters.
								Depending on the parameters the control maintains it's size
								relatively to the right/bottom border of the parent form
						Returns
						Parameters
							Window Handle: phWndGbox
							Boolean: pbResizeRight
							Boolean: pbResizeBottom
						Static Variables
						Local variables
							! helpers:
							Number: lnObject_X
							Number: lnObject_Y
							Number: lnParentWidth
							Number: lnParentHeight
							!
							Number: lnIndex
							Number: lnhWndGbNumber
						Actions
							! Find index
							Set lnhWndGbNumber = SalWindowHandleToNumber( phWndGbox )
							Set lnIndex =  VisArrayFindNumber( iv_nArrGroupBox_hWnd, lnhWndGbNumber )
							!
							If lnIndex < 0
								Call SalArrayGetUpperBound( iv_nArrGroupBox_hWnd, 1, lnIndex )
								Call SalArraySetUpperBound( iv_nArrGroupBox_hWnd, 1, lnIndex + 1 )
								Set iv_nArrGroupBox_hWnd[lnIndex] = lnhWndGbNumber
							!
							Set iv_nArrGroupBox_hWnd[lnIndex] = lnhWndGbNumber
							! set Style according to parameters:
							Set iv_bArrGroupBox_ResizeRight[lnIndex] = pbResizeRight
							Set iv_bArrGroupBox_ResizeBottom[lnIndex] = pbResizeBottom
							! where am I and who's my parent form?
							Call SalGetWindowLoc( phWndGbox, lnObject_X, lnObject_Y )
							Call SalGetWindowSize( SalParentWindow( phWndGbox ), lnParentWidth, lnParentHeight )
							! store the distance from right/bottom border for later use:
							Set iv_nArrGroupBox_DX[lnIndex] = lnParentWidth - lnObject_X
							Set iv_nArrGroupBox_DY[lnIndex] = lnParentHeight - lnObject_Y
					Function: InitResize_Align_OneGroupBox
						Description: Call InitResize_Align( bAlignWidth, bAlignHeight )
								<bAlignWidth>	TRUE: align x-position, when parent's width changes
								<bAlignHeight>	TRUE: align y-position, when parent's height changes
								
								Use this function to define the align parameters.
								Depending on the parameters the control maintains it's position
								relatively to the right/bottom border of the parent form
						Returns
						Parameters
							Window Handle: phWndGbox
							Boolean: pbAlignWidth
							Boolean: pbAlignHeight
						Static Variables
						Local variables
							! helpers:
							Number: lnObject_X
							Number: lnObject_Y
							Number: lnObject_Width
							Number: lnObject_Height
							Number: lnParentWidth
							Number: lnParentHeight
							!
							Number: lnIndex
							Number: lnhWndGbNumber
							Number: lnNew
						Actions
							! Find index
							Set lnhWndGbNumber = SalWindowHandleToNumber( phWndGbox )
							Set lnIndex =  VisArrayFindNumber( iv_nArrGroupBox_hWnd, lnhWndGbNumber )
							!
							!
							If lnIndex < 0
								Call SalArrayGetUpperBound( iv_nArrGroupBox_hWnd, 1, lnIndex )
								Call SalArraySetUpperBound( iv_nArrGroupBox_hWnd, 1, lnIndex + 1 )
								Set iv_nArrGroupBox_hWnd[lnIndex] = lnhWndGbNumber
							!
							! set Style according to parameters:
							Set iv_bArrGroupBox_AlignWidth[lnIndex] = pbAlignWidth
							Set iv_bArrGroupBox_AlignHeight[lnIndex] = pbAlignHeight
							! where am I, who's my parent form and how big am I?
							Call SalGetWindowLoc( phWndGbox, lnObject_X, lnObject_Y )
							Call SalGetWindowSize( SalParentWindow( phWndGbox ), lnParentWidth, lnParentHeight )
							Call SalGetWindowSize( phWndGbox, lnObject_Width, lnObject_Height )
							! store distance from borders:
							Set iv_nArrGroupBox_DX[lnIndex] = lnParentWidth - (lnObject_X + lnObject_Width)
							Set iv_nArrGroupBox_DY[lnIndex] = lnParentHeight - (lnObject_Y + lnObject_Height)
							! set minimum values to default:
							Set iv_nArrGroupBox_MinX[lnIndex] = lnObject_Width
							Set iv_nArrGroupBox_MinY[lnIndex] = lnObject_Height
					Function: __OnFormResize_GroupBoxes
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
							Window Handle: lhWndGroupBox
						Actions
							Set lhWndGroupBox = SalGetFirstChild( hWndForm, TYPE_GroupBox )
							While lhWndGroupBox != hWndNULL
								!
								Call __OnFormResize_OneGroupBox(lhWndGroupBox )
								!
								Set lhWndGroupBox =  SalGetNextChild( lhWndGroupBox, TYPE_GroupBox )
					Function: __OnFormResize_OneGroupBox
						Description:
						Returns
						Parameters
							Window Handle: phWndGbox
						Static Variables
						Local variables
							! and again we need some helpers:
							Number: w
							Number: h
							Number: NewX
							Number: NewY
							Number: NewW
							Number: NewH
							!
							Number: lnIndex
							Number: lnhWndGbNumber
						Actions
							! Find index
							Set lnhWndGbNumber = SalWindowHandleToNumber( phWndGbox )
							Set lnIndex =  VisArrayFindNumber( iv_nArrGroupBox_hWnd, lnhWndGbNumber )
							!
							If lnIndex >= 0
								!
								! At first we need the current size of our parent window:
								Call SalGetWindowSize( SalParentWindow( phWndGbox ), w, h )
								! I that size didn't change, we don't need to do anything:
								If (w != iv_nArrGroupBox_LastW[lnIndex]) or (h != iv_nArrGroupBox_LastH[lnIndex])
									! save current width/height of parent form for the next time:
									Set iv_nArrGroupBox_LastW[lnIndex] = w
									Set iv_nArrGroupBox_LastH[lnIndex] = h
									! Is this a "glue" control?
									If iv_bArrGroupBox_ResizeRight[lnIndex] or iv_bArrGroupBox_ResizeBottom[lnIndex]
										! where am I?
										Call SalGetWindowLoc( phWndGbox, NewX, NewY )
										! if glued to right border, then calculate new x-position
										If iv_bArrGroupBox_ResizeRight[lnIndex]
											Set NewX = w - iv_nArrGroupBox_DX[lnIndex]
											If (iv_nArrGroupBox_MinX[lnIndex] > 0) and (NewX < iv_nArrGroupBox_MinX[lnIndex])
												Set NewX = iv_nArrGroupBox_MinX[lnIndex]
										! if glued to bottomt border, then calculate new y-position
										If iv_bArrGroupBox_ResizeBottom[lnIndex]
											Set NewY = h - iv_nArrGroupBox_DY[lnIndex]
											If (iv_nArrGroupBox_MinY[lnIndex] > 0) and (NewY < iv_nArrGroupBox_MinY[lnIndex])
												Set NewY = iv_nArrGroupBox_MinY[lnIndex]
										! now set the new position and repaint myself:
										Call SalSetWindowLoc( phWndGbox, NewX, NewY )
										Call SalInvalidateWindow( phWndGbox )
									! is this a "resize" control?
									If iv_bArrGroupBox_AlignWidth[lnIndex] or iv_bArrGroupBox_AlignHeight[lnIndex]
										! where am I and how big am I?
										Call SalGetWindowSize( phWndGbox, NewW, NewH )
										Call SalGetWindowLoc( phWndGbox, NewX, NewY )
										! if width aligned, then calculate new width
										If iv_bArrGroupBox_AlignWidth[lnIndex]
											Set NewW = __Max( iv_nArrGroupBox_MinX[lnIndex], w - NewX - iv_nArrGroupBox_DX[lnIndex] )
										! if height aligned, then calculate new height
										If iv_bArrGroupBox_AlignHeight[lnIndex]
											Set NewH = __Max( iv_nArrGroupBox_MinY[lnIndex], h - NewY - iv_nArrGroupBox_DY[lnIndex] )
										! now set the new width and repaint myself:
										Call SalSetWindowSize( phWndGbox, NewW, NewH )
										Call SalInvalidateWindow( phWndGbox )
									! we're done.
					Function: SetMinInfo_OneGroupBox
						Description: Call SetMinInfo( nMinX, nMinY )
								if initialized via InitResize_Move, MinX/MinY are minimum positions
								if initialized via InitResize_Align, MinX/MinY are minimum sizes
						Returns
						Parameters
							Window Handle: phWndGbox
							Number: MinX
							Number: MinY
						Static Variables
						Local variables
							!
							Number: lnIndex
							Number: lnhWndGbNumber
						Actions
							! Find index
							Set lnhWndGbNumber = SalWindowHandleToNumber( phWndGbox )
							Set lnIndex =  VisArrayFindNumber( iv_nArrGroupBox_hWnd, lnhWndGbNumber )
							!
							If lnIndex < 0
								Call SalArrayGetUpperBound( iv_nArrGroupBox_hWnd, 1, lnIndex )
							!
							Call SalArrayGetUpperBound( iv_nArrGroupBox_hWnd, 1, lnIndex )
							!
							Set iv_nArrGroupBox_MinX[lnIndex] = MinX
							Set iv_nArrGroupBox_MinY[lnIndex] = MinY
					Function: __Max
						Description: returns the higher one of two given numbers
						Returns
							Number:
						Parameters
							Number: N1
							Number: N2
						Static Variables
						Local variables
						Actions
							If N1 > N2
								Return N1
							Return N2
				Message Actions
					On WM_SIZE
						! Windows message: WM_SIZE = 0x0005. You can create a constant if you like
						! This message handler doesn't do anything while the parent form
								  is inside the creation process.
						Call LockWindowUpdate( hWndForm )
						!
						! Form cannot be smaller than original size (added by wim vanhauwaert)
						Call SalGetWindowSize( hWndForm, iv_Tmp1, iv_Tmp2  )
						If iv_Tmp1 < iv_ParentWindow_Width Or  iv_Tmp2 < iv_ParentWindow_Height
							If iv_Tmp1 < iv_ParentWindow_Width
								Set iv_Tmp1 = iv_ParentWindow_Width
							If iv_Tmp2 < iv_ParentWindow_Height
								Set iv_Tmp2 = iv_ParentWindow_Height
							Call SalSetWindowSize( hWndForm, iv_Tmp1, iv_Tmp2  )
						! inform all child controls about the resizing of the parent form:
						Call SalSendMsgToChildren( hWndForm, PM_FORM_RESIZED, 0, 0 )
						Call __OnFormResize_GroupBoxes( )
						!
						Call LockWindowUpdate( hWndNULL )
					On SAM_Create
						! Set the flag that's used in the WM_SIZE message handler to avoid
								unnecessary resizing during the creation process. The form is not yet visible.
						! Set __bCreating = TRUE
						!
						! Save initial size of form window
						! !Call SalGetWindowSize( hWndForm, iv_ParentWindow_Width, iv_ParentWindow_Height )
						!
						! Init resizable objects
						! !Call SalSendMsgToChildren( hWndForm, PAM_InitResize, 0, 0 )
						! Init resizable groupboxes
						! !Call ..M_InitResize_GroupBoxes( )
					On SW_MAXIMIZE
						Call LockWindowUpdate( hWndForm )
						!
						! inform all child controls about the resizing of the parent form:
						Call SalSendMsgToChildren( hWndForm, PM_FORM_RESIZED, 0, 0 )
						Call __OnFormResize_GroupBoxes( )
						!
						Call LockWindowUpdate( hWndNULL )
			! !
			! ! Examples:
			! !
			! ! The following example controls are derived from cControlParent. None
					  of them implements any actions, they just inherit the resizing capability.
					  If you need other controls to be resized/aligned feel free to derive
					  additional classes.
			Child Table Class: cResizeChildTable
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Next Class Child Key: 0
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: cResizeControlParent
				Contents
				Class Variables
				Instance Variables
				Functions
				Message Actions
			List Box Class: cResizeListBox
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Multiple selection? Class Default
				Sorted? Class Default
				Vertical Scroll? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: cResizeControlParent
				Class Variables
				Instance Variables
				Functions
				List Initialization
				Message Actions
			Pushbutton Class: cResizePushButton
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Yes
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Single
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Button Appearance: Class Default
				Description:
				Derived From
					Class: cResizeControlParent
				Class Variables
				Instance Variables
				Functions
				Message Actions
			Check Box Class: cResizeCheckBox
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: cResizeControlParent
				Class Variables
				Instance Variables
				Functions
				Message Actions
			Radio Button Class: cResizeRadioButton
				Title:
				Window Location and Size
					Left:
					Top:
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: cResizeControlParent
				Class Variables
				Instance Variables
				Functions
				Message Actions
			Data Field Class: cResizeDataField
				Data
					Maximum Data Length: Class Default
					Data Type: Class Default
					Editable? Class Default
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Class Default
					Format: Class Default
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: Class Default
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: cResizeControlParent
				Class Variables
				Instance Variables
				Functions
				Message Actions
			! !
			! !
			! ! end resize and align
			General Window Class: clsDisableField
				Description: Permet de gérer la couleur et l'envoi des caractères dans les zones des fenêtres.
				Derived From
				Class Variables
				Instance Variables
					! /##### 17/10/2003
					! Indique les cas où la zone doit être "grisée"
					Number: inDisableWhen
					! Indique si les couleurs ont été initialisées
					Boolean: ibInit
					! Indique que la zone doit toujours être disablée
					Boolean: ibAlwaysDisable
					! Quand = TRUE, la variable inDIsableWhen indique quand la zone doit être accessible
					Boolean: ibNotWhen
					! Indique si les différentes couleurs pour le texte ont été initialisées
					Boolean: ibInitTextCol[*]
					! Indique si les différentes couleurs pour le fond ont été initialisées
					Boolean: ibInitBackgroundCol[*]
					! Indique les différentes couleurs pour le texte
					Number: inTextColor[*]
					! Indique les différentes couleurs pour le fond
					Number: inBackgroundColor[*]
					! Indique la table qui doit servir à modifier le status des zones
					Number: iwhTable
					! \##### 17/10/2003
				Functions
					! /##### 17/10/2003
					Function: DisableObject
						Description:
						Returns
						Parameters
							Number: nEtat
							Number: nWindow
						Static Variables
						Local variables
						Actions
							If ( iwhTable  = 0 ) or ( iwhTable = nWindow )
								If not ibInit 
									Call ..LBFDisableInit()
									! Set inTextColorOn = COLOR_Black
									! Set inTextColorOff = COLOR_Black
									If not ibInitTextCol[ FALSE ]
										! Set inTextColor[FALSE] = COLOR_Black
										Set inTextColor[FALSE] = DisableDefTextColor( FALSE )
									If not ibInitTextCol[ TRUE ]
										! Set inTextColor[TRUE] = COLOR_Black
										Set inTextColor[TRUE] = DisableDefTextColor( TRUE )
									If not ibInitBackgroundCol[ FALSE ]
										! Set inBackgroundColor[FALSE] = COLOR_Default
										Set inBackgroundColor[FALSE] = DisableDefBackgroundColor( FALSE )
									If not ibInitBackgroundCol[ TRUE ]
										! Set inBackgroundColor[TRUE] = COLOR_Default
										Set inBackgroundColor[TRUE] = DisableDefBackgroundColor( TRUE )
									Set ibInit = TRUE
								If ibAlwaysDisable 
									! Call SalColorSet( hWndItem, COLOR_IndexWindowText, inTextColor[ TRUE ] )
									! Call SalColorSet( hWndItem, COLOR_IndexWindow, inBackgroundColor[ TRUE ] )
									! Call SalDisableWindow( hWndItem )
									! Call PalDisableWindow( hWndItem, TRUE )
									Select Case PalMyDisableWindow( hWndItem, TRUE )
										Case TYPE_DataField
										Case TYPE_MultilineText
										Case TYPE_ComboBox
											Call SalColorSet( hWndItem, COLOR_IndexWindowText, inTextColor[ TRUE ] )
											Call SalColorSet( hWndItem, COLOR_IndexWindow, inBackgroundColor[ TRUE ] )
											Break
										Default
								Else
									Call ..LBFDisableObject( nEtat, nWindow )
					!
					Function: DisableSet
						Description:
						Returns
						Parameters
							Boolean: pbDisable
						Static Variables
						Local variables
						Actions
							If not ibInit 
								Call ..LBFDisableInit()
								! Set inTextColorOn = COLOR_Black
								! Set inTextColorOff = COLOR_Black
								! If not ibInitTextCol[ FALSE ]
									Set inTextColor[FALSE] = COLOR_Black
								! If not ibInitTextCol[ TRUE ]
									Set inTextColor[TRUE] = COLOR_Black
								! If not ibInitBackgroundCol[ FALSE ]
									Set inBackgroundColor[FALSE] = COLOR_Default
								! If not ibInitBackgroundCol[ TRUE ]
									Set inBackgroundColor[TRUE] = COLOR_Default
								If not ibInitTextCol[ FALSE ]
									! Set inTextColor[FALSE] = COLOR_Black
									Set inTextColor[FALSE] = DisableDefTextColor( FALSE )
								If not ibInitTextCol[ TRUE ]
									! Set inTextColor[TRUE] = COLOR_Black
									Set inTextColor[TRUE] = DisableDefTextColor( TRUE )
								If not ibInitBackgroundCol[ FALSE ]
									! Set inBackgroundColor[FALSE] = COLOR_Default
									Set inBackgroundColor[FALSE] = DisableDefBackgroundColor( FALSE )
								If not ibInitBackgroundCol[ TRUE ]
									! Set inBackgroundColor[TRUE] = COLOR_Default
									Set inBackgroundColor[TRUE] = DisableDefBackgroundColor( TRUE )
								Set ibInit = TRUE
							! Call
							Select Case PalMyDisableWindow( hWndItem, pbDisable )
								Case TYPE_DataField
								Case TYPE_MultilineText
								Case TYPE_ComboBox
									Call SalColorSet( hWndItem, COLOR_IndexWindowText, inTextColor[ pbDisable ] )
									Call SalColorSet( hWndItem, COLOR_IndexWindow, inBackgroundColor[ pbDisable ] )
									Break
								Default
					Function: DisableWhen
						Description:
						Returns
						Parameters
							Number: nParam
							Number: nWindow
						Static Variables
						Local variables
						Actions
							Set ibNotWhen = FALSE
							Set inDisableWhen = nParam
							Set iwhTable = nWindow
					Function: DisableNotWhen
						Description:
						Returns
						Parameters
							Number: nParam
							Number: nWindow
						Static Variables
						Local variables
						Actions
							Set inDisableWhen = nParam
							Set ibNotWhen = TRUE
							Set iwhTable = nWindow
					Function: DisableAlways
						Description:
						Returns
						Parameters
							Boolean: bParam
							Number: nWindow
						Static Variables
						Local variables
						Actions
							Set ibAlwaysDisable = bParam
							Set iwhTable = nWindow
					!
					Function: DisableSetTextColor
						Description:
						Returns
						Parameters
							Boolean: bStatus
							Number: nColor
						Static Variables
						Local variables
						Actions
							Set inTextColor[ bStatus ] = nColor
							Set ibInitTextCol[bStatus] = TRUE
							Set ibInit =  iColInit()
					Function: DisableSetBackgroundColor
						Description:
						Returns
						Parameters
							Boolean: bStatus
							Number: nColor
						Static Variables
						Local variables
						Actions
							Set inBackgroundColor[ bStatus ] = nColor
							Set ibInitBackgroundCol[bStatus] = TRUE
							Set ibInit = iColInit()
					!
					Function: DisableIsBackgroundColorSet
						Description:
						Returns
							Boolean:
						Parameters
							Boolean: bEtat
						Static Variables
						Local variables
						Actions
							Return ibInitBackgroundCol[bEtat]
					Function: DisableIsTextColorSet
						Description:
						Returns
							Boolean:
						Parameters
							Boolean: bEtat
						Static Variables
						Local variables
						Actions
							Return ibInitTextCol[bEtat]
					!
					Function: DisablePropIsReadOnly
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
							Number: n
						Actions
							Set n = GetWindowLongA( hWndItem, GWL_STYLE )
							Return ( n & 0x00800 ) != 0
					Function: DisableIsState
						Description: Permet de changer l'état de la zone. 
								
								Il suffit de redéfinir cette fonction dans les classes dérivées pour changer le comportement d'une zone particulière.
						Returns
							Boolean:
						Parameters
							Number: nEtat
						Static Variables
						Local variables
							Boolean: bEtat
						Actions
							Set bEtat = FALSE
							If ( nEtat & inDisableWhen ) = ROW_New
								Set bEtat = not ibNotWhen
							If ( nEtat & inDisableWhen ) = ROW_Edited
								Set bEtat = not ibNotWhen
							If ( nEtat & inDisableWhen ) = ROW_MarkDeleted
								Set bEtat = not ibNotWhen
							If ( nEtat & inDisableWhen ) = ROW_Selected
								Set bEtat = not ibNotWhen
							Return bEtat
					!
					Function: LBFDisableObject
						Description: Permet de changer l'état de la zone. 
								
								Il suffit de redéfinir cette fonction dans les classes dérivées pour changer le comportement d'une zone particulière.
						Returns
						Parameters
							Number: nEtat
							Number: nWindow
						Static Variables
						Local variables
							Boolean: bEtat
						Actions
							Set bEtat = ibNotWhen
							If ( nEtat & inDisableWhen ) = ROW_New
								Set bEtat = not ibNotWhen
							If ( nEtat & inDisableWhen ) = ROW_Edited
								Set bEtat = not ibNotWhen
							If ( nEtat & inDisableWhen ) = ROW_MarkDeleted
								Set bEtat = not ibNotWhen
							If ( nEtat & inDisableWhen ) = ROW_Selected
								Set bEtat = not ibNotWhen
							Select Case PalMyDisableWindow( hWndItem, bEtat )
								Case TYPE_DataField
								Case TYPE_MultilineText
								Case TYPE_ComboBox
									Call SalColorSet( hWndItem, COLOR_IndexWindowText, inTextColor[ bEtat ] )
									Call SalColorSet( hWndItem, COLOR_IndexWindow, inBackgroundColor[ bEtat ] )
									Break
								Default
							! Call PalDisableWindow( hWndItem, bEtat )
							! Call SalColorSet( hWndItem, COLOR_IndexWindowText, inTextColor[ bEtat ] )
							! Call SalColorSet( hWndItem, COLOR_IndexWindow, inBackgroundColor[ bEtat ] )
							! If bEtat
								Call SalDisableWindow( hWndItem )
							! Else
								Call SalEnableWindow( hWndItem )
					Function: LBFDisableInit
						Description: Permet de définir l'initialisation par défaut d'un type de zone.
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							If DisablePropIsReadOnly( )
								Call DisableAlways( TRUE, 0 )
					!
					Function: DisableDefTextColor
						Description:
						Returns
							Number:
						Parameters
							Boolean: pb
						Static Variables
						Local variables
						Actions
							If pb
								Return COLOR_Black
							Else
								Return COLOR_SysWindowText
					Function: DisableDefBackgroundColor
						Description:
						Returns
							Number:
						Parameters
							Boolean: pb
						Static Variables
						Local variables
						Actions
							If pb
								Return COLOR_SysWindow
							Else
								Return COLOR_White
					!
					! Fonctions internes à la gestion de la classe
					!
					!
					Function: iColInit
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return ibInitTextCol[ FALSE ] and ibInitTextCol[ TRUE ] and ibInitBackgroundCol[ FALSE ] and ibInitBackgroundCol[ TRUE ]
					! \##### 17/10/2003
				Message Actions
					! /##### 17/10/2003
					On PAM_DisableField
						Call DisableObject( wParam, lParam )
					! \##### 17/10/2003
			Functional Class: clsTranslateMenu
				Description: Cette classe doit permettre de faciliter la traduction des menus en parcourant les menus séquentiellement.
				Derived From
				Class Variables
				Instance Variables
					!
					!
					Window Handle: wHnd
					Number: hMenu
					Number: nPos
					String: sTrad
					!
					!
					Number: nTraduction
					String: psFileName
					Boolean: bClosed
					!
					!
					!
					FunctionalVar: iclsaMenuItem[*]
						Class: clsTranslateMenuItem
					String: isaMenuIndex[*]
					Number: iNbrMenuItem
					String: inMenuSpecial[*]
					Number: iNbrMenuSpecial
				Functions
					Function: Reset
						Description: Réinitialise les variables pour la traduction des menus.
								
								La fonction retourne un numéro pour l'accès au popup menu principal.
						Returns
							Number:
						Parameters
							Window Handle: pwHnd
						Static Variables
						Local variables
						Actions
							Set wHnd = pwHnd
							Set hMenu = -1
							Set nPos = -1
							Set hMenu = VisMenuGetHandle( wHnd )
							Set nPos = 0
					Function: __Next
						Description: Recherche le point de menu suivant
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: __DecodeTrad
						Description:
						Returns
							String:
						Parameters
							String: psTrad
						Static Variables
						Local variables
							String: lsa[*]
							Number: n
							String: s
						Actions
							Set n = SalStrTokenize( psTrad, '|', '|', lsa )
							If n <= 1
								Set s = psTrad
							Else
								Select Case gnLanguage
									Case Language_NL
									Case Language_DE
										Set s = lsa[1]
										Break
									Default
										Set s = lsa[0]
							If s = ''
								Set s = psTrad
							Return s
					Function: __DecodeTradN
						Description:
						Returns
							String:
						Parameters
							String: psTrad
							Number: i
						Static Variables
						Local variables
							String: lsa[*]
							Number: n
							String: s
						Actions
							Set n = SalStrTokenize( psTrad, '|', '|', lsa )
							If n <= 1
								Set s = psTrad
							Else
								If i < n
									Set s = lsa[i]
								Else
									Set s = ''
							Return s
					Function: __ParamTrad
						Description:
						Returns
							Boolean:
						Parameters
							String: psTrad
							Receive String: prsParam
						Static Variables
						Local variables
							String: lsa[*]
							Number: n
							String: s
						Actions
							Set n = SalStrTokenize( psTrad, '|', '|', lsa )
							If n = 3
								Set prsParam = lsa[2]
							Return n = 3
					!
					!
					!
					! Function: __InitMenuItem
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					! Function: __InitMenuItem2
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					Function: __GetHandleMenu
						Description:
						Returns
							Boolean:
						Parameters
							Number: phMenu
							String: ps
							Receive Number: prhMenu
							Receive Number: prnPos
							Receive String: prsTrad
						Static Variables
						Local variables
							Boolean: bOk
							Number: hMenu
							Number: i
							Number: n
							String: s[*]
							Number: nPos
						Actions
							Set bOk = FALSE
							Set n = SalStrTokenize( ps, '', '.', s )
							If n
								Set hMenu = VisMenuGetHandle( wHnd )
							Else
							Return bOk
					Function: __InitMenuItem
						Description: Traduction du menu
						Returns
						Parameters
							Window Handle: phWnd
						Static Variables
						Local variables
							Number: hMenu
							Number: hPopupMenu
							Number: n
							String: s
							String: s1
							Number: i
							Number: j
							String: s2
						Actions
							If nTraduction > 0
								Set hMenu = VisMenuGetHandle( phWnd )
								Set iNbrMenuItem = -1
								Set iNbrMenuItem = -1
								If hMenu > 0
									Set wHnd = phWnd
									Set n = VisMenuGetCount( hMenu )
									Set i = 0
									While i < n
										Set s = VisMenuGetText( wHnd, hMenu, i )
										If SalStrLength( s )
											Set s = SalFmtFormatNumber( i, '0' )
											Set s1 = VisStrFind( nTraduction, s )
											If s1 != STRING_Null
												Call VisMenuSetText( wHnd, hMenu, i, __DecodeTrad( s1 ) )
												Set iNbrMenuItem = iNbrMenuItem + 1
												Set j = iNbrMenuItem
												Set iclsaMenuItem[j].hMenu = hMenu
												Set iclsaMenuItem[j].nPos = i
												Set iclsaMenuItem[j].nParam = SalStrToNumber( __DecodeTradN( s1, 2 ) )
												Set iclsaMenuItem[j].sLib1 = __DecodeTradN( s1, 0 )
												Set iclsaMenuItem[j].sLib2 = __DecodeTradN( s1, 1 )
												Set iclsaMenuItem[j].sCle = s
												Set s2 = SalNumberToStrX( hMenu, 0 ) || '|' || SalNumberToStrX( i, 0 )
												Set isaMenuIndex[j] = s2
												! Set iNbrMenuSpecial = iNbrMenuSpecial + 1
												! If iclsaMenuItem[j].nParam
													Set inMenuSpecial[ iNbrMenuSpecial ] = s
											Set hPopupMenu = VisMenuGetPopupHandle( hMenu, i )
											If hPopupMenu != NUMBER_Null
												Call __InitMenuItem2( hPopupMenu, s )
										Set i = i + 1
					Function: __InitMenuItem2
						Description: Traduction d'un popup menu
						Returns
						Parameters
							Number: phMenu
							String: psRef
						Static Variables
						Local variables
							Number: hMenu
							Number: hPopupMenu
							Number: n
							String: s
							String: s1
							Number: i
							String: s2
							Number: j
						Actions
							If nTraduction > 0
								If phMenu > 0
									Set n = VisMenuGetCount( phMenu )
									Set i = 0
									While i < n
										Set s = VisMenuGetText( wHnd, phMenu, i )
										If SalStrLength( s )
											Set s = psRef || '.' || SalFmtFormatNumber( i, '0' )
											Set s1 = VisStrFind( nTraduction, s )
											If s1 != STRING_Null
												Call VisMenuSetText( wHnd, phMenu, i, __DecodeTrad( s1 ) )
												Set iNbrMenuItem = iNbrMenuItem + 1
												Set j = iNbrMenuItem
												Set iclsaMenuItem[j].hMenu = phMenu
												Set iclsaMenuItem[j].nPos = i
												Set iclsaMenuItem[j].nParam = SalStrToNumber( __DecodeTradN( s1, 2 ) )
												Set iclsaMenuItem[j].sLib1 = __DecodeTradN( s1, 0 )
												Set iclsaMenuItem[j].sLib2 = __DecodeTradN( s1, 1 )
												Set iclsaMenuItem[j].sCle = s
												Set s2 = SalNumberToStrX( phMenu, 0 ) || '|' || SalNumberToStrX( i, 0 )
												Set isaMenuIndex[j] = s2
												! Set iNbrMenuSpecial = iNbrMenuSpecial + 1
												! If iclsaMenuItem[j].nParam
													Set inMenuSpecial[ iNbrMenuSpecial ] = s
												! If iclsaMenuItem[j].nParam
													Set iNbrMenuSpecial = iNbrMenuSpecial + 1
													Set inMenuSpecial[ iNbrMenuSpecial ] = j
											Set hPopupMenu = VisMenuGetPopupHandle( phMenu, i )
											If hPopupMenu != NUMBER_Null
												! Call __InitMenuItem2( hPopupMenu, psRef || '.' || s )
												Call __InitMenuItem2( hPopupMenu, s )
										Set i = i + 1
					!
					Function: TranslateMenuBar
						Description: Traduction du menu
						Returns
						Parameters
							Window Handle: phWnd
						Static Variables
						Local variables
							Number: hMenu
							Number: hPopupMenu
							Number: n
							String: s
							String: s1
							Number: i
							Boolean: bChecked
							Boolean: bEnabled
							Number: lnMenuItemID
							Number: nState
							String: sParam
							String: sTrad
						Actions
							If nTraduction > 0
								Set hMenu = VisMenuGetHandle( phWnd )
								If hMenu > 0
									Set wHnd = phWnd
									Set n = VisMenuGetCount( hMenu )
									Set i = 0
									While i < n
										Set s = VisMenuGetText( wHnd, hMenu, i )
										Set nState = GetMenuState( hMenu, i, MF_ByPosition )
										Set bEnabled = ( GetMenuState( hMenu, i, MF_ByPosition ) & MF_Grayed ) = 0
										Set bChecked = ( GetMenuState( hMenu, i, MF_ByPosition ) & MF_Checked ) != 0
										If SalStrLength( s )
											Set s1 = VisStrFind( nTraduction, s )
											If s1 != STRING_Null
												Set lnMenuItemID = GetMenuItemID ( hMenu, i )
												If lnMenuItemID = 0xFFFFFFFF
													Call SalMessageBox( 'Function SetSubMenuItemLanguageText:
															Cannot find menu item: ' || s1, 'Development error', MB_Ok | MB_IconExclamation )
													Return FALSE
												Set sTrad = __DecodeTrad( s1 )
												If ModifyMenuA (hMenu, i, MF_ByPosition | MF_STRING, lnMenuItemID ,  sTrad )
													Call DrawMenuBar( wHnd )
												If bChecked
													Call CheckMenuItem( hMenu, i, MF_ByPosition | MF_Checked )
												Else
													Call CheckMenuItem( hMenu, i, MF_ByPosition | MF_Unchecked )
												If bEnabled
													Call EnableMenuItem( hMenu, i, MF_ByPosition | MF_Enabled )
												Else
													Call EnableMenuItem( hMenu, i, MF_ByPosition | MF_Disabled | MF_Grayed )
												! If __ParamTrad( s1, sParam )
													Call TranslateParam( wHnd, hMenu, i, sTrad, sParam )
										Set i = i + 1
					Function: Translate1PopupMenu
						Description: Traduction d'un popup menu
						Returns
						Parameters
							Number: phMenu
							! String: psRef
						Static Variables
						Local variables
							! Number: hMenu
							Number: hPopupMenu
							Number: n
							String: s
							String: s1
							Number: i
							Boolean: bChecked
							Boolean: bEnabled
							Number: lnMenuItemID
							Number: nState
							String: sParam
							Number: nParam
							!
							!
							String: s2
							Number: j
						Actions
							If nTraduction > 0
								If phMenu > 0
									Set n = VisMenuGetCount( phMenu )
									Set i = 0
									While i < n
										Set s = VisMenuGetText( wHnd, phMenu, i )
										Set nState = GetMenuState( phMenu, i, MF_ByPosition )
										If s = '&Quitter'
											Set bChecked = ( GetMenuState( phMenu, i, MF_ByPosition ) & MF_Checked ) != 0
										Set bEnabled = ( GetMenuState( phMenu, i, MF_ByPosition ) & MF_Grayed ) = 0
										Set bChecked = ( GetMenuState( phMenu, i, MF_ByPosition ) & MF_Checked ) != 0
										If SalStrLength( s )
											! Set s1 = VisStrFind( nTraduction, s )
											Set s2 = SalNumberToStrX( phMenu, 0 ) || '|' || SalNumberToStrX( i, 0 )
											Set j = VisArrayFindString( isaMenuIndex, s2 )
											If j >= 0
												Set lnMenuItemID = GetMenuItemID ( phMenu, i )
												If lnMenuItemID = 0xFFFFFFFF
													Call SalMessageBox( 'Function SetSubMenuItemLanguageText:
															Cannot find menu item: ' || s1, 'Development error', MB_Ok | MB_IconExclamation )
													Return FALSE
												Select Case gnLanguage
													Case Language_DE
													Case Language_NL
														Set sTrad = iclsaMenuItem[j].sLib2
														Break
													Default
														Set sTrad = iclsaMenuItem[j].sLib1
												If ModifyMenuA (phMenu, i, MF_ByPosition | MF_STRING, lnMenuItemID , sTrad )
													! Call DrawMenuBar( wHnd )
												If bChecked
													Call CheckMenuItem( phMenu, i, MF_ByPosition | MF_Checked )
												Else
													Call CheckMenuItem( phMenu, i, MF_ByPosition | MF_Unchecked )
												If bEnabled
													Call EnableMenuItem( phMenu, i, MF_ByPosition | MF_Enabled )
													If iclsaMenuItem[j].nParam != 0
														! Call TranslateParam( wHnd, hMenu, i, sTrad, sParam )
														Set hMenu = phMenu
														Set nPos = i
														Call SalSendMsg( wHnd, PAM_TranslateMenu, iclsaMenuItem[j].nParam, 0 )
												Else
													Call EnableMenuItem( phMenu, i, MF_ByPosition | MF_Disabled | MF_Grayed )
										Set i = i + 1
									Call SalDrawMenuBar( wHnd )
					!
					!
					!
					! Function: LBFTranslateParam
						Description:
						Returns
						Parameters
							Window Handle: phWnd
							Number: phMenu
							Number: pnPos
							String: psTrad
							String: psParam
						Static Variables
						Local variables
						Actions
					! Function: LBFClose
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					! Function: LBFInit
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
					! Function: TranslateParam
						Description:
						Returns
						Parameters
							Window Handle: phWnd
							Number: phMenu
							Number: pnPos
							String: psTrad
							String: psParam
						Static Variables
						Local variables
						Actions
							! Call ..LBFTranslateParam( phWnd, phMenu, pnPos, psTrad, psParam )
					! Function: Close
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							! Call ..LBFClose( )
							Set bClosed = TRUE
							Call SalSendMsg( wHnd, PAM_TranslateMenu, PAL_TranslateMenuSys, PAL_TranslateMenuClose )
					!
					!
					!
					!
					Function: TranslateSave
						Description: Traduction du menu
						Returns
						Parameters
							Window Handle: phWnd
							File Handle: pfh
						Static Variables
						Local variables
							Number: hMenu
							Number: hPopupMenu
							Number: n
							String: s
							String: s1
							Number: i
						Actions
							! If nTraduction > 0
							Set hMenu = VisMenuGetHandle( phWnd )
							If hMenu > 0
								Set wHnd = phWnd
								Set n = VisMenuGetCount( hMenu )
								Set i = 0
								While i < n
									Set s = VisMenuGetText( wHnd, hMenu, i )
									If SalStrLength( s )
										Set s1 = SalFmtFormatNumber( i, '0' )
										! Set s1 = VisStrFind( nTraduction, s )
										! If s1 != STRING_Null
											Call VisMenuSetText( wHnd, hMenu, i, s1 )
										Call SalFilePutStr( pfh, '{' || s1 || '}' || s || '|'  || s || '|' )
										Set hPopupMenu = VisMenuGetPopupHandle( hMenu, i )
										If hPopupMenu != NUMBER_Null
											Call TranslatePopupMenuSave( hPopupMenu, s1, pfh )
									Set i = i + 1
					Function: TranslatePopupMenuSave
						Description: Traduction d'un popup menu
						Returns
						Parameters
							Number: phMenu
							String: psRef
							File Handle: pfh
						Static Variables
						Local variables
							Number: hMenu
							Number: hPopupMenu
							Number: n
							String: s
							String: s1
							Number: i
						Actions
							If nTraduction > 0
							If phMenu > 0
								Set n = VisMenuGetCount( phMenu )
								Set i = 0
								While i < n
									Set s = VisMenuGetText( wHnd, phMenu, i )
									If SalStrLength( s )
										Set s1 = psRef || '.' || SalFmtFormatNumber( i, '0' )
										! Set s1 = VisStrFind( nTraduction, s )
										! If s1 != STRING_Null
											Call VisMenuSetText( wHnd, phMenu, i, s1 )
										Call SalFilePutStr( pfh, '{' || s1 || '}' || s || '|' || s || '|' )
										Set hPopupMenu = VisMenuGetPopupHandle( phMenu, i )
										If hPopupMenu != NUMBER_Null
											Call TranslatePopupMenuSave( hPopupMenu, s1, pfh )
									Set i = i + 1
					!
					!
					!
					Function: LoadTranslate
						Description:
						Returns
							Boolean:
						Parameters
							String: psFileName
							Window Handle: whHnd
						Static Variables
						Local variables
						Actions
							Set nTraduction = VisStrLoadTable( psFileName )
							Set wHnd = whHnd
							Call Init( )
							Call __InitMenuItem( whHnd )
							Return not ( nTraduction < 0 )
					Function: TranslateLoaded
						Description:
						Returns
							Boolean:
						Parameters
						Static Variables
						Local variables
						Actions
							Return nTraduction > 0
					Function: Init
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							! Call ..LBFInit( )
							! Set bClosed = FALSE
							If TranslateLoaded( )
								Call SalSendMsg( wHnd, PAM_TranslateMenu, PAL_TranslateMenuSys, PAL_TranslateMenuClose )
							Call SalSendMsg( wHnd, PAM_TranslateMenu, PAL_TranslateMenuSys, PAL_TranslateMenuInit )
							! Call __InitMenuItem( wHnd )
							! Call SalDrawMenuBar( wHnd )
					Function: Translate
						Description: Traduction du menu
						Returns
						Parameters
							Window Handle: phWnd
						Static Variables
						Local variables
							Number: hMenu
							Number: hPopupMenu
							Number: n
							String: s
							String: s1
							Number: i
							String: sParam
						Actions
							If nTraduction > 0
								Set hMenu = VisMenuGetHandle( phWnd )
								If hMenu > 0
									Set wHnd = phWnd
									Set n = VisMenuGetCount( hMenu )
									Set i = 0
									While i < n
										Set s = VisMenuGetText( wHnd, hMenu, i )
										If SalStrLength( s )
											Set s = SalFmtFormatNumber( i, '0' )
											Set s1 = VisStrFind( nTraduction, s )
											If s1 != STRING_Null
												Call VisMenuSetText( wHnd, hMenu, i, __DecodeTrad( s1 ) )
											Set hPopupMenu = VisMenuGetPopupHandle( hMenu, i )
											If hPopupMenu != NUMBER_Null
												Call TranslatePopupMenu( hPopupMenu, s )
											If __ParamTrad( s1, sParam )
												Set ..hMenu = hMenu
												Set nPos = i
												Call SalSendMsg( wHnd, PAM_TranslateMenu, SalStrToNumber( sParam ), 0 )
										Set i = i + 1
							Call SalDrawMenuBar( wHnd )
					Function: TranslatePopupMenu
						Description: Traduction d'un popup menu
						Returns
						Parameters
							Number: phMenu
							String: psRef
						Static Variables
						Local variables
							! Number: hMenu
							Number: hPopupMenu
							Number: n
							String: s
							String: s1
							Number: i
							String: sParam
							Number: nState
							Boolean: bChecked
							Boolean: bEnabled
						Actions
							If nTraduction > 0
								If phMenu > 0
									Set n = VisMenuGetCount( phMenu )
									Set i = 0
									While i < n
										Set s = VisMenuGetText( wHnd, phMenu, i )
										Set nState = GetMenuState( phMenu, i, MF_ByPosition )
										Set bEnabled = ( GetMenuState( phMenu, i, MF_ByPosition ) & MF_Grayed ) = 0
										Set bChecked = ( GetMenuState( phMenu, i, MF_ByPosition ) & MF_Checked ) != 0
										Set bEnabled = bEnabled and VisMenuIsEnabled( phMenu, i )
										If SalStrLength( s )
											Set s = psRef || '.' || SalFmtFormatNumber( i, '0' )
											Set s1 = VisStrFind( nTraduction, s )
											If s1 != STRING_Null
												Set sTrad = __DecodeTrad( s1 )
												Call VisMenuSetText( wHnd, phMenu, i, sTrad )
											Set hPopupMenu = VisMenuGetPopupHandle( phMenu, i )
											If hPopupMenu != 0
												Call TranslatePopupMenu( hPopupMenu, s )
											If bEnabled
												If __ParamTrad( s1, sParam )
													Set hMenu = phMenu
													Set nPos = i
													Call SalSendMsg( wHnd, PAM_TranslateMenu, SalStrToNumber( sParam ), 0 )
											If bChecked
												Call CheckMenuItem( phMenu, i, MF_ByPosition | MF_Checked )
											Else
												Call CheckMenuItem( phMenu, i, MF_ByPosition | MF_Unchecked )
											If bEnabled
												Call EnableMenuItem( phMenu, i, MF_ByPosition | MF_Enabled )
											Else
												Call EnableMenuItem( phMenu, i, MF_ByPosition | MF_Disabled | MF_Grayed )
										Set i = i + 1
					Function: ObjectDestructor
						Description:
						Returns
						Parameters
						Static Variables
						Local variables
						Actions
							! Call Close( )
							If TranslateLoaded( )
								Call SalSendMsg( wHnd, PAM_TranslateMenu, PAL_TranslateMenuSys, PAL_TranslateMenuClose )
							If nTraduction > 0
								Call VisStrFreeTable( nTraduction )
								Set nTraduction = -1
					Function: SetPicture
						Description:
						Returns
						Parameters
							Number: pnPic1
							Number: pnPic2
						Static Variables
						Local variables
							Number: nState
							Boolean: bChecked
							Boolean: bEnabled
						Actions
							Set nState = GetMenuState( hMenu, nPos, MF_ByPosition )
							Set bEnabled = ( GetMenuState( hMenu, nPos, MF_ByPosition ) & MF_Grayed ) = 0
							Set bChecked = ( GetMenuState( hMenu, nPos, MF_ByPosition ) & MF_Checked ) != 0
							Call VisMenuSetPicture( wHnd, hMenu, nPos, pnPic1, pnPic2, sTrad )
							If bChecked
								Call CheckMenuItem( hMenu, nPos, MF_ByPosition | MF_Checked )
							Else
								Call CheckMenuItem( hMenu, nPos, MF_ByPosition | MF_Unchecked )
							If bEnabled
								Call EnableMenuItem( hMenu, nPos, MF_ByPosition | MF_Enabled )
							Else
								Call EnableMenuItem( hMenu, nPos, MF_ByPosition | MF_Disabled | MF_Grayed )
							! Call VisMenuSetFont( TradMenu.wHnd, TradMenu.hMenu, TradMenu.nPos, wnMenuFont, TradMenu.sTrad )
					Function: SetFont
						Description:
						Returns
						Parameters
							Number: pnFont
						Static Variables
						Local variables
							Number: nState
							Boolean: bChecked
							Boolean: bEnabled
						Actions
							! Call VisMenuSetPicture( TradMenu.wHnd, TradMenu.hMenu, TradMenu.nPos, wnPicQuitter, wnPicQuitter, TradMenu.sTrad )
							Set nState = GetMenuState( hMenu, nPos, MF_ByPosition )
							Set bEnabled = ( GetMenuState( hMenu, nPos, MF_ByPosition ) & MF_Grayed ) = 0
							Set bChecked = ( GetMenuState( hMenu, nPos, MF_ByPosition ) & MF_Checked ) != 0
							Call VisMenuSetFont( wHnd, hMenu, nPos, pnFont, sTrad )
							If bChecked
								Call CheckMenuItem( hMenu, nPos, MF_ByPosition | MF_Checked )
							Else
								Call CheckMenuItem( hMenu, nPos, MF_ByPosition | MF_Unchecked )
							If bEnabled
								Call EnableMenuItem( hMenu, nPos, MF_ByPosition | MF_Enabled )
							Else
								Call EnableMenuItem( hMenu, nPos, MF_ByPosition | MF_Disabled | MF_Grayed )
			Functional Class: clsTranslateMenuItem
				Description:
				Derived From
				Class Variables
				Instance Variables
					Number: hMenu
					Number: nPos
					Number: nParam
					String: sLib1
					String: sLib2
					String: sCle
				Functions
			Data Field Class: clsDFCptBanque
				Data
					Maximum Data Length: 14
					Data Type: String
					Editable? Class Default
				Display Settings
					Window Location and Size
						Left:
						Top:
						Width:  1.483"
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Class Default
					Format: Class Default
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: 999-9999999-99
				List in Tool Palette? Yes
				Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
				Class DLL Name:
				Description: Classe pour gérer les comptes bancaires belges
				Derived From
					Class: clsBaseDf
				Class Variables
				Instance Variables
					String: isValue
				Functions
				Message Actions
					On SAM_Validate
						! If SalSendClassMessage(  SAM_Validate, wParam, lParam ) = VALIDATE_Cancel
							Return VALIDATE_Cancel
						If MyValue = '000000000000'
							Return VALIDATE_Ok
						If not PalCheck97( SalStrToNumber( MyValue ) )
							Call PalMessageBox( "Het rekeningnummer is onjuist", "Le numéro de compte est incorrect", "Fout", 'Erreur', MB_Ok )
							! Call SelectionTextDF( hWndItem )
							Return VALIDATE_Cancel
						Return VALIDATE_Ok
			Custom Control Class: clsBaseCalendarDropDown
				DLL Name: C:\CTD30\vti30.dll
				Display Settings
					DLL Name: C:\CTD30\vti30.dll
					MS Windows Class Name:
					Style:  Class Default
					ExStyle:  Class Default
					Title:
					Window Location and Size
						Left:
						Top:
						Width:  Class Default
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Etched Border? Class Default
					Hollow? Class Default
					Vertical Scroll? Class Default
					Horizontal Scroll? Class Default
					Tab Stop? Class Default
					Tile To Parent? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					DLL Settings
				List in Tool Palette? Yes
				Property Template:
				Class DLL Name:
				Description:
				Derived From
					Class: cCalendarDropDown
				Class Variables
				Instance Variables
					String: asMonth[*]
					String: asDay[*]
					Number: __n
				Functions
					Function: GetDate
						Description:
						Returns
							Date/Time:
						Parameters
						Static Variables
						Local variables
							Date/Time: dt
							String: s
						Actions
							Call SalGetWindowText( hWndItem, s, 254 )
							Set dt = SalStrToDate( s )
							Return dt
					Function: GetYear
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
						Actions
							Return SalDateYear( GetDate( ) )
					Function: GetMonth
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
						Actions
							Return SalDateMonth( GetDate( ) )
					Function: GetDay
						Description:
						Returns
							Number:
						Parameters
						Static Variables
						Local variables
						Actions
							Return SalDateDay( GetDate( ) )
					Function: GetDateStr
						Description:
						Returns
							String:
						Parameters
						Static Variables
						Local variables
							Date/Time: dt
							String: s
						Actions
							Set dt = GetDate( )
							Set s = PalDateToStrX( dt )
							Return s
					Function: SetDate
						Description:
						Returns
						Parameters
							Date/Time: pdtDate
						Static Variables
						Local variables
							String: sFmt
							String: s
						Actions
							Call GetPicture( sFmt, 254 )
							Set s = SalFmtFormatDateTime( pdtDate, sFmt )
							Call SalSetWindowText( hWndItem, s )
				Message Actions
					On SAM_Create
						Call SetPicture( 'S' )
						! Set __n = WeekStartGet( )
						! Call WeekStartSet( __n + 1 )
					On PAM_Language
						Select Case gnLanguage
							Case Language_NL
								Set asMonth[0] = 'Januari'
								Set asMonth[1] = 'Februari'
								Set asMonth[2] = 'Maart'
								Set asMonth[3] = 'April'
								Set asMonth[4] = 'Mei'
								Set asMonth[5] = 'Juni'
								Set asMonth[6] = 'Juli'
								Set asMonth[7] = 'Augustus'
								Set asMonth[8] = 'September'
								Set asMonth[9] = 'Oktober'
								Set asMonth[10] = 'November'
								Set asMonth[11] = 'December'
								Set asDay[0] = 'Zo'
								Set asDay[1] = 'Ma'
								Set asDay[2] = 'Di'
								Set asDay[3] = 'We'
								Set asDay[4] = 'Do'
								Set asDay[5] = 'Vr'
								Set asDay[6] = 'Za'
								Break
							Default
								Set asMonth[0] = 'Janvier'
								Set asMonth[1] = 'Février'
								Set asMonth[2] = 'Mars'
								Set asMonth[3] = 'Avril'
								Set asMonth[4] = 'Mai'
								Set asMonth[5] = 'Juin'
								Set asMonth[6] = 'Juillet'
								Set asMonth[7] = 'Août'
								Set asMonth[8] = 'Septembre'
								Set asMonth[9] = 'Octobre'
								Set asMonth[10] = 'Novembre'
								Set asMonth[11] = 'Décembre'
								Set asDay[0] = 'Di'
								Set asDay[1] = 'Lu'
								Set asDay[2] = 'Ma'
								Set asDay[3] = 'Me'
								Set asDay[4] = 'Je'
								Set asDay[5] = 'Ve'
								Set asDay[6] = 'Sa'
						Call SetMonthText( asMonth )
						Call SetWeekDayText( asDay )
		Default Classes
			MDI Window: cBaseMDI
			Form Window: clsBaseFrm
			Dialog Box:
			Table Window:
			Quest Window:
			Data Field:
			Spin Field:
			Multiline Field:
			Pushbutton:
			Radio Button:
			Option Button:
			ActiveX:
			Check Box:
			Child Table: clsBaseCTblMaster
			Quest Child Window: cQuickDatabase
			List Box:
			Combo Box:
			Picture: cQuickPicture
			Vertical Scroll Bar:
			Horizontal Scroll Bar:
			Column:
			Background Text:
			Group Box:
			Line:
			Frame:
			Custom Control: cQuickGraph
		Application Actions
	! DLG_CS_ToolTip: dlgBB_ToolTip
		Description: 
		Tool Bar 
			Contents 
		Contents 
			Data Field: dfTip
				Message Actions 
		Functions 
		Window Parameters 
		Window Variables 
		Message Actions 
	Dialog Box: dlgDebugDynSql
		Class:
		Property Template:
		Class DLL Name:
		Title: Debug: Sql Statement
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? No
			Type of Dialog: Modal
			Allow Dock to Parent? No
			Docking Orientation: All
			Window Location and Size
				Left: 0.875"
				Top: 0.385"
				Width:  8.963"
				Width Editable? Yes
				Height: 4.51"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
			Resizable? No
			Vertical Scroll? Yes
			Horizontal Scroll? Yes
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Docking Toolbar? No
				Toolbar Docking Orientation: Top | Bottom
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Resizable? No
			Contents
		Contents
			Multiline Field: ml1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 10000
					String Type: Long String
					Editable? Yes
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left: 0.088"
						Top: 0.073"
						Width:  8.7"
						Width Editable? Yes
						Height: 3.917"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Message Actions
					On SAM_Create
						Set wsWord = ', '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = VisStrSubstitute( psSqlStmt, wsWord, wsWord  || wsNewLine || wsTab )
						!
						Set wsWord = 'SELECT '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsWord  || wsNewLine  || wsTab)
						!
						Set wsWord = 'INSERT '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsWord  || wsNewLine  || wsTab)
						!
						Set wsWord = 'DELETE '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsWord  || wsNewLine  || wsTab)
						!
						Set wsWord = 'UPDATE '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsWord  || wsNewLine  || wsTab)
						!
						Set wsWord = 'FROM '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsNewLine || wsWord  || wsNewLine  || wsTab)
						!
						Set wsWord = 'WHERE '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsNewLine || wsWord || wsNewLine || wsTab)
						!
						Set wsWord = 'ORDER BY '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsNewLine ||  wsNewLine || wsWord || wsNewLine  || wsTab)
						!
						Set wsWord = ' AND '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = VisStrSubstitute( psSqlStmt, wsWord, ' ' || wsNewLine || SalStrTrimX( wsWord ) || ' ' || wsTab )
						!
						Set wsWord = ' OR '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = VisStrSubstitute( psSqlStmt, wsWord, ' ' || wsNewLine || SalStrTrimX( wsWord ) || ' ' || wsTab )
						!
						Set wsWord = 'INTO '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsNewLine || wsWord || wsNewLine  || wsTab)
						!
						Set wsWord = 'SET '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsNewLine || wsWord || wsNewLine  || wsTab)
						!
						Set wsWord = 'VALUES '
						If SalStrScan( psSqlStmt, wsWord ) >= 0
							Set psSqlStmt = SalStrReplaceX( psSqlStmt, SalStrScan( psSqlStmt, wsWord ), SalStrLength( wsWord ), wsNewLine || wsWord || wsNewLine  || wsTab )
						!
						Set MyValue = psSqlStmt
			Pushbutton: pbClose
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Close
				Window Location and Size
					Left: 3.888"
					Top: 4.073"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Set gbDynSqlDebug = Not cbStop  
						Call SalEndDialog( hWndForm, 0 )
					On SAM_Create
						Call SalSetDefButton( hWndItem )
			Check Box: cb1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Build successfully
				Window Location and Size
					Left: 0.188"
					Top: 4.073"
					Width:  2.8"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Message Actions
			Pushbutton: pbDynSqlDebug
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Default
					Width Editable? Yes
					Height: Default
					Height Editable? Yes
				Visible? No
				Keyboard Accelerator: F1
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Set gbDynSqlDebug = Not gbDynSqlDebug
			Check Box: cbStop
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Stop debug
				Window Location and Size
					Left: 6.688"
					Top: 4.073"
					Width:  1.4"
					Width Editable? Yes
					Height: 0.25"
					Height Editable? Yes
				Visible? Yes
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Message Actions
		Functions
		Window Parameters
			Long String: psSqlStmt
			Boolean: pbSuccess
		Window Variables
			String: wsNewLine
			String: wsTab
			String: wsWord
		Message Actions
			On SAM_Create
				Set wsNewLine = '
						'
				Set wsTab = '	'
			On SAM_CreateComplete
				Set cb1 = pbSuccess
				Call SalSetFocus( pbClose )
				Call SalWaitCursor ( FALSE )
			On SAM_Close
				Call SalWaitCursor ( TRUE )
	Dialog Box: dlgLogin
		Class:
		Property Template:
		Class DLL Name:
		Title: Database Login
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? No
			Type of Dialog: Modal
			Allow Dock to Parent? No
			Docking Orientation: All
			Window Location and Size
				Left: 8.05"
				Top: 1.781"
				Width:  4.867"
				Width Editable? Yes
				Height: 1.397"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
			Resizable? No
			Vertical Scroll? Yes
			Horizontal Scroll? Yes
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Docking Toolbar? No
				Toolbar Docking Orientation: Top | Bottom
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Resizable? No
			Contents
		Contents
			Data Field: dfPath
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left: Default
						Top: Default
						Width:  Default
						Width Editable? Yes
						Height: Default
						Height Editable? Yes
					Visible? No
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
			Pushbutton: pbConnect
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Connect
				Window Location and Size
					Left: 3.283"
					Top: 0.156"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Enter
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						If SalIsNull(dfDatabase ) OR SalIsNull( dfUser ) OR SalIsNull( dfPassword ) 
							Call SalMessageBox( 'Missing field(s)', 'Warning', MB_Ok | MB_IconExclamation )
							Return FALSE
						Call VisWaitCursor( TRUE )
						Set wbConnect = TRUE
						! Call CStructFreeFarMem( nGlobalAlloc )
						! Set sPrgKey = SalStrUpperX( PalGetPrgmName(  ) || '#' || dfDatabase )
						! Call SalSendMsg( SalNumberToWindowHandle( 0xFFFF ), WM_TEST_PRGM, SalWindowHandleToNumber( hWndForm ), nGlobalAlloc )
						Set sPwd = dfPassword
						If wnMin <= wnMax
							Set i = wnMin
							While i <= wnMax
								If SalStrUpperX( dfUser ) = SalStrUpperX( gsALoginPwd[i,0] )
									Set gsALoginPwd[i,2] = sPwd
									Set sPwd = gsALoginPwd[i,1]
									Break
								Set i = i + 1
						If wbConnect
							! Call CStructFreeFarMem( nGlobalAlloc )
							If SqlConnection( ghSqlMain, dfDatabase, dfUser, sPwd )
								Call VisWaitCursor( FALSE )
								Set pbConnected = TRUE
								Call SalEndDialog( hWndForm, TRUE )
						Else
							! Call CStructFreeFarMem( nGlobalAlloc )
						Call VisWaitCursor( FALSE )
			Pushbutton: pbCancel
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: C&ancel
				Window Location and Size
					Left: 3.283"
					Top: 0.49"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Esc
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Set pbConnected = FALSE
						Call SalEndDialog( hWndForm, FALSE )
			Background Text: &Database:
				Resource Id: 4272
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.188"
					Top: 0.198"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Data Field: dfDatabase
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left: 1.283"
						Top: 0.167"
						Width:  1.8"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: 3D Face Color
					Input Mask: Unformatted
				Message Actions
					On SAM_Create
						Set MyValue = psDatabase
					! On SAM_DoubleClick
						If ( ( VisGetKeyState( VK_Control ) & KS_Down ) != 0 ) 
							Call SalModalDialog( dlgListDB, hWndForm, MyValue )
			Background Text: &User ID:
				Resource Id: 4273
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.188"
					Top: 0.548"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Data Field: dfUser
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left: 1.283"
						Top: 0.488"
						Width:  1.8"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
					On SAM_Create
						Set dfUser = psUser
						Call SalSetFocus( hWndItem )
			Background Text: &Password:
				Resource Id: 4274
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.188"
					Top: 0.881"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Data Field: dfPassword
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left: 1.283"
						Top: 0.821"
						Width:  1.8"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Invisible
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
					On SAM_Create
						Set dfPassword = psPassword
						If not SalIsNull( dfUser )
							Call SalSetFocus( hWndItem )
			! /##### : 23/04/2007
			Pushbutton: pb3
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left: 3.363"
					Top: 0.906"
					Width:  1.15"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? No
				Keyboard Accelerator: F10
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						If SalFileOpen( fh, "inscom.txt", OF_Exist )
							If SalModalDialog( __dlgRechINS, hWndForm, rpsIns )
								Set dfDatabase = dfDatabase || rpsIns
			! \##### : 23/04/2007
		Functions
		Window Parameters
			Receive Boolean: pbConnected
			String: psDatabase
			String: psUser
			String: psPassword
			Boolean: pbShowWindow
		Window Variables
			Number: wnLoginTmp
			Number: wnLoop
			String: wsFileName
			File Handle: wfHnd
			String: wsFileNames[*]
			Boolean: wbConnect
			Number: nGlobalAlloc
			!
			!
			!
			Number: wnMin
			Number: wnMax
			Number: i
			String: sPwd
			!
			! /##### : 23/04/2007
			Boolean: bFileExist
			File Handle: fh
			String: rpsIns
			! \##### : 23/04/2007
		Message Actions
			On SAM_CreateComplete
				! Call SalSetFocus( dfUser )
				Call SalSetDefButton( pbConnect )
				! Set nGlobalAlloc = CStructAllocFarMem( 256 )
				Call SalArrayGetLowerBound( gsALoginPwd, 1, wnMin )
				Call SalArrayGetUpperBound( gsALoginPwd, 1, wnMax )
			On SAM_Create
				Call SalCenterWindow( hWndForm )
				If Not pbShowWindow
					Call SalHideWindow( hWndForm )
					Call SalPostMsg( pbConnect, SAM_Click, 0, 0 )
			! On WM_TEST_PRGM
				If hWndForm != SalNumberToWindowHandle( wParam )
					If lParam != 0
						Call SalStrSetBufferLength( sRcvKey, 256 )
						Set sRcvKey = SalStrRepeatX( ' ', 256 )
						Call CStructCopyFromFarMem( lParam, sRcvKey, 255 )
						Call SalMessageBox( sRcvKey || ' - ' || sPrgKey, 'Message WM_TEST_PRGM', MB_Ok )
						If SalStrLeftX( sRcvKey, SalStrLength( sPrgKey ) ) = sPrgKey
							Call SalPostMsg( SalNumberToWindowHandle( wParam ), WM_TEST_PRGM, wParam, SAM_Close )
				Else 
					If lParam = SAM_Close
						Set wbConnect = FALSE
						Call CStructFreeFarMem( nGlobalAlloc )
						Call SalQuit( )
	Dialog Box: dlgSqlError
		Class:
		Property Template:
		Class DLL Name:
		Title: SQL Error
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? No
			Type of Dialog: Modal
			Allow Dock to Parent? No
			Docking Orientation: All
			Window Location and Size
				Left: 0.363"
				Top: 3.979"
				Width:  7.617"
				Width Editable? Yes
				Height: 5.646"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: 10
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
			Resizable? No
			Vertical Scroll? Yes
			Horizontal Scroll? Yes
		Description: This dialog box displays the application message, error text, cause and remedy
				corresponding to the SQL error number in the first data field. Initially, this data field contains
				gnError, but it can be changed.
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Docking Toolbar? No
				Toolbar Docking Orientation: Top | Bottom
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Resizable? No
			Contents
		Contents
			Background Text: SQL Error Number:
				Resource Id: 1174
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.283"
					Top: 0.177"
					Width:  1.9"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Data Field: dfSQLErrorNum
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: Number
					Editable? Yes
				Display Settings
					Window Location and Size
						Left: 2.083"
						Top: 0.155"
						Width:  1.0"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
					On SAM_Create
						Set MyValue = pnError
			Background Text: Message:
				Resource Id: 41412
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.283"
					Top: 0.512"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Multiline Field: mlMessage
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					String Type: String
					Editable? Yes
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left: 0.283"
						Top: 0.719"
						Width:  6.9"
						Width Editable? Yes
						Height: 0.667"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Message Actions
					On SAM_Create
						Set MyValue = SqlGetErrorTextX( dfSQLErrorNum )
			Background Text: Error Text:
				Resource Id: 41413
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.283"
					Top: 1.448"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Multiline Field: mlErrorText
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					String Type: String
					Editable? Yes
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left: 0.283"
						Top: 1.635"
						Width:  6.9"
						Width Editable? Yes
						Height: 0.667"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Message Actions
					On SAM_Create
						Set MyValue = psErrorMessage
			Background Text: Reason:
				Resource Id: 41414
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.288"
					Top: 2.344"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Multiline Field: mlReason
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 5000
					String Type: String
					Editable? Yes
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left: 0.288"
						Top: 2.531"
						Width:  6.9"
						Width Editable? Yes
						Height: 0.667"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Message Actions
					On SAM_Create
						Call SqlErrorText( dfSQLErrorNum, SQLERROR_Reason, MyValue, SalGetMaxDataLength( MyValue ), wnMaxCause)
			Background Text: Remedy:
				Resource Id: 41411
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.288"
					Top: 3.271"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Multiline Field: mlRemedy
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 5000
					String Type: String
					Editable? Yes
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left: 0.288"
						Top: 3.49"
						Width:  6.9"
						Width Editable? Yes
						Height: 0.667"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Message Actions
					On SAM_Create
						Call SqlErrorText( dfSQLErrorNum, SQLERROR_Remedy, MyValue, SalGetMaxDataLength( MyValue ), wnMaxCause)
			Background Text: SQL:
				Resource Id: 1867
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.288"
					Top: 4.188"
					Width:  1.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Multiline Field: mlSQL
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 5000
					String Type: String
					Editable? Yes
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left: 0.288"
						Top: 4.406"
						Width:  6.9"
						Width Editable? Yes
						Height: 0.667"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Message Actions
					On SAM_Create
						Set MyValue = psSqlStmt
						Set s2 = SqlGetLastStatement(  )
			Pushbutton: pbContinue
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Continue
				Window Location and Size
					Left: 4.713"
					Top: 5.219"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Enter
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Call SalEndDialog( hWndForm, FALSE )
			Pushbutton: pbHalt
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Halt
				Window Location and Size
					Left: 6.013"
					Top: 5.219"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Call SalQuit(  )
			Pushbutton: pbEMail
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left: 3.1"
					Top: 5.219"
					Width:  0.5"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name: ENVELOPE.bmp
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Set wlsError = ''
						Set wlsError = wlsError || 'Computer : ' || GetComputerName(  ) || '
								
								'
						Set wlsError = wlsError || 'User : ' || GetUserName(  ) || '
								
								'
						Set wlsError = wlsError || 'Localité : ' || gsErrorLocalite || '
								
								'
						Set wlsError = wlsError || 'INS : ' || gsErrorINS || '
								
								'
						Set wlsError = wlsError || 'PRGM : ' || VisStrSubstitute( strArgArray[0], '\\', '/' ) || '
								
								'
						Set wlsError = wlsError || 'DB : ' || SqlDatabase || '
								
								'
						Set wlsError = wlsError || 'USER : ' || SqlUser || '
								
								'
						Set wlsError = wlsError || 'N° : ' || SalNumberToStrX( dfSQLErrorNum, 0 ) || '
								
								'
						Set wlsError = wlsError || 'Message : 
								' || mlMessage || '
								
								'
						Set wlsError = wlsError || 'ErrorText : 
								' || mlErrorText || '
								
								'
						Set wlsError = wlsError || 'Reason : 
								' || mlReason || '
								
								'
						Set wlsError = wlsError || 'Remedy : 
								' || mlRemedy || '
								
								'
						Set wlsError = wlsError || 'SQL : 
								' || VisStrSubstitute( mlSQL, '\\', '/#/' ) || '
								
								'
						Set wlsError = wlsError || 'Windows : 
								' || wlsWindowName || '
								
								'
						Set sSujet = gsErrorApp || '.' || gsErrorIdClient ||  '[Erreur]'
						If SalStrLength( gsErrorApplication ) = 0
							! Set sSujet = sSujet || SqlDatabase 
						Else
							Set sSujet = sSujet || ' - ' || gsErrorApplication
						! Set sSujet = sSujet || ']'
						! Call EmailSendBackground( gsErrorEMail, '', '', sSujet, wlsError, '', TRUE )
						If cEmail.SendMail( 'Applic', gsErrorEMail, '', sSujet, wlsError )
							Call SalMessageBox( "Email send", '', MB_Ok )
					On SAM_Create
						If gsErrorEMail != ''
							If cEmail.Init( 'smtp.publilink.be', 'hotline@stesud.be' )
							Else
								Call SalHideWindow( hWndItem )
						Else
							Call SalHideWindow( hWndItem )
						! If SalStrLength( gsErrorEMail )
		Functions
		Window Parameters
			Number: pnError
			String: psErrorMessage
			Long String: psSqlStmt
		Window Variables
			Number: wnMaxCause
			Number: wnMaxRemedy
			Long String: wlsError
			String: sSujet
			FunctionalVar: cEmail
				Class: cBlatMail
			Long String: wlsWindowName
			Window Handle: whWnd
			String: s
			String: s2
			String: s1
			Number: n
		Message Actions
			On SAM_Create
				! Since we come here during the execution of a SQL operation, cursor might be a wait cursor. 
						Show the normal cursor.
				Call VisWaitCursor( FALSE )
			On SAM_CreateComplete
				Call SalSetDefButton( pbContinue )
				Set wlsWindowName = ''
				Set whWnd = SalGetFirstChild( hWndMDI, TYPE_FormWindow )
				While whWnd != hWndNULL
					Set s  = SalStrRepeatX( ' ', 255 )
					Call SalGetWindowText( whWnd, s, 255 )
					If wlsWindowName != ''
						Set wlsWindowName = wlsWindowName || ' - '
					Set wlsWindowName = wlsWindowName || s 
					Call SalGetNextChild( whWnd, TYPE_FormWindow )
				If not PalGetApplParm( 'DIApp', gsErrorApp )
					If ( gsErrorApp = '' ) or ( gsErrorApp = STRING_Null ) 
						Set gsErrorApp = 'NCC'
				If not PalGetApplParm( 'DIClient', gsErrorIdClient )
					If ( gsErrorIdClient = '' ) or ( gsErrorIdClient = STRING_Null ) 
						Set gsErrorIdClient = '128803'
				If not PalGetApplParm( 'EMail', gsErrorEMail )
					If ( gsErrorEMail = '' ) or ( gsErrorEMail = STRING_Null ) 
						Set gsErrorEMail = 'compta@stesud.be'
				If gsErrorLocalite = ''
					If not PalGetApplParm( 'PAR0006', gsErrorLocalite )
				If gsErrorINS
					If not PalGetApplParm( 'PAR0008', gsErrorINS )
	Dialog Box: dlgTimeOut
		Class:
		Property Template:
		Class DLL Name:
		Title: TimeOut
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? No
			Type of Dialog: Modal
			Allow Dock to Parent? No
			Docking Orientation: All
			Window Location and Size
				Left: 2.6"
				Top: 1.427"
				Width:  6.3"
				Width Editable? Yes
				Height: 1.402"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
			Resizable? No
			Vertical Scroll? Yes
			Horizontal Scroll? Yes
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Docking Toolbar? No
				Toolbar Docking Orientation: Top | Bottom
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Resizable? No
			Contents
		Contents
			Background Text: Sorry, the database is busy. Check the count down to see when we'll try again, or push the retry button.
				Resource Id: 58766
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.383"
					Top: 0.179"
					Width:  3.9"
					Width Editable? Yes
					Height: 0.476"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Background Text: Count down to retry:
				Resource Id: 58767
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.383"
					Top: 0.845"
					Width:  2.1"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Data Field: dfCountDown
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: Number
					Editable? No
				Display Settings
					Window Location and Size
						Left: 2.483"
						Top: 0.845"
						Width:  0.5"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? No
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: 3D Face Color
					Input Mask: Unformatted
				Message Actions
			Pushbutton: pbRetry
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Retry
				Window Location and Size
					Left: 4.683"
					Top: 0.405"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Create
						Set dfCountDown = 20
						Call SalTimerSet( hWndItem, 1, 1000 )
					On SAM_Timer
						Set dfCountDown = dfCountDown -1
						If dfCountDown < 1
							Call SalTimerKill( hWndItem, 1 )
							! Return 1
							Call SalEndDialog( hWndForm, 1 )
					On SAM_Click
						Call SalTimerKill( hWndItem, 1 )
						! Return 1
						Call SalEndDialog( hWndForm, 1 )
					On WM_USER
						Call SalTimerKill( hWndItem, 1 )
			Pushbutton: pbCancel
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: Cancel
				Window Location and Size
					Left: 4.683"
					Top: 0.821"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Call SalTimerKill( hWndItem, 1 )
						! Return 0 
						Call SalEndDialog( hWndForm, 0 )
			Pushbutton: pbHelpInvisible
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left: Default
					Top: Default
					Width:  Default
					Width Editable? Yes
					Height: Default
					Height Editable? Yes
				Visible? No
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Call SalSendMsg( pbRetry, WM_USER, 0, 0 )
						Call SalSetWindowSize( hWndForm, 6.3, 3.5 )
			Multiline Field: mlSqlStmt
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					String Type: String
					Editable? Yes
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left: 0.383"
						Top: 1.405"
						Width:  5.5"
						Width Editable? Yes
						Height: 1.667"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Message Actions
					On SAM_Create
						Set MyValue = psSqlStmt
		Functions
		Window Parameters
			String: psSqlStmt
			Number: pnError
		Window Variables
		Message Actions
	!
	Dialog Box: dlgGetPwd
		Class:
		Property Template:
		Class DLL Name:
		Title: Password
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Allow Dock to Parent? No
			Docking Orientation: All
			Window Location and Size
				Left: Default
				Top: Default
				Width:  4.267"
				Width Editable? Yes
				Height: 1.393"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
			Resizable? No
			Vertical Scroll? Yes
			Horizontal Scroll? Yes
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Docking Toolbar? No
				Toolbar Docking Orientation: Top | Bottom
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Resizable? No
			Contents
		Contents
			Background Text: Password:
				Resource Id: 28753
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBaseBgdText
				Window Location and Size
					Left: 0.283"
					Top: 0.167"
					Width:  1.167"
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Justify: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
			Data Field: df1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBaseDf
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Class Default
					Data Type: String
					Editable? Class Default
				Display Settings
					Window Location and Size
						Left: 1.55"
						Top: 0.131"
						Width:  1.567"
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Class Default
					Format: Class Default
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: Class Default
				Message Actions
			Pushbutton: pb1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Ok
				Window Location and Size
					Left: 0.35"
					Top: 0.464"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						If df1 = psPwd
							Call SalEndDialog( hWndForm, TRUE )
						Else
							Call SalEndDialog( hWndForm, FALSE )
			Pushbutton: pb2
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Cancel
				Window Location and Size
					Left: 1.917"
					Top: 0.464"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Call SalEndDialog( hWndForm, FALSE )
		Functions
		Window Parameters
			String: psPwd
		Window Variables
		Message Actions
			On SAM_Create
				Call SalCenterWindow( hWndForm )
	Dialog Box: dlgCmdArret
		Class:
		Property Template:
		Class DLL Name:
		Title: .
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modeless
			Allow Dock to Parent? No
			Docking Orientation: All
			Window Location and Size
				Left: Default
				Top: Default
				Width:  6.667"
				Width Editable? Yes
				Height: 2.393"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
			Resizable? No
			Vertical Scroll? Yes
			Horizontal Scroll? Yes
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Docking Toolbar? No
				Toolbar Docking Orientation: Top | Bottom
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Resizable? No
			Contents
		Contents
			Pushbutton: pb1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBasePbOnForm
				Property Template:
				Class DLL Name:
				Title: Arrêter &maintenant
				Window Location and Size
					Left: 0.817"
					Top: 2.0"
					Width:  2.133"
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Button Appearance: Class Default
				Message Actions
					On SAM_Click
						If ghMailSlotHandle
							Call MailslotDestroy( ghMailSlotHandle )
						Call SalQuit(  )
			Pushbutton: pb2
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBasePbOnForm
				Property Template:
				Class DLL Name:
				Title: &Annuler
				Window Location and Size
					Left: 3.883"
					Top: 2.0"
					Width:  2.067"
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Button Appearance: Class Default
				Message Actions
					On SAM_Click
						Call SalPostMsg( hWndForm, SAM_Close, 0, 0 )
			Multiline Field: ml1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBaseMl
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Class Default
					String Type: Long String
					Editable? No
				Display Settings
					Border? Class Default
					Word Wrap? Class Default
					Vertical Scroll? Class Default
					Window Location and Size
						Left: 0.217"
						Top: 0.071"
						Width:  6.2"
						Width Editable? Class Default
						Height: 1.452"
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
				Message Actions
					On SAM_Create
						Set MyValue = "Un arrêt du programme a été demandé par un administrateur.
								
								Le compteur ci-dessous vous indique le nombre de secondes qu'il reste avant l'arrêt automatique du programme. Veuillez fermer les différentes fenêtres de l'applications.
								Pour quitter tout de suite appuyer sur le bouton 'Arreter maintenant'
								
								"
			Data Field: df1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBaseDf
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Class Default
					Data Type: Number
					Editable? No
				Display Settings
					Window Location and Size
						Left: 2.95"
						Top: 1.595"
						Width:  0.933"
						Width Editable? Class Default
						Height: Class Default
						Height Editable? Class Default
					Visible? Class Default
					Border? Class Default
					Justify: Class Default
					Format: Class Default
					Country: Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					Input Mask: Class Default
				Message Actions
		Functions
		Window Parameters
			Number: pnDelay
			String: psPwd
		Window Variables
			Number: wnTimer
		Message Actions
			On SAM_Create
				Set df1 = pnDelay
				Call SalCenterWindow( hWndForm )
				Call SalTimerSet( hWndForm, 1, 1000 )
			On SAM_Timer
				If wParam = 1
					Set df1 = df1 - 1
					If df1 <= 0
						Call SalTimerKill( hWndForm, 1 )
						Call SalQuit( )
			On SAM_Close
				If SalModalDialog( dlgGetPwd, hWndForm, VisStrSubstitute( psPwd, '
						', '' ) ) = TRUE
					Call SalTimerKill( hWndForm, 1 )
					! Call SalEndDialog( hWndForm, TRUE )
					Call SalDestroyWindow( hWndForm )
					Return TRUE
				Else
					Return FALSE
	Form Window: frmMessageDlg
		Class:
		Property Template: C:\p_lib32\langue\qo_lang32.exe,frmPropertiesLanguage,,,N,N
		Class DLL Name:
		Title:
		Icon File:
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Automatically Created at Runtime? No
			Initial State: Normal
			Maximizable? No
			Minimizable? Yes
			Allow Child Docking? No
			Docking Orientation: All
			System Menu? Yes
			Resizable? Yes
			Window Location and Size
				Left: Default
				Top: Default
				Width:  6.467"
				Width Editable? Yes
				Height: 2.369"
				Height Editable? Yes
			Form Size
				Width:  Default
				Height: Default
				Number of Pages: Dynamic
			Font Name: Default
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
		Description:
		Named Menus
		Menu
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Docking Toolbar? No
				Toolbar Docking Orientation: Top | Bottom
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Resizable? No
			Contents
		Contents
			Pushbutton: pb1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Ok
				Window Location and Size
					Left: 2.583"
					Top: 1.845"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.298"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Call SalSendMsg( hWndForm, SAM_Close, 0, 0  )
			Multiline Field: ml1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 64000
					String Type: String
					Editable? No
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left: 0.083"
						Top: 0.083"
						Width:  6.033"
						Width Editable? Yes
						Height: 1.667"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Message Actions
			Data Field: df1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: Number
					Editable? No
				Display Settings
					Window Location and Size
						Left: 4.15"
						Top: 1.869"
						Width:  1.433"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
		Functions
		Window Parameters
			String: ps
			Number: pnPAM_TranslateMenu
		Window Variables
		Message Actions
			On SAM_CreateComplete
				Set ml1 = ps
				Set df1 = SalStrLength( ml1 )
			On SAM_Create
				Call SalCenterWindow( hWndForm )
			On SAM_Close
				If pnPAM_TranslateMenu
					Call SalPostMsg( hWndMDI, pnPAM_TranslateMenu, 0, 0 )
					! Call SalPostMsg( hWndMDI, pnPAM_TranslateMenu, 0, 0 )
					! Call SalPostMsg( hWndMDI, pnPAM_TranslateMenu, 0, 0 )
					! Call SalPostMsg( hWndMDI, pnPAM_TranslateMenu, 0, 0 )
				! Call SalDestroyWindow( hWndForm )
	Dialog Box: dlgInfoCompl
		Class: clsBaseDlg
		Property Template:
		Class DLL Name:
		Title: Informations complémentaires
		Accessories Enabled? Class Default
		Visible? Class Default
		Display Settings
			Display Style? Class Default
			Visible at Design time? Yes
			Type of Dialog: Class Default
			Allow Dock to Parent? Class Default
			Docking Orientation: Class Default
			Window Location and Size
				Left: Default
				Top: Default
				Width:  7.013"
				Width Editable? Class Default
				Height: 3.792"
				Height Editable? Class Default
			Absolute Screen Location? Class Default
			Font Name: MS Sans Serif
			Font Size: Class Default
			Font Enhancement: Class Default
			Text Color: Class Default
			Background Color: Class Default
			Resizable? No
			Vertical Scroll? Yes
			Horizontal Scroll? Yes
		Description:
		Tool Bar
			Display Settings
				Display Style? Class Default
				Location? Class Default
				Visible? Class Default
				Size: Class Default
				Size Editable? Class Default
				Docking Toolbar? Class Default
				Toolbar Docking Orientation: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Resizable? Class Default
			Contents
		Contents
			Pushbutton: pbInvisibleHelp
				Class Child Ref Key: 1
				Class ChildKey: 0
				Class: clsBaseDlg
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left: Class Default
					Top: Class Default
					Width:  Class Default
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Button Appearance: Class Default
				Message Actions
			Background Text: Information sur le problème : 
				Resource Id: 56067
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.213"
					Top: 0.177"
					Width:  6.425"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Multiline Field: ml1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: 30000
					String Type: String
					Editable? Yes
				Display Settings
					Border? Yes
					Word Wrap? Yes
					Vertical Scroll? Yes
					Window Location and Size
						Left: 0.138"
						Top: 0.479"
						Width:  6.575"
						Width Editable? Yes
						Height: 2.677"
						Height Editable? Yes
					Visible? Yes
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
				Message Actions
			Pushbutton: pbOK
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBasePbOnForm
				Property Template:
				Class DLL Name:
				Title: &Ok
				Window Location and Size
					Left: 4.988"
					Top: 3.344"
					Width:  0.725"
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Button Appearance: Class Default
				Message Actions
					On SAM_Click
						Set prlsInfo = ml1
						Call SalEndDialog( hWndForm, TRUE )
			Pushbutton: pbCancel
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBasePbOnForm
				Property Template:
				Class DLL Name:
				Title: &Annuler
				Window Location and Size
					Left: 5.888"
					Top: 3.344"
					Width:  0.813"
					Width Editable? Class Default
					Height: Class Default
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name:
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Button Appearance: Class Default
				Message Actions
					On SAM_Click
						Call SalEndDialog( hWndForm, FALSE )
		Functions
		Window Parameters
			Receive Long String: prlsInfo
		Window Variables
		Message Actions
	Dialog Box: dlgInputQuery
		Class:
		Property Template:
		Class DLL Name:
		Title:
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Allow Dock to Parent? No
			Docking Orientation: All
			Window Location and Size
				Left: Default
				Top: Default
				Width:  5.714"
				Width Editable? Yes
				Height: 1.563"
				Height Editable? Yes
			Absolute Screen Location? No
			Font Name: MS Sans Serif
			Font Size: Default
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
			Resizable? No
			Vertical Scroll? Yes
			Horizontal Scroll? Yes
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Docking Toolbar? No
				Toolbar Docking Orientation: Top | Bottom
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Resizable? No
			Contents
		Contents
			Background Text: Prompt
				Resource Id: 22504
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.163"
					Top: 0.208"
					Width:  4.588"
					Width Editable? Yes
					Height: 0.208"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: None
				Text Color: Default
				Background Color: Default
			Data Field: df1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left: 0.114"
						Top: 0.49"
						Width:  5.343"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
			Pushbutton: pb1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Ok
				Window Location and Size
					Left: 1.4"
					Top: 0.833"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Enter
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Set Value = df1
						Call SalEndDialog( hWndForm, TRUE )
			Pushbutton: pb2
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Cancel
				Window Location and Size
					Left: 2.971"
					Top: 0.833"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: Esc
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Call SalEndDialog( hWndForm, FALSE )
		Functions
		Window Parameters
			String: ACaption
			String: APrompt
			Receive String: Value
		Window Variables
		Message Actions
			On SAM_Close
				Call SalEndDialog( hWndForm, FALSE )
			On SAM_Create
				Call SalSetWindowLabelText( df1, APrompt )
				Call SalSetWindowText( hWndForm, APrompt )
	Dialog Box: __dlgRechINS
		Class:
		Property Template:
		Class DLL Name:
		Title: Recherche INS
		Accessories Enabled? No
		Visible? Yes
		Display Settings
			Display Style? Default
			Visible at Design time? Yes
			Type of Dialog: Modal
			Allow Dock to Parent? No
			Docking Orientation: All
			Window Location and Size
				Left: 5.663"
				Top: 4.458"
				Width:  6.55"
				Width Editable? Yes
				Height: 3.427"
				Height Editable? Yes
			Absolute Screen Location? Yes
			Font Name: MS Sans Serif
			Font Size: 8
			Font Enhancement: Default
			Text Color: Default
			Background Color: Default
			Resizable? No
			Vertical Scroll? Yes
			Horizontal Scroll? Yes
		Description:
		Tool Bar
			Display Settings
				Display Style? Default
				Location? Top
				Visible? Yes
				Size: Default
				Size Editable? Yes
				Docking Toolbar? No
				Toolbar Docking Orientation: Top | Bottom
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
				Resizable? No
			Contents
		Contents
			Background Text: Nom
				Resource Id: 52602
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Window Location and Size
					Left: 0.186"
					Top: 0.146"
					Width:  0.825"
					Width Editable? Yes
					Height: 0.167"
					Height Editable? Yes
				Visible? Yes
				Justify: Left
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Text Color: Default
				Background Color: Default
			Data Field: dfFindGoto
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Data
					Maximum Data Length: Default
					Data Type: String
					Editable? Yes
				Display Settings
					Window Location and Size
						Left: 1.088"
						Top: 0.094"
						Width:  3.0"
						Width Editable? Yes
						Height: 0.25"
						Height Editable? Yes
					Visible? Yes
					Border? Yes
					Justify: Left
					Format: Unformatted
					Country: Default
					Font Name: Default
					Font Size: Default
					Font Enhancement: Default
					Text Color: Default
					Background Color: Default
					Input Mask: Unformatted
				Message Actions
					On PAM_Dirty
					On SAM_AnyEdit
						Set wnRow = -1
						Call SalSetDefButton( pbGoto )
			Pushbutton: pbGoto
.data INHERITPROPS
0000: 0100
.enddata
.data CLASSPROPS
0000: 4C6162656C640001 0000004C6162656C 6600010000004C61 62656C6E00010000
0020: 004C6162656C6500 0100000000000000 00000000
.enddata
.data CLASSPROPSSIZE
0000: 3400
.enddata
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBasePbOnForm
				Property Template:
				Class DLL Name:
				Title:
				Window Location and Size
					Left: 4.157"
					Top: 0.094"
					Width:  0.4"
					Width Editable? Class Default
					Height: 0.25"
					Height Editable? Class Default
				Visible? Class Default
				Keyboard Accelerator: Class Default
				Font Name: Class Default
				Font Size: Class Default
				Font Enhancement: Class Default
				Picture File Name: \P_LIB32\RESOURCE\GLASS.BMP
				Picture Transparent Color: Class Default
				Image Style: Class Default
				Text Color: Class Default
				Background Color: Class Default
				Button Appearance: Standard
				Message Actions
					On SAM_Create
						Call SalPicSet( hWndItem, resZoomIn, PIC_FormatBitmap )
						Set wnRow = 0
					On SAM_Click
						! If not SalIsNull( dfFindGoto )
							If wnRow = -1
								Set wnRow = 0
							! Set wnRow = VisTblFindString( ctblGestionAjustInterne, wnRow, ctblGestionAjustInterne.colArtArticleStr, dfFindGoto || '%' )
							Set wnRow = VisTblFindString( ctblFCompteFin, wnRow, hWndNULL, dfFindGoto || '%' )
							If wnRow > -1
								Call SalTblSetFocusRow( ctblFCompteFin, wnRow )
								Call SalTblSetContext( ctblFCompteFin, wnRow )
								Set wnRow = wnRow + 1
							Else
								Call SalMessageBeep( MB_Ok )
								Call PalMessageBox( 'Eind van het zoek', 'Fin de la recherche', '', '', MB_Ok )
						If not SalIsNull( dfFindGoto )
							Call tbl1.SearchString( hWndNULL, dfFindGoto, wnRow )
							If wnRow > -1
								Call SalTblSetFocusRow( tbl1, wnRow )
								Call SalTblSetContext( tbl1, wnRow )
								! Set wnRow = wnRow + 1
							Else
								Call SalMessageBeep( MB_Ok )
								Call PalMessageBox( 'Eind van het zoek', 'Fin de la recherche', '', '', MB_Ok )
			Child Table: tbl1
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class: clsBaseCTblMaster
				Property Template:
				Class DLL Name:
				Display Settings
					Window Location and Size
						Left: 0.213"
						Top: 0.479"
						Width:  6.071"
						Width Editable? Class Default
						Height: 2.417"
						Height Editable? Class Default
					Visible? Class Default
					Font Name: Class Default
					Font Size: Class Default
					Font Enhancement: Class Default
					Text Color: Class Default
					Background Color: Class Default
					View: Class Default
					Allow Row Sizing? Class Default
					Lines Per Row: Class Default
				Memory Settings
					Maximum Rows in Memory: Class Default
					Discardable? Class Default
				Contents
					Column: colIns
						Class Child Ref Key: 0
						Class ChildKey: 0
						Class:
						Property Template:
						Class DLL Name:
						Title: INS
						Visible? Yes
						Editable? No
						Maximum Data Length: Default
						Data Type: String
						Justify: Left
						Width:  0.886"
						Width Editable? Yes
						Format: Unformatted
						Country: Default
						Input Mask: Unformatted
						Cell Options
							Cell Type? Standard
							Multiline Cell? No
							Cell DropDownList
								Sorted? Yes
								Vertical Scroll? Yes
								Auto Drop Down? No
								Allow Text Editing? Yes
							Cell CheckBox
								Check Value:
								Uncheck Value:
								Ignore Case? Yes
						List Values
						Message Actions
					Column: colLib
						Class Child Ref Key: 0
						Class ChildKey: 0
						Class:
						Property Template:
						Class DLL Name:
						Title: Nom
						Visible? Yes
						Editable? No
						Maximum Data Length: Default
						Data Type: String
						Justify: Left
						Width:  3.629"
						Width Editable? Yes
						Format: Unformatted
						Country: Default
						Input Mask: Unformatted
						Cell Options
							Cell Type? Standard
							Multiline Cell? No
							Cell DropDownList
								Sorted? Yes
								Vertical Scroll? Yes
								Auto Drop Down? No
								Allow Text Editing? Yes
							Cell CheckBox
								Check Value:
								Uncheck Value:
								Ignore Case? Yes
						List Values
						Message Actions
					Column: colCP
						Class Child Ref Key: 0
						Class ChildKey: 0
						Class:
						Property Template:
						Class DLL Name:
						Title: C.P.
						Visible? Yes
						Editable? No
						Maximum Data Length: Default
						Data Type: String
						Justify: Left
						Width:  0.771"
						Width Editable? Yes
						Format: Unformatted
						Country: Default
						Input Mask: Unformatted
						Cell Options
							Cell Type? Standard
							Multiline Cell? No
							Cell DropDownList
								Sorted? Yes
								Vertical Scroll? Yes
								Auto Drop Down? No
								Allow Text Editing? Yes
							Cell CheckBox
								Check Value:
								Uncheck Value:
								Ignore Case? Yes
						List Values
						Message Actions
				Functions
				Window Variables
					Number: nRow
					String: a[*]
					Number: n
					String: s
					File Handle: fh
				Message Actions
					On SAM_Create
						If SalFileOpen( fh, 'inscom.txt', OF_Read | OF_Text )
							While SalFileGetStr( fh, s, 255 )
								Set n = SalStrTokenize( s, "	", "	", a )
								Set nRow= SalTblInsertRow( tbl1, TBL_MaxRow )
								Call SalTblSetContext( tbl1, nRow )
								Set tbl1.colIns = a[0]
								Set s = SalStrMidX( a[1], 1, SalStrLength( a[1] ) - 2 )
								Set tbl1.colLib = s
								Set s = SalStrMidX( a[2], 1, SalStrLength( a[2] ) - 2 )
								Set tbl1.colCP = s
								Call SalTblSetRowFlags( tbl1, nRow, ROW_New, FALSE )
							Call SalFileClose( fh )
					On SAM_CreateComplete
					On SAM_DoubleClick
						Call SalSendMsg( pb2, SAM_Click, wParam, lParam )
			Pushbutton: pb2
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Ok
				Window Location and Size
					Left: 1.8"
					Top: 2.988"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Set rpsNoIns = tbl1.colIns
						Call SalEndDialog( hWndForm, TRUE )
			Pushbutton: pb3
				Class Child Ref Key: 0
				Class ChildKey: 0
				Class:
				Property Template:
				Class DLL Name:
				Title: &Annuler
				Window Location and Size
					Left: 3.433"
					Top: 2.988"
					Width:  1.2"
					Width Editable? Yes
					Height: 0.292"
					Height Editable? Yes
				Visible? Yes
				Keyboard Accelerator: (none)
				Font Name: Default
				Font Size: Default
				Font Enhancement: Default
				Picture File Name:
				Picture Transparent Color: None
				Image Style: Single
				Text Color: Default
				Background Color: Default
				Button Appearance: Standard
				Message Actions
					On SAM_Click
						Call SalEndDialog( hWndForm, FALSE )
		Functions
		Window Parameters
			Receive String: rpsNoIns
		Window Variables
			Number: wnRow
		Message Actions
			On SAM_Create
				Call SalCenterWindow( hWndForm )
