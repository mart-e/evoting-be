.head 0 +  Application Description: SQLWindows version 5.0 starter application
.head 1 -  Outline Version - 4.0.31
.head 1 +  Design-time Settings
.data VIEWINFO
0000: 6F00000003000000 FFFF01000D004347 5458566965775374 6174650400010000
0020: 0000000000F60000 002C000000020000 0003000000FFFFFF FFFFFFFFFFFCFFFF
0040: FFE2FFFFFF000000 0000000000DA0300 00B9020000010000 0000000000010000
0060: 000F4170706C6963 6174696F6E497465 6D00000000000001 8004000100000000
0080: 000000AC0000002C 0000000000000001 000000FFFFFFFFFF FFFFFFFCFFFFFFE2
00A0: FFFFFF160000001D 0000008C040000EA 0200000000000000 000000030000000F
00C0: 4170706C69636174 696F6E4974656D07 436C617373657307 54527466526F7702
00E0: 0000000946756E63 74696F6E730F5772 697465526F774E6F 744E756C6C
.enddata
.head 2 -  Outline Window State: Maximized
.head 2 +  Outline Window Location and Size
.data VIEWINFO
0000: 6600040003001B00 02000000D1010000 0000081EA9110500 1D00FFFF4D61696E
0020: 001E000000040032 012602CA01C4220E 0F0000F400FFFF43 6C61737365730020
0040: 0000000400090039 03B002D723F30F00 00DF00FFFF566172 6961626C65730029
0060: 0001000400320000 000000E91E800A00 008600FFFF496E74 65726E616C204675
0080: 6E6374696F6E7300
.enddata
.data VIEWSIZE
0000: 8800
.enddata
.head 3 -  Left: -0.013"
.head 3 -  Top: 0.0"
.head 3 -  Width:  8.013"
.head 3 -  Height: 4.969"
.head 2 +  Options Box Location
.data VIEWINFO
0000: CC180909B80B1A00
.enddata
.data VIEWSIZE
0000: 0800
.enddata
.head 3 -  Visible? Yes
.head 3 -  Left: 4.15"
.head 3 -  Top: 1.885"
.head 3 -  Width:  3.8"
.head 3 -  Height: 2.073"
.head 2 +  Class Editor Location
.head 3 -  Visible? No
.head 3 -  Left: 0.575"
.head 3 -  Top: 0.094"
.head 3 -  Width:  5.063"
.head 3 -  Height: 2.719"
.head 2 +  Tool Palette Location
.head 3 -  Visible? No
.head 3 -  Left: 6.4"
.head 3 -  Top: 0.729"
.head 2 -  Fully Qualified External References? No
.head 2 -  Reject Multiple Window Instances? Yes
.head 2 -  Enable Runtime Checks Of External References? Yes
.head 2 -  Use Release 4.0 Scope Rules? No
.head 1 +  Libraries
.head 2 -  File Include: stream.apl
.head 2 -  ! File Include: vtdos.apl
.head 2 -  File Include: cstste.apl
.head 1 +  Global Declarations
.head 2 +  Window Defaults
.head 3 +  Tool Bar
.head 4 -  Display Style? Etched
.head 4 -  Font Name: System Default
.head 4 -  Font Size: System Default
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Form Window
.head 4 -  Display Style? Etched
.head 4 -  Font Name: System Default
.head 4 -  Font Size: System Default
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Dialog Box
.head 4 -  Display Style? Etched
.head 4 -  Font Name: System Default
.head 4 -  Font Size: System Default
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Top Level Table Window
.head 4 -  Font Name: System Default
.head 4 -  Font Size: System Default
.head 4 -  Font Enhancement: System Default
.head 4 -  Text Color: System Default
.head 4 -  Background Color: System Default
.head 3 +  Data Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Multiline Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Spin Field
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Background Text
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Pushbutton
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Radio Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Check Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Option Button
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 3 +  Group Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Child Table Window
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  List Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Combo Box
.head 4 -  Font Name: Use Parent
.head 4 -  Font Size: Use Parent
.head 4 -  Font Enhancement: Use Parent
.head 4 -  Text Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Line
.head 4 -  Line Color: Use Parent
.head 3 +  Frame
.head 4 -  Border Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 3 +  Picture
.head 4 -  Border Color: Use Parent
.head 4 -  Background Color: Use Parent
.head 2 +  Formats
.head 3 -  Number: 0'%'
.head 3 -  Number: #0
.head 3 -  Number: ###000
.head 3 -  Number: ###000;'($'###000')'
.head 3 -  Date/Time: hh:mm:ss AMPM
.head 3 -  Date/Time: M/d/yy
.head 3 -  Date/Time: MM-dd-yy
.head 3 -  Date/Time: dd-MMM-yyyy
.head 3 -  Date/Time: MMM d, yyyy
.head 3 -  Date/Time: MMM d, yyyy hh:mm AMPM
.head 3 -  Date/Time: MMMM d, yyyy hh:mm AMPM
.head 2 +  External Functions
.head 2 +  Constants
.data CCDATA
0000: 3000000000000000 0000000000000000 00000000
.enddata
.data CCSIZE
0000: 1400
.enddata
.head 3 +  System
.head 3 +  User
.head 4 -  !
.head 4 -  ! Constante pour les taquets de tabulations
.head 4 -  Number: cTabLeft			= 1
.head 4 -  Number: cTabCenter		= 2
.head 4 -  Number: cTabRight			= 3
.head 4 -  Number: cTabJust			= 4
.head 4 -  Number: cTabDec			= 5
.head 4 -  Number: cTabDot		= 0x00001000
.head 4 -  Number: cTabHyphen	= 0x00002000
.head 4 -  Number: cTabUnderline	= 0x00004000
.head 4 -  Number: cTabThichLine	= 0x00008000
.head 4 -  Number: cTabEqualSign	= 0x00010000
.head 4 -  !
.head 4 -  !
.head 4 -  Number: cFieldPage		= 1
.head 4 -  Number: cFieldNbrPages		= 2
.head 4 -  !
.head 4 -  ! Constante pour la définition des cellules
.head 4 -  Number: cAbs			= 1
.head 4 -  Number: cPct			= 2
.head 4 -  !
.head 4 -  ! /@@@@@ LS : 01/03/99
.head 4 -  String: cTab			= '\\tab '
.head 4 -  String: cPar			= '\\par '
.head 4 -  String: cParSolidaireS			= '\\keepn '
.head 4 -  String: cEspaceInsep		= '\\~'
.head 4 -  String: cTiretConditionnel		= '\\-'
.head 4 -  !
.head 4 -  Number: cUnderline			= 0x0001
.head 4 -  Number: cDoubleUnderline		= 0x0002
.head 4 -  Number: cWordUnderline		= 0x0004
.head 4 -  Number: cDotUnderline		= 0x0008
.head 4 -  Number: cWaveUnderline		= 0x0080
.head 4 -  ! /@@@@@ LS : 09/03/99
.head 4 -  Number: cBold			= 0x0010
.head 4 -  Number: cItalic			= 0x0020
.head 4 -  Number: cCaps			= 0x0040
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  ! Constante pour la justification des paragraphe
.head 4 -  Number: cParLeft			= 0x01000
.head 4 -  Number: cParCenter		= 0x02000
.head 4 -  Number: cParRight			= 0x04000
.head 4 -  Number: cParJust			= 0x08000
.head 4 -  !
.head 4 -  Number: cNoBorder		= 0x00000
.head 4 -  Number: cBorderL			= 0x00100
.head 4 -  Number: cBorderR			= 0x00200
.head 4 -  Number: cBorderT			= 0x00400
.head 4 -  Number: cBorderB			= 0x00800
.head 4 -  Number: cBorderDL		= 0x10000
.head 4 -  Number: cBorderDR		= 0x20000
.head 4 -  Number: cBorderDT		= 0x40000
.head 4 -  Number: cBorderDB		= 0x80000
.head 4 -  Number: cBox			= cBorderL + cBorderR + cBorderT + cBorderB
.head 4 -  Number: cBoxD			= cBorderDL + cBorderDR + cBorderDT + cBorderDB
.head 4 -  ! /@@@@@ LS : 19/03/99
.head 4 -  Number: cStrike			= 0x100000
.head 4 -  Number: cParSolidaire		= 0x200000
.head 4 -  Number: cLineSolidaire		= 0x400000
.head 4 -  String: cRtfNull			= ''
.head 4 -  !
.head 4 -  !
.head 4 -  Number: cColumnNone		= 0
.head 4 -  Number: cColumnPage		= 1
.head 4 -  Number: cColumnContinue		= 2
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  ! Constantes pour les bords des paragraphes
.head 4 -  Number: cParBorderSingleT		= 1
.head 4 -  Number: cParBorderDoubleT		= 2
.head 4 -  Number: cParBorderShadowed	= 3
.head 4 -  Number: cParBorderDouble		= 4
.head 4 -  Number: cParBorderDotted		= 5
.head 4 -  Number: cParBorderDashed		= 6
.head 4 -  Number: cParBorderHairline		= 7
.head 4 -  Number: cParBorderInset		= 8
.head 4 -  Number: cParBorderDot		= 9
.head 4 -  Number: cParBorderDotDot		= 10
.head 4 -  Number: cParBorderOutset		= 11
.head 4 -  Number: cParBorderTriple		= 12
.head 4 -  Number: cParBorderWavy		= 13
.head 4 -  Number: cParBorderDWavy		= 14
.head 4 -  Number: cParBorderEmbossed	= 15
.head 4 -  Number: cParBorderEngraved		= 16
.head 4 -  Number: cParBorderFrame		= 17
.head 4 -  ! Number: cParBorderSingle		= 18
.head 4 -  ! Number: cParBorderSingle		= 19
.head 4 -  ! Number: cParBorderSingle		= 20
.head 4 -  ! Number: cParBorderSingle		= 2
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  ! Constantes pour l'ombrage des paragraphes
.head 4 -  Number: cParShadingHoriz		= 1
.head 4 -  Number: cParShadingVert		= 2
.head 4 -  Number: cParShadingFDiag		= 3
.head 4 -  Number: cParShadingBDiag		= 4
.head 4 -  Number: cParShadingCross		= 5
.head 4 -  Number: cParShadingDCross		= 6
.head 4 -  Number: cParShadingDKHoriz		= 7
.head 4 -  Number: cParShadingDKVert		= 8
.head 4 -  Number: cParShadingDKFDiag	= 9
.head 4 -  Number: cParShadingDKBDiag	= 10
.head 4 -  Number: cParShadingDKCross	= 11
.head 4 -  Number: cParShadingDKDCross	= 12
.head 4 -  ! Number: cParShading		= 1
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  ! Constantes pour les sections
.head 4 -  Number: cSectionNone		= 0x0001
.head 4 -  Number: cSectionCol		= 0x0002
.head 4 -  Number: cSectionPage		= 0x0003
.head 4 -  Number: cSectionEven		= 0x0004
.head 4 -  Number: cSectionOdd		= 0x0005
.head 4 -  Number: cSectionEndnote		= 0x0100
.head 4 -  !
.head 4 -  !
.head 4 -  !
.head 4 -  ! Constantes pour le format de papier
.head 4 -  Number: cPaperA4		= 1
.head 4 -  Number: cPaperA3		= 2
.head 4 -  !
.head 4 -  Number: cDocumentRTF		= 1
.head 4 -  Number: cDocumentOpenOffice 	= 2
.head 4 -  Number: cDocumentWord2000	= 3
.head 4 -  Number: cDocumentWord97		= 4
.head 3 -  Enumerations
.head 2 -  Resources
.head 2 +  Variables
.head 3 -  File Handle: wfh
.head 3 -  !
.head 3 -  Long String: lsStyle[*]
.head 3 -  Long String: lsStyleName[*]
.head 3 -  Number: nNbrStyle
.head 3 -  Number: nIndFooter
.head 3 -  Number: nIndHeader
.head 3 -  FunctionalVar: wRtfTableCells[*]
.head 4 -  Class: TRtfCellOld
.head 3 -  Number: wnRtfTableCells
.head 3 -  !
.head 3 -  Number: wnRtfWidth
.head 3 -  Number: wnRtfHeight
.head 3 -  Number: wnRtfMargeL
.head 3 -  Number: wnRtfMargeR
.head 3 -  Number: wnRtfMargeT
.head 3 -  Number: wnRtfMargeB
.head 3 -  ! /@@@@@ LS : 09/0399
.head 3 -  Boolean: wbLandscape
.head 3 -  !
.head 3 -  !
.head 3 -  Number: wniRtfNbrPar
.head 3 -  Number: gnRtfTableau
.head 3 -  !
.head 3 -  !
.head 3 -  Boolean: ibRtfDefinePaper
.head 3 -  Number: inRtfNbrAcco
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  ! Données interne pour la gestion des colonnes
.head 3 -  !
.head 3 -  Number: wnRtfNbrCol
.head 3 -  Number: wnRtfCurCol
.head 3 -  Number: inSizeCol[ * ]
.head 3 -  Number: inColRtfWidth
.head 3 -  Number: inColRtfHeight
.head 3 -  Number: inColRtfMargeL
.head 3 -  Number: inColRtfMargeR
.head 3 -  Number: inColRtfMargeT
.head 3 -  Number: inColRtfMargeB
.head 2 +  Internal Functions
.head 3 +  Function: RtfInit
.head 4 -  Description:
.head 4 -  Returns
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Set lsStyle[nNbrStyle] = '\\widctlpar\\adjustright \\fs20\\lang1036\\cgrid'
.head 5 -  Set lsStyleName[nNbrStyle] = '\\snext0 Normal;'
.head 5 -  Set nNbrStyle = nNbrStyle + 1
.head 5 -  Set lsStyle[nNbrStyle] = '\\s1\\sb240\\sa60\\keepn\\widctlpar \\b\\f5\\fs28\\lang1036\\kerning28 \\sbasedon0'
.head 5 -  Set lsStyleName[nNbrStyle] = '\\snext0 heading 1;'
.head 5 -  Set nNbrStyle = nNbrStyle + 1
.head 5 -  Set lsStyle[nNbrStyle] = '\\s15\\widctlpar\\tqc\\tx4536\\tqr\tx9072\\adjustright \\fs20\\lang1036\\cgrid'
.head 5 -  Set lsStyleName[nNbrStyle] = '\\sbasedon0 \\snext15 header;'
.head 5 -  Set nIndHeader = nNbrStyle
.head 5 -  Set nNbrStyle = nNbrStyle + 1
.head 5 -  Set lsStyle[nNbrStyle] = '\\s16\\widctlpar\\tqc\\tx4536\\tqr\\tx9072\\adjustright \\fs20\\lang1036\\cgrid'
.head 5 -  Set lsStyleName[nNbrStyle] = '\\sbasedon0 \\snext16 footer;'
.head 5 -  Set nIndFooter = nNbrStyle
.head 5 -  Set nNbrStyle = nNbrStyle + 1
.head 3 -  !
.head 3 +  Function: RtfDefHeader
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: wfh
.head 5 -  String: sL
.head 5 -  String: sC
.head 5 -  String: sR
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call RtfBeginHeader( wfh )
.head 5 -  Call RtfBeginFontSize( wfh, 8 )
.head 5 -  Call RtfParBorderT( wfh, FALSE )
.head 5 -  Call RtfParBorderL( wfh )
.head 5 -  Call RtfParBorderB( wfh, FALSE )
.head 5 -  Call RtfParBorderR( wfh )
.head 5 -  Call RtfSetTab( wfh, ( wnRtfWidth - wnRtfMargeL - wnRtfMargeR ) / 2, cTabCenter )
.head 5 -  Call RtfSetTab( wfh, ( wnRtfWidth - wnRtfMargeL - wnRtfMargeR ) , cTabRight )
.head 5 -  Call RtfWrite( wfh, sL )
.head 5 -  Call RtfTab( wfh )
.head 5 -  Call RtfWrite( wfh, sC   )
.head 5 -  Call RtfTab( wfh )
.head 5 -  Call RtfWrite( wfh, sR )
.head 5 -  Call RtfNewPar( wfh )
.head 5 -  Call RtfEndFontSize( wfh )
.head 5 -  Call RtfEndHeader( wfh )
.head 3 +  Function: RtfDefFooter
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: wfh
.head 5 -  String: sL
.head 5 -  String: sC
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Call RtfBeginFooter( wfh )
.head 5 -  Call RtfBeginFontSize( wfh, 8 )
.head 5 -  Call RtfParBorderT( wfh, FALSE )
.head 5 -  Call RtfSetTab( wfh, ( wnRtfWidth - wnRtfMargeL - wnRtfMargeR ) / 2, cTabCenter )
.head 5 -  Call RtfSetTab( wfh, ( wnRtfWidth - wnRtfMargeL - wnRtfMargeR ) , cTabRight )
.head 5 -  Call RtfWrite( wfh, '{\\field {\\*\\fldinst SYMBOL 33 \\\\f \"Wingdings\" \\\\s 8}}: ' || sL )
.head 5 -  Call RtfTab( wfh )
.head 5 -  Call RtfWrite( wfh, sC )
.head 5 -  Call RtfTab( wfh )
.head 5 -  Call RtfWrite( wfh, '{\\field {\\*\\fldinst SYMBOL 38 \\\\f \"Wingdings\" \\\\s 8}}{ : }' )
.head 5 -  Call RtfInsertField( wfh, cFieldPage )
.head 5 -  Call RtfWrite( wfh, ' / ' )
.head 5 -  Call RtfInsertField( wfh, cFieldNbrPages )
.head 5 -  Call RtfNewPar( wfh )
.head 5 -  Call RtfEndFontSize( wfh )
.head 5 -  Call RtfEndFooter( wfh )
.head 3 -  !
.head 3 -  !
.head 3 +  Function: RtfBeginFile
.head 4 -  Description: Debut du fichier RTF
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  ! /@@@@@ LS : 01/03/99
.head 5 -  Set s = '{\\rtf\\ansi \\ftnbj\\ftnnar '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = 1
.head 5 -  Set inRtfNbrAcco = 0
.head 5 -  Set wnRtfMargeL = 2.5
.head 5 -  Set wnRtfMargeB = 2.5
.head 5 -  Set wnRtfMargeT = 2.5
.head 5 -  Set wnRtfMargeR = 2.5
.head 5 -  ! Call RtfWrite( pfh, s )
.head 5 -  Set ibRtfDefinePaper = FALSE
.head 5 -  Set wbLandscape = FALSE
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 3 +  Function: RtfEndFile
.head 4 -  Description: Fin du fichier RTF
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 +  If wniRtfNbrPar > 0
.head 6 +  While wniRtfNbrPar
.head 7 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 7 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 7 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  ! Call RtfWrite( pfh, s )
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 3 -  !
.head 3 +  Function: RtfWriteStyleSheet
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  String: lls
.head 4 +  Actions
.head 5 -  Set lls = '{\\stylesheet'
.head 5 -  Set i = 0
.head 5 +  While i < nNbrStyle
.head 6 -  Set lls = lls || '{' || lsStyle[i] || ' ' || lsStyleName[i] || '}
'
.head 6 -  Set i = i + 1
.head 5 -  Set lls = lls || '}'
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfUseStyle
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: n
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  String: lls
.head 4 +  Actions
.head 5 -  Set lls = ''
.head 5 -  Set lls = lls || lsStyle[n] || ' '
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfInsertField
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: n
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  String: lls
.head 4 +  Actions
.head 5 -  Set lls = ''
.head 5 +  If n = cFieldPage
.head 6 -  Set lls = lls || '{\\field {\\*\\fldinst { PAGE  \\\\* MERGEFORMAT }}}'
.head 5 +  If n = cFieldNbrPages
.head 6 -  Set lls = lls || '{\\field {\\*\\fldinst { NUMPAGES  \\\\* MERGEFORMAT }}}'
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfParDefault
.head 4 -  Description: Restaure les valeurs par défaut des paragraphes
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\pard '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfNewPage
.head 4 -  Description: Nouvelle page
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\page 
\\par '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfNewSection
.head 4 -  Description: Nouvelle page
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\sect }\\sectd '
.head 5 +  If wbLandscape
.head 6 -  Set s = s || '\\lndscpsxn\\pgwsxn' || SalFmtFormatNumber( CMToTwips( wnRtfWidth ), '0' )
.head 6 -  Set s = s || '\\pghsxn' || SalFmtFormatNumber( CMToTwips( wnRtfHeight ), '0' )
.head 6 -  Set s = s || '\\marglsxn' || SalFmtFormatNumber( CMToTwips( wnRtfMargeL ), '0' )
.head 6 -  Set s = s || '\\margrsxn' || SalFmtFormatNumber( CMToTwips( wnRtfMargeR ), '0' )
.head 6 -  Set s = s || '\\margtsxn' || SalFmtFormatNumber( CMToTwips( wnRtfMargeT ), '0' )
.head 6 -  Set s = s || '\\margbsxn' || SalFmtFormatNumber( CMToTwips( wnRtfMargeB ), '0' )
.head 6 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfNewSectionCont
.head 4 -  Description: Nouvelle page
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\sect\\sectd\\sbknone'
.head 5 +  If wbLandscape
.head 6 -  Set s = s || '\\lndscpsxn'
.head 5 +  Else
.head 6 -  ! Set s = ''
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  ! Set s = '\\paperw' || SalFmtFormatNumber( CMToTwips( wnRtfWidth ), '0' )
.head 5 -  ! Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  ! Set s = '\\paperh' || SalFmtFormatNumber( CMToTwips( wnRtfHeight ), '0' )
.head 5 -  ! Set s = s || ' '
.head 5 -  ! Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfPaperWidth
.head 4 -  Description: Largeur du papier en CM
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnWidth
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Set s = '\\paperw' || SalFmtFormatNumber( CMToTwips( pnWidth ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wnRtfWidth = pnWidth
.head 3 +  Function: RtfPaperHeight
.head 4 -  Description: Hauteur du papier en CM
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnHeight
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Set s = '\\paperh' || SalFmtFormatNumber( CMToTwips( pnHeight ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wnRtfHeight = pnHeight
.head 3 +  Function: RtfMarginLeft
.head 4 -  Description: Marge de gauche en CM
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Set s = '\\margl' || SalFmtFormatNumber( CMToTwips( pn ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Set wnRtfMargeL = pn
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfMarginRight
.head 4 -  Description: Marge de droite en CM
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Set s = '\\margr' || SalFmtFormatNumber( CMToTwips( pn ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Set wnRtfMargeR = pn
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfMarginTop
.head 4 -  Description: Marge supérieur en CM
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Set s = '\\margt' || SalFmtFormatNumber( CMToTwips( pn ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Set wnRtfMargeT = pn
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfMarginBottom
.head 4 -  Description: Marge du bas en CM
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pn
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Set s = '\\margb' || SalFmtFormatNumber( CMToTwips( pn ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Set wnRtfMargeB = pn
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  ! Function: RtfLandscape
.head 4 -  Description: Place le papier en landscape
.head 4 -  Returns 
.head 4 +  Parameters 
.head 5 -  File Handle: pfh
.head 4 -  Static Variables 
.head 4 +  Local variables 
.head 5 -  String: s
.head 4 +  Actions 
.head 5 -  Set s = ''
.head 5 -  ! Set s = '\\landscape'
.head 5 -  Set s = '\\lndscpsxn'
.head 5 -  ! lndscpsxn
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wbLandscape = TRUE
.head 3 +  ! Function: RtfPortrait
.head 4 -  Description: Place le papier en landscape
.head 4 -  Returns 
.head 4 +  Parameters 
.head 5 -  File Handle: pfh
.head 4 -  Static Variables 
.head 4 +  Local variables 
.head 5 -  String: s
.head 4 +  Actions 
.head 5 -  Set s = ''
.head 5 -  ! Set s = '\\landscape'
.head 5 -  Set s = '\\lndscpsxn'
.head 5 -  ! lndscpsxn
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wbLandscape = FALSE
.head 3 +  Function: RtfLandscape
.head 4 -  Description: Place le papier en landscape
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  Number: w
.head 5 -  Number: h
.head 4 +  Actions
.head 5 +  If not wbLandscape
.head 6 -  Set s = cRtfNull
.head 6 -  ! Set s = '\\landscape'
.head 6 -  Set s = '\\lndscpsxn'
.head 6 -  ! lndscpsxn
.head 6 -  Set s = s || ' '
.head 6 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 6 -  Set wbLandscape = TRUE
.head 6 -  Set w = wnRtfWidth
.head 6 -  Set h = wnRtfHeight
.head 6 -  Call RtfPaperHeight( pfh, w )
.head 6 -  Call RtfPaperWidth( pfh, h )
.head 3 +  Function: RtfPortrait
.head 4 -  Description: Place le papier en landscape
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  Number: w
.head 5 -  Number: h
.head 4 +  Actions
.head 5 +  If wbLandscape
.head 6 -  Set w = wnRtfWidth
.head 6 -  Set h = wnRtfHeight
.head 6 -  Set s = cRtfNull
.head 6 -  Set s = '\\lndscpsxn \\sectdefaultcl'
.head 6 -  ! Set s = '\\sectd \\pgwsxn11906\\pghsxn16838\\linex0\\headery709\\footery709\\colsx709\\sectdefaultcl'
.head 6 -  Set s = '\\sectd \\linex0\\headery709\\footery709\\colsx709\\sectdefaultcl'
.head 6 -  Set s = s || '\\pgwsxn' || SalFmtFormatNumber( CMToTwips( h ), '0' )
.head 6 -  Set s = s || '\\pghsxn' || SalFmtFormatNumber( CMToTwips( w ), '0' )
.head 6 -  Set s = s || ' '
.head 6 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 6 -  Set wbLandscape = FALSE
.head 6 -  Call RtfPaperHeight( pfh, w )
.head 6 -  Call RtfPaperWidth( pfh, h )
.head 3 -  !
.head 3 -  !
.head 3 +  Function: RtfDefinePaper
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Boolean: pbA4
.head 5 -  Boolean: pbPortrait
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: lnL
.head 5 -  Number: lnH
.head 5 -  Number: n
.head 4 +  Actions
.head 5 -  Call RtfPortrait( pfh )
.head 5 +  If pbA4
.head 6 +  If pbPortrait
.head 7 -  Set lnL = 21
.head 7 -  Set lnH = 29.7
.head 6 +  Else
.head 7 -  Set lnL = 29.7
.head 7 -  Set lnH = 21
.head 5 +  Else
.head 6 +  If pbPortrait
.head 7 -  Set lnL = 29.7
.head 7 -  Set lnH = 42
.head 6 +  Else
.head 7 -  Set lnL = 42
.head 7 -  Set lnH = 29.7
.head 5 +  If ibRtfDefinePaper
.head 6 +  If wbLandscape
.head 7 -  Set n = lnL
.head 7 -  Set lnL = lnH
.head 7 -  Set lnH = n
.head 5 +  Else
.head 6 +  If pbPortrait
.head 7 -  Set n = lnL
.head 7 -  Set lnL = lnH
.head 7 -  Set lnH = n
.head 5 -  ! If ( pbA4 and not wbLandscape ) or ( not pbA4 and wbLandscape )
.head 5 -  ! Else
.head 5 -  ! Permutation des marges éventuelles
.head 5 +  If pbA4
.head 6 +  If wbLandscape
.head 7 -  Set n = wnRtfMargeL
.head 7 -  Set wnRtfMargeL = wnRtfMargeT
.head 7 -  Set wnRtfMargeT = wnRtfMargeR
.head 7 -  Set wnRtfMargeR = wnRtfMargeB
.head 7 -  Set wnRtfMargeB = n
.head 5 +  Else
.head 6 +  If not wbLandscape
.head 7 -  Set n = wnRtfMargeT
.head 7 -  Set wnRtfMargeT = wnRtfMargeL
.head 7 -  Set wnRtfMargeL = wnRtfMargeB
.head 7 -  Set wnRtfMargeB = wnRtfMargeR
.head 7 -  Set wnRtfMargeR = n
.head 5 -  !
.head 5 -  !
.head 5 -  ! Les fonctions RtfPortrait et RtfLandscape vont effectuer une permutation. 
.head 5 -  !
.head 5 -  ! Set n = lnL
.head 5 -  ! Set lnL = lnH
.head 5 -  ! Set lnH = n
.head 5 -  !
.head 5 -  Call RtfPaperWidth( pfh, lnL )
.head 5 -  Call RtfPaperHeight( pfh, lnH )
.head 5 +  If pbA4
.head 6 -  ! Call RtfPortrait( pfh )
.head 5 +  Else
.head 6 -  Call RtfLandscape( pfh )
.head 5 -  Call RtfMarginLeft( pfh, wnRtfMargeL )
.head 5 -  Call RtfMarginRight( pfh, wnRtfMargeR )
.head 5 -  Call RtfMarginTop( pfh, wnRtfMargeT )
.head 5 -  Call RtfMarginBottom( pfh, wnRtfMargeB )
.head 5 -  Set ibRtfDefinePaper = TRUE
.head 3 -  !
.head 3 -  !
.head 3 +  Function: RtfParLeft
.head 4 -  Description: Alignement du paragraphe à gauche
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\ql '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParCenter
.head 4 -  Description: Alignement du paragraphe au centre
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\qc '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParRight
.head 4 -  Description: Alignement du paragraphe à droite
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\qr '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParJust
.head 4 -  Description: Alignement du paragraphe à gauche et à droite
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\qj '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParFirstLine
.head 4 -  Description: Décalage de la 1ère ligne d'un paragraphe
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnPos
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Set s = '\\fi' || SalFmtFormatNumber( CMToTwips( pnPos ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParLeftIndent
.head 4 -  Description: Décalage du bord gauche du paragraphe
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnPos
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Set s = '\\li' || SalFmtFormatNumber( CMToTwips( pnPos ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParRightIndent
.head 4 -  Description: Décalage du bord droit du paragraphe
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnPos
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Set s = '\\ri' || SalFmtFormatNumber( CMToTwips( pnPos ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParSpaceBefore
.head 4 -  Description: Espace obligatoire avant un paragraphe  (en point )
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnPos
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = cRtfNull
.head 5 -  Set s = '\\sb' || SalFmtFormatNumber( pnPos * 20, '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParSpaceAfter
.head 4 -  Description: Espace obligatoire après un paragraphe  (en point )
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnPos
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = cRtfNull
.head 5 -  Set s = '\\sa' || SalFmtFormatNumber( pnPos * 20, '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 -  !
.head 3 +  Function: RtfBeginBlock
.head 4 -  Description: Début d'un bloc
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 5 -  Return TRUE
.head 3 +  Function: RtfEndBlock
.head 4 -  Description: Fin d'un bloc
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 -  !
.head 3 +  Function: RtfBeginBold
.head 4 -  Description: Début de l'attribut gras
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\b '
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 3 +  Function: RtfEndBold
.head 4 -  Description: Fin de l'attribut gras
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 3 +  Function: RtfBeginItalic
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\i '
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 3 +  Function: RtfEndItalic
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 3 +  Function: RtfBeginUnderline
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\ul '
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 3 +  Function: RtfEndUnderline
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 3 +  Function: RtfBeginDoubleUnderline
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\uld '
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 3 +  Function: RtfEndDoubleUnderline
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 3 -  !
.head 3 +  Function: RtfBeginFontSize
.head 4 -  Description: Taille de la police
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: nFontSize
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\fs' || SalFmtFormatNumber( 2 * nFontSize, '0' ) || ' '
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 3 +  Function: RtfEndFontSize
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 3 -  !
.head 3 +  Function: RtfBeginFooter
.head 4 -  Description: Début de la section de bas de page
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\footer '
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 3 +  Function: RtfEndFooter
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 3 +  Function: RtfBeginHeader
.head 4 -  Description: Début de la section de l'en-tête
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\header '
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 3 +  Function: RtfEndHeader
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 3 -  !
.head 3 +  Function: RtfNewLine
.head 4 -  Description: Fin de paragraphe
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  ! Set s = '\\par '
.head 5 -  Set s = '\\line '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfTab
.head 4 -  Description: Tabulation
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\tab '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 -  !
.head 3 +  Function: RtfSetTab
.head 4 -  Description: Définition d'une tabulation
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnPos
.head 5 -  Number: pnKind
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 +  If pnKind & cTabDot
.head 6 -  Set s = s || '\\tldot'
.head 6 -  Set pnKind = pnKind - cTabDot
.head 5 +  If pnKind & cTabHyphen
.head 6 -  Set s = s || '\\tlhyph'
.head 6 -  Set pnKind = pnKind - cTabHyphen
.head 5 +  If pnKind & cTabUnderline
.head 6 -  Set s = s || '\\tlul'
.head 6 -  Set pnKind = pnKind - cTabUnderline
.head 5 +  If pnKind & cTabThichLine
.head 6 -  Set s = s || '\\tlth'
.head 6 -  Set pnKind = pnKind - cTabThichLine
.head 5 +  If pnKind & cTabEqualSign
.head 6 -  Set s = s || '\\tleq'
.head 6 -  Set pnKind = pnKind - cTabEqualSign
.head 5 +  If pnKind = cTabDec
.head 6 -  Set s = s || '\\tqdec'
.head 5 +  If pnKind = cTabRight
.head 6 -  Set s = s || '\\tqr'
.head 5 +  If pnKind = cTabCenter
.head 6 -  Set s = s || '\\tqc'
.head 5 -  Set s = '\\widctlpar' || s || '\\tx' || SalFmtFormatNumber( CMToTwips( pnPos ), '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 -  !
.head 3 +  Function: RtfWrite
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Long String: pls
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: lls
.head 4 +  Actions
.head 5 -  Set lls = RtfCodeHexa( pls )
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfWriteMemo
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Long String: pls
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: lls
.head 5 -  Long String: ls1
.head 5 -  Number: i
.head 5 -  Number: l
.head 4 +  Actions
.head 5 -  Set lls = RtfCodeHexa( pls )
.head 5 -  Set ls1 = lls
.head 5 -  Set i = SalStrScan( lls, '
' )
.head 5 +  While i >= 0
.head 6 -  Set ls1 = SalStrLeftX( lls, i - 1 )
.head 6 -  Call SalFileWrite( pfh, ls1, SalStrLength( ls1 ) )
.head 6 -  Call RtfNewPar( pfh )
.head 6 -  Set lls = SalStrMidX( lls, i + SalStrLength( '
' ) , SalStrLength( lls ) )
.head 6 -  Set i = SalStrScan( lls, '
' )
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfInfo
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  String: psAuthor
.head 5 -  String: psOperator
.head 5 -  Date/Time: pdtCreation
.head 5 -  Number: pnVersion
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: lls
.head 4 +  Actions
.head 5 -  Set lls = ''
.head 5 -  Set lls = '{\\info'
.head 5 -  Set lls = lls || '{\\author ' || psAuthor || '}
'
.head 5 -  Set lls = lls || '{\\operator ' || psOperator || '}
'
.head 5 -  Set lls = lls || '{\\creatim\\yr' || SalFmtFormatNumber( SalDateYear( pdtCreation ), '0' ) || '\\mo' || SalFmtFormatNumber( SalDateMonth( pdtCreation ), '0' ) || '\\dy' || SalFmtFormatNumber( SalDateDay( pdtCreation ), '0' ) || '\\hr' || 
SalFmtFormatNumber( SalDateHour( pdtCreation ), '0' ) || '\\mi' || SalFmtFormatNumber( SalDateMinute( pdtCreation ), '0' ) || '}
'
.head 5 -  Set lls = lls || '{\\version' || SalFmtFormatNumber( pnVersion, '0' ) || '}
'
.head 5 -  Set lls = lls || '}
'
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 -  !
.head 3 -  !
.head 3 +  Function: RtfCodeHexa
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Long String:
.head 4 +  Parameters
.head 5 -  Long String: pls
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: lls
.head 5 -  String: c
.head 5 -  String: sCar[16]
.head 5 -  Number: n
.head 5 -  Number: n1
.head 5 -  Number: n2
.head 4 +  Actions
.head 5 -  Set sCar[0]='0'
.head 5 -  Set sCar[1]='1'
.head 5 -  Set sCar[2]='2'
.head 5 -  Set sCar[3]='3'
.head 5 -  Set sCar[4]='4'
.head 5 -  Set sCar[5]='5'
.head 5 -  Set sCar[6]='6'
.head 5 -  Set sCar[7]='7'
.head 5 -  Set sCar[8]='8'
.head 5 -  Set sCar[9]='9'
.head 5 -  Set sCar[10]='A'
.head 5 -  Set sCar[11]='B'
.head 5 -  Set sCar[12]='C'
.head 5 -  Set sCar[13]='D'
.head 5 -  Set sCar[14]='E'
.head 5 -  Set sCar[15]='F'
.head 5 -  Set lls = ''
.head 5 +  While SalStrFirstC( pls, n )
.head 6 +  If n < 128
.head 7 -  Set c = SalNumberToChar( n )
.head 7 +  ! If c = '\\'
.head 8 -  Set c = '\\' || c
.head 7 -  Set lls = lls || c
.head 6 +  Else
.head 7 -  Set n1 = n & 0x000F
.head 7 -  Set n2 = ( n & 0x00F0 ) / 16
.head 7 -  Set lls = lls || "\\'" || sCar[ n2 ] || sCar[ n1 ]
.head 5 -  Return lls
.head 3 +  Function: CMToTwips
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: n
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 -  Return ( n / 2.54 * 1440 )
.head 3 -  !
.head 3 -  ! Table function
.head 3 +  Function: RtfTableBegin
.head 4 -  Description: Debut du fichier RTF
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  ! Call RtfWrite( pfh, s )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 5 -  Set gnRtfTableau = gnRtfTableau + 1
.head 5 -  Return TRUE
.head 3 +  Function: RtfTableEnd
.head 4 -  Description: Fin du fichier RTF
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '} 
'
.head 5 -  ! Call RtfWrite( pfh, s )
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 5 -  Set gnRtfTableau = gnRtfTableau - 1
.head 3 +  Function: RtfTableBeginRow
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  Number: i
.head 5 -  Number: p
.head 4 +  Actions
.head 5 -  Set s = '{\\trowd \\trgaph70\\trleft-70\\widctlpar\\intbl'
.head 5 -  Set i = 1
.head 5 -  Set p = 0
.head 5 +  While i <= wnRtfTableCells
.head 6 +  If wRtfTableCells[i].bBorderL
.head 7 -  Set s = s || '\\clbrdrl\\brdrs\\brdrw10'
.head 6 +  If wRtfTableCells[i].bBorderT
.head 7 -  Set s = s || '\\clbrdrt\\brdrs\\brdrw10'
.head 6 +  If wRtfTableCells[i].bBorderR
.head 7 -  Set s = s || '\\clbrdrr\\brdrs\\brdrw10'
.head 6 +  If wRtfTableCells[i].bBorderB
.head 7 -  Set s = s || '\\clbrdrb\\brdrs\\brdrw10'
.head 6 +  If wRtfTableCells[i].bBorderDL
.head 7 -  Set s = s || '\\clbrdrl\\brdrdb\\brdrw10'
.head 6 +  If wRtfTableCells[i].bBorderDT
.head 7 -  Set s = s || '\\clbrdrt\\brdrdb\\brdrw10'
.head 6 +  If wRtfTableCells[i].bBorderDR
.head 7 -  Set s = s || '\\clbrdrr\\brdrdb\\brdrw10'
.head 6 +  If wRtfTableCells[i].bBorderDB
.head 7 -  Set s = s || '\\clbrdrb\\brdrdb\\brdrw10'
.head 6 +  If wRtfTableCells[i].nShading != 0
.head 7 -  Set s = s || '\\clshdng' || SalFmtFormatNumber( wRtfTableCells[i].nShading * 100, '0' )
.head 6 +  If wRtfTableCells[i].nMinHeight != 0
.head 7 -  Set s = s || '\\trrh' || SalFmtFormatNumber( wRtfTableCells[i].nMinHeight , '0' )
.head 6 -  Set p = p + wRtfTableCells[i].nLength
.head 6 +  If p != 0
.head 7 -  Set s = s || '\\cellx' || SalFmtFormatNumber( p, '0' ) 
.head 6 -  Set i = i + 1
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 5 -  ! Call RtfWrite( pfh, s )
.head 5 -  Return TRUE
.head 3 +  Function: RtfTableEndRow
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\pard \\widctlpar\\intbl\\adjustright \\row }
'
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  ! Call RtfWrite( pfh, s )
.head 3 +  Function: RtfTableBeginCell
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  ! Call RtfWrite( pfh, s )
.head 5 -  Return TRUE
.head 3 +  Function: RtfTableEndCell
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\cell '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 -  ! Call RtfWrite( pfh, s )
.head 3 +  Function: RtfTableRowTitle
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\trhdr '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfTableDefineCellSize
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nCell
.head 5 -  Number: nSize
.head 5 -  Number: nKindSize
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If nCell > wnRtfTableCells
.head 6 -  Set wnRtfTableCells = nCell
.head 5 +  If nKindSize = cPct
.head 6 -  Set wRtfTableCells[ nCell ].nLength = CMToTwips( nSize / 100 * (wnRtfWidth - wnRtfMargeL - wnRtfMargeR ) )  
.head 5 +  Else
.head 6 -  Set wRtfTableCells[ nCell ].nLength = CMToTwips( nSize )
.head 3 +  Function: RtfTableDefineCellBorderL
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nCell
.head 5 -  Boolean: b
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If nCell > wnRtfTableCells
.head 6 -  Set wnRtfTableCells = nCell
.head 5 -  Set wRtfTableCells[ nCell ].bBorderL = b
.head 3 +  Function: RtfTableDefineCellBorderR
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nCell
.head 5 -  Boolean: b
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If nCell > wnRtfTableCells
.head 6 -  Set wnRtfTableCells = nCell
.head 5 -  Set wRtfTableCells[ nCell ].bBorderR = b
.head 3 +  Function: RtfTableDefineCellBorderT
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nCell
.head 5 -  Boolean: b
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If nCell > wnRtfTableCells
.head 6 -  Set wnRtfTableCells = nCell
.head 5 -  Set wRtfTableCells[ nCell ].bBorderT = b
.head 3 +  Function: RtfTableDefineCellBorderB
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nCell
.head 5 -  Boolean: b
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If nCell > wnRtfTableCells
.head 6 -  Set wnRtfTableCells = nCell
.head 5 -  Set wRtfTableCells[ nCell ].bBorderB = b
.head 3 +  Function: RtfTableReset
.head 4 -  Description:
.head 4 -  Returns
.head 4 -  Parameters
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 4 +  Actions
.head 5 -  Set i = wnRtfTableCells
.head 5 +  While i
.head 6 -  Set wRtfTableCells[ i ].bBorderB = FALSE
.head 6 -  Set wRtfTableCells[ i ].bBorderT = FALSE
.head 6 -  Set wRtfTableCells[ i ].bBorderL = FALSE
.head 6 -  Set wRtfTableCells[ i ].bBorderR = FALSE
.head 6 -  Set wRtfTableCells[ i ].bBorderDB = FALSE
.head 6 -  Set wRtfTableCells[ i ].bBorderDT = FALSE
.head 6 -  Set wRtfTableCells[ i ].bBorderDL = FALSE
.head 6 -  Set wRtfTableCells[ i ].bBorderDR = FALSE
.head 6 -  Set wRtfTableCells[ i ].nShading = 0
.head 6 -  Set wRtfTableCells[ i ].nMinHeight = 0
.head 6 -  Set i = i - 1
.head 5 -  Set wnRtfTableCells = 0
.head 3 -  !
.head 3 -  !
.head 3 -  ! /@@@@@ LS : 01/03/99
.head 3 +  Function: RtfFootnote
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  String: ps
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: lls
.head 4 +  Actions
.head 5 -  ! Set lls = ''
.head 5 -  ! Set lls = lls || '{\\super\\chftn }{\\*\\footnote \\fs18 {\\super\\chftn }' || ps || '}
'
.head 5 -  Set lls = '{\\super \\chftn '
.head 5 -  Set lls = lls || '{\\footnote {\\super \\chftn } \\fs18 {' || ps || '}}}'
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfBeginHidden
.head 4 -  Description: Début de l'attribut gras
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\v '
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfEndHidden
.head 4 -  Description: Fin de l'attribut gras
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '}
'
.head 5 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 5 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfTableDefineCellShading
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nCell
.head 5 -  Number: n
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If nCell > wnRtfTableCells
.head 6 -  Set wnRtfTableCells = nCell
.head 5 -  Set wRtfTableCells[ nCell ].nShading = n
.head 3 +  Function: RtfRestartNumPage
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: n
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: lls
.head 4 +  Actions
.head 5 -  Set lls = ''
.head 5 -  Set lls = lls || '\\pgnstarts' || SalFmtFormatNumber( n, '0' ) || '\\pgnrestart 
'
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfTableLeftIdent
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: n
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: lls
.head 4 +  Actions
.head 5 -  Set lls = ''
.head 5 -  Set lls = lls || '\\trleft' || SalFmtFormatNumber( CMToTwips( n ), '0' ) || ' '
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfParBorderT
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Boolean: middle
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\brdrt\\brdrs\\brdrw15\\brsp20 '
.head 5 +  If middle
.head 6 -  Set s = '\\brdrbtw\\brdrs\\brdrw15\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParBorderB
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Boolean: middle
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\brdrb\\brdrs\\brdrw15\\brsp20 '
.head 5 +  If middle
.head 6 -  Set s = '\\brdrbtw\\brdrs\\brdrw15\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParBorderL
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\brdrl\\brdrs\\brdrw15\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParBorderR
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\brdrr\\brdrs\\brdrw15\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParBox
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\box\\brdrs\\brdrw15\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParBorderTW
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Boolean: middle
.head 5 -  Number: pnWidth
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  String: sWidth
.head 4 +  Actions
.head 5 -  Set sWidth = SalFmtFormatNumber( pnWidth, '0' )
.head 5 -  Set s = '\\brdrt'
.head 5 +  If middle
.head 6 -  Set s = '\\brdrbtw'
.head 5 -  Set s = s || '\\brdrs\\brdrw'|| sWidth || '\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParBorderBW
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Boolean: middle
.head 5 -  Number: pnWidth
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  String: sWidth
.head 4 +  Actions
.head 5 -  Set sWidth = SalFmtFormatNumber( pnWidth, '0' )
.head 5 -  Set s = '\\brdrb\\brdrs\\brdrw'|| sWidth || '\\brsp20 '
.head 5 +  If middle
.head 6 -  Set s = '\\brdrbtw\\brdrs\\brdrw'|| sWidth || '\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParBorderLW
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnWidth
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  String: sWidth
.head 4 +  Actions
.head 5 -  Set sWidth = SalFmtFormatNumber( pnWidth, '0' )
.head 5 -  Set s = '\\brdrl\\brdrs\\brdrw'|| sWidth || '\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParBorderRW
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnWidth
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  String: sWidth
.head 4 +  Actions
.head 5 -  Set sWidth = SalFmtFormatNumber( pnWidth, '0' )
.head 5 -  Set s = '\\brdrr\\brdrs\\brdrw'|| sWidth || '\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParBoxW
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnWidth
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  String: sWidth
.head 4 +  Actions
.head 5 -  Set sWidth = SalFmtFormatNumber( pnWidth, '0' )
.head 5 -  Set s = '\\box\\brdrs\\brdrw'|| sWidth || '\\brsp20 '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfParShadow
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\brdrsh '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfWriteln
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Long String: pls
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: lls
.head 4 +  Actions
.head 5 -  Set lls = RtfCodeHexa( pls )
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 5 -  ! Call RtfNewLine( pfh )
.head 5 -  Call RtfNewPar( pfh )
.head 3 +  Function: RtfNewPar
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\par '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfTableDefineMinHeight
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  Number: nCell
.head 5 -  Number: nSize
.head 4 -  Static Variables
.head 4 -  Local variables
.head 4 +  Actions
.head 5 +  If nCell > wnRtfTableCells
.head 6 -  Set wnRtfTableCells = nCell
.head 5 -  Set wRtfTableCells[ nCell ].nLength = CMToTwips( nSize )
.head 3 -  ! /@@@@@ LS : 09/03/99
.head 3 +  Function: RtfAttr
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnAttr
.head 5 -  Number: pnFontSize
.head 5 -  ! Number: pnShading
.head 5 -  ! Number: pnMinHeight
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = ''
.head 5 +  If pnAttr & cBold
.head 6 -  Set s = s || '\\b'
.head 5 +  If pnAttr & cStrike
.head 6 -  Set s = s || '\\strike'
.head 5 +  If pnAttr & cItalic
.head 6 -  Set s = s || '\\i'
.head 5 +  If pnAttr & cCaps
.head 6 -  Set s = s || '\\caps'
.head 5 +  If pnAttr & cDoubleUnderline
.head 6 -  Set s = s || '\\uldb'
.head 5 +  If pnAttr & cDotUnderline
.head 6 -  Set s = s || '\\uld'
.head 5 +  If pnAttr & cWordUnderline
.head 6 -  Set s = s || '\\ulw'
.head 5 +  If pnAttr & cUnderline
.head 6 -  Set s = s || '\\ul'
.head 5 +  If pnAttr & cParCenter
.head 6 -  Set s = s || '\\qc'
.head 5 +  If pnAttr & cParRight
.head 6 -  Set s = s || '\\qr'
.head 5 +  If pnAttr & cParJust
.head 6 -  Set s = s || '\\qj'
.head 5 +  If pnAttr & cParSolidaire
.head 6 -  Set s = s || '\\keepn'
.head 5 +  If pnAttr & cLineSolidaire
.head 6 -  Set s = s || '\\keep'
.head 5 +  If pnFontSize != 0
.head 6 -  Set s = s || '\\fs' || SalFmtFormatNumber( pnFontSize * 2, '0' )
.head 5 -  Set s = s || ' '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfTOCIndex
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  String: psRef
.head 5 -  Number: pnLevel
.head 5 -  String: psT
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\tc'
.head 5 +  If pnLevel != 0
.head 6 -  Set s = s || '\\tcl' || SalFmtFormatNumber( pnLevel, '0' )
.head 5 +  If psT != ''
.head 6 +  If SalStrFirstC( psT, i )
.head 7 -  Set s = s || '\\tcf' || SalFmtFormatNumber( i, '0' )
.head 5 -  Set s = s || '\\v ' || psRef
.head 5 -  Set s = s || '}'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfTOC
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnLevel
.head 5 -  String: psT
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  Number: i
.head 4 +  Actions
.head 5 +  If pnLevel = 0
.head 6 -  Set pnLevel = 3
.head 5 +  If psT != ''
.head 6 -  Set psT = ' ' || psT
.head 5 -  Set s = '{\\field\\fldedit{\\*\\fldinst  TOC \\\\o "1-' || SalFmtFormatNumber( pnLevel, '0' ) || '" \\\\f' || psT || ' }{\\fldrslt Mise à jour du sommaire (bouton droit de la souris sur ce champ)}}' 
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfINDIndex
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  String: psRef
.head 5 -  String: psT
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '{\\xe'
.head 5 +  ! If pnLevel != 0
.head 6 -  Set s = s || '\\tcl' || SalFmtFormatNumber( pnLevel, '0' )
.head 5 +  If psT != ''
.head 6 +  If SalStrFirstC( psT, i )
.head 7 -  Set s = s || '\\xef' || SalFmtFormatNumber( i, '0' )
.head 5 -  Set s = s || '\\v ' || psRef
.head 5 -  Set s = s || '}'
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfIND
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  String: psT
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 5 -  Number: i
.head 4 +  Actions
.head 5 +  If psT != ''
.head 6 -  Set psT = ' ' || psT
.head 5 -  Set s = '{\\field{\\*\\fldinst  INDEX \\\\e "\\tab " \\\\c "1" \\\\{\\fs18 f' || psT || '} }{\\fldrslt \\sbknone\\linex0\\headery709\\footery709\\cols1 \\tqr\\tldot\\tx' || SalFmtFormatNumber( ( CMToTwips( ( wnRtfWidth - wnRtfMargeL - 
wnRtfMargeR ) - 1 ) ) , '0' ) || ' Veuillez mettre à jour les champs (bouton droit de la souris)}}\\par ' 
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 +  Function: RtfPersonalFootnote
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  String: psMarque
.head 5 -  String: ps
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Long String: lls
.head 4 +  Actions
.head 5 -  ! Set lls = ''
.head 5 -  ! Set lls = lls || '{\\super\\chftn }{\\*\\footnote \\fs18 {\\super\\chftn }' || ps || '}
'
.head 5 -  Set lls = '{\\super ' || psMarque
.head 5 -  Set lls = lls || '{\\footnote {\\super ' || psMarque || '} \\fs18 {' || ps || '}}}'
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfFmtString
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Long String:
.head 4 +  Parameters
.head 5 -  Long String: psString
.head 5 -  String: psFormat
.head 5 -  Number: pnSize
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  Number: lnDef
.head 5 -  String: lsFormat
.head 5 -  Number: lnFormat
.head 5 -  Number: lnFormatDef
.head 5 -  Number: lnSize
.head 5 -  String: lsSize
.head 5 -  Number: lnDispo
.head 5 -  Number: lnLargeur
.head 5 -  Number: j
.head 5 -  String: c
.head 5 -  Long String: ls
.head 4 +  Actions
.head 5 -  Set lsFormat = psFormat
.head 5 -  Set ls = '{'
.head 5 -  Set j = SalStrLength( lsFormat )
.head 5 -  Set lnFormat = 0
.head 5 -  Set lnSize = 1
.head 5 -  Set j = 0
.head 5 +  While j < SalStrLength( lsFormat )
.head 6 -  ! Set j = j - 1
.head 6 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 6 +  If c = 'B'
.head 7 -  Set ls = ls || '\\b'
.head 6 +  Else If c = 'c'
.head 7 -  Set ls = ls || '\\caps'
.head 6 +  Else If c = 'I'
.head 7 -  Set ls = ls || '\\i'
.head 6 +  Else If c = 'U'
.head 7 -  Set ls = ls || '\\ul'
.head 6 +  Else If c = 'C'
.head 7 -  Set ls = ls || '\\qc'
.head 6 +  Else If c = 'L'
.head 7 -  Set ls = ls || '\\ql'
.head 6 +  Else If c = 'R'
.head 7 -  Set ls = ls || '\\qr'
.head 6 +  Else If c = 'J'
.head 7 -  Set ls = ls || '\\qj'
.head 6 +  ! Else If c = '%'
.head 7 -  Set lsSize = SalStrLeftX( lsFormat, j)
.head 7 +  If lsSize = '*'
.head 8 -  Set lnDef = i
.head 8 -  Set lcFormat[i] = cPct
.head 8 -  Set lnSize = 1
.head 8 -  Set j = 0
.head 8 -  Set lnFormatDef = lnFormat
.head 7 +  Else 
.head 8 +  If SalStrIsValidNumber( lsSize )
.head 9 -  Set lnSize = SalStrToNumber( lsSize )
.head 9 -  Set lcFormat[i] = cPct
.head 9 -  Set lnSize = lnLargeur * lnSize / 100
.head 9 -  Set lnDispo = lnDispo - lnSize
.head 9 -  Set lnFormatDef = lnFormat
.head 9 -  Set j = 0
.head 6 +  ! Else If SalStrScan( '0123456789,.*', c ) >= 0
.head 7 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 7 -  Set lsSize = ''
.head 7 +  While ( j < SalStrLength( lsFormat ) ) and ( SalStrScan( '0123456789,.*', c ) >= 0 )
.head 8 -  Set lsSize = lsSize || c
.head 8 -  Set j = j + 1
.head 8 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 7 +  If c = '%'
.head 8 -  Set lcFormat[i] = cPct
.head 7 +  Else 
.head 8 -  Set j = j - 1
.head 7 +  If lsSize = '*'
.head 8 -  Set lnDef = i
.head 8 -  Set lnSize = 1
.head 8 -  ! Set j = 0
.head 8 -  Set lnFormatDef = lnFormat
.head 7 +  Else 
.head 8 +  If SalStrIsValidNumber( lsSize )
.head 9 -  Set lnSize = SalStrToNumber( lsSize )
.head 9 -  ! Set j = 0
.head 9 -  Set lnDispo = lnDispo - lnSize
.head 6 -  Set j = j + 1
.head 5 +  If pnSize != 0
.head 6 -  Set ls = ls || '\\fs' || SalFmtFormatNumber( pnSize * 2, '0' )
.head 5 +  If SalStrLength( ls ) > 1
.head 6 -  Set ls = ls || ' '
.head 5 -  Set ls = ls || psString || '}'
.head 5 -  Return ls
.head 3 +  Function: RtfParSolidaire
.head 4 -  Description: Alignement du paragraphe à gauche et à droite
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: s
.head 4 +  Actions
.head 5 -  Set s = '\\keepn '
.head 5 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 3 -  !
.head 3 -  !
.head 3 +  Function: RtfBeginColumn
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Boolean:
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Long String: psFormat
.head 5 -  Number: pnSautSection
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: lsArr[*]
.head 5 -  Number: lnNbrArr
.head 5 -  Number: i
.head 5 -  Number: lnDef
.head 5 -  String: lsFormat
.head 5 -  Number: lnFormat
.head 5 -  Number: lnFormatDef
.head 5 -  Number: lnSize
.head 5 -  Number: lnDispo
.head 5 -  String: lsSize
.head 5 -  Number: lnLargeur
.head 5 -  Number: j
.head 5 -  String: c
.head 5 -  Number: lcFormat[*]
.head 5 -  Number: lnNbrCol
.head 5 -  String: lsCol
.head 4 +  Actions
.head 5 +  Select Case pnSautSection
.head 6 +  Case cColumnPage
.head 7 -  Call RtfNewPage( pfh )
.head 7 -  Break
.head 6 +  Case cColumnContinue
.head 7 -  Call RtfNewSectionCont( pfh )
.head 7 -  Break
.head 6 -  Default
.head 5 -  Set lnNbrArr = SalStrTokenize( psFormat, '', '|', lsArr )
.head 5 -  Set lnNbrCol = ( lnNbrArr + 1 ) / 2
.head 5 -  Set wnRtfNbrCol = lnNbrCol
.head 5 -  Set lnLargeur = wnRtfWidth - wnRtfMargeL - wnRtfMargeR
.head 5 -  Set lnDispo = lnLargeur
.head 5 -  Set lnDef = -1
.head 5 -  Set lnFormatDef = 0
.head 5 -  Set lsCol = '\\cols' || SalNumberToStrX( lnNbrCol, 0 ) || '\\colsx708'
.head 5 -  Set i = 1
.head 5 +  While i <= lnNbrArr
.head 6 -  Set lsFormat = lsArr[i-1]
.head 6 -  Set j = SalStrLength( lsFormat )
.head 6 -  Set lnFormat = 0
.head 6 -  Set lnSize = 1
.head 6 -  Set lcFormat[i] = cAbs
.head 6 -  Set j = 0
.head 6 +  If lsFormat != ''
.head 7 +  While j < SalStrLength( lsFormat )
.head 8 -  ! Set j = j - 1
.head 8 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 8 +  If SalStrScan( '0123456789,.*', c ) >= 0
.head 9 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 9 -  Set lsSize = ''
.head 9 +  While ( j < SalStrLength( lsFormat ) ) and ( SalStrScan( '0123456789,.*', c ) >= 0 )
.head 10 -  Set lsSize = lsSize || c
.head 10 -  Set j = j + 1
.head 10 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 9 +  If c = '%'
.head 10 -  Set lcFormat[i] = cPct
.head 9 +  Else
.head 10 -  Set j = j - 1
.head 9 +  If lsSize = '*'
.head 10 -  Set lnDef = i
.head 10 -  Set lnSize = 1
.head 10 -  ! Set j = 0
.head 10 -  Set lnFormatDef = lnFormat
.head 9 +  Else
.head 10 +  If SalStrIsValidNumber( lsSize )
.head 11 -  Set lnSize = SalStrToNumber( lsSize )
.head 11 -  Set inSizeCol[ i ] = lnSize
.head 11 -  ! Set j = 0
.head 11 -  Set lnDispo = lnDispo - lnSize
.head 8 +  If lsSize = '*'
.head 9 -  Set lnFormatDef = lnFormat
.head 8 -  Set j = j + 1
.head 7 +  ! If SalNumberMod( i, 2 )
.head 8 -  Set lsCol = lsCol || '\\colno' || SalNumberToStrX( i, 0 ) || '\\colw' || CMToTwips( lnSize )
.head 7 +  ! Else
.head 8 -  Set lsCol = lsCol || '\\colsr' || CMToTwips( lnSize )
.head 6 -  Set i = i + 1
.head 5 +  If lnDef >= 0
.head 6 -  ! Set lsArr[ lnDef - 1 ] = SalNumberToStrX( lnDispo, 0 )
.head 6 -  Set inSizeCol[ lnDef ] = lnDispo
.head 5 -  Set i = 1
.head 5 -  Set j = 0
.head 5 +  While i <= lnNbrArr
.head 6 +  If SalNumberMod( i, 2 )
.head 7 -  Set j = j + 1
.head 7 -  Set lsCol = lsCol || '\\colno' || SalNumberToStrX( j, 0 ) || '\\colw' || SalNumberToStrX( CMToTwips( inSizeCol[ i ] ),  0 )
.head 6 +  Else
.head 7 -  Set lsCol = lsCol || '\\colsr' || SalNumberToStrX( CMToTwips( inSizeCol[ i ] ), 0 )
.head 6 -  ! Set lsFormat = lsArr[i-1]
.head 6 -  ! Set j = SalStrLength( lsFormat )
.head 6 -  ! Set lnFormat = 0
.head 6 -  ! Set lnSize = 1
.head 6 -  ! Set lcFormat[i] = cAbs
.head 6 -  ! Set j = 0
.head 6 +  ! If lsFormat != ''
.head 7 +  While j < SalStrLength( lsFormat )
.head 8 -  ! Set j = j - 1
.head 8 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 8 +  If SalStrScan( '0123456789,.*', c ) >= 0
.head 9 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 9 -  Set lsSize = ''
.head 9 +  While ( j < SalStrLength( lsFormat ) ) and ( SalStrScan( '0123456789,.*', c ) >= 0 )
.head 10 -  Set lsSize = lsSize || c
.head 10 -  Set j = j + 1
.head 10 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 9 +  If c = '%'
.head 10 -  Set lcFormat[i] = cPct
.head 9 +  Else 
.head 10 -  Set j = j - 1
.head 9 +  If lsSize = '*'
.head 10 -  Set lnDef = i
.head 10 -  Set lnSize = 1
.head 10 -  ! Set j = 0
.head 10 -  Set lnFormatDef = lnFormat
.head 9 +  Else 
.head 10 +  If SalStrIsValidNumber( lsSize )
.head 11 -  Set lnSize = SalStrToNumber( lsSize )
.head 11 -  ! Set j = 0
.head 11 -  Set lnDispo = lnDispo - lnSize
.head 8 +  If lsSize = '*'
.head 9 -  Set lnFormatDef = lnFormat
.head 8 -  Set j = j + 1
.head 6 -  Set i = i + 1
.head 5 -  Set lsCol = lsCol || '{ '
.head 5 -  Call SalFileWrite( pfh, lsCol, SalStrLength( lsCol ) )
.head 5 -  Set inColRtfWidth = wnRtfWidth
.head 5 -  Set inColRtfHeight = wnRtfHeight
.head 5 -  Set inColRtfMargeL = wnRtfMargeL
.head 5 -  Set inColRtfMargeR = wnRtfMargeR
.head 5 -  Set inColRtfMargeT = wnRtfMargeT
.head 5 -  Set inColRtfMargeB = wnRtfMargeB
.head 5 -  !
.head 5 -  Set wnRtfCurCol = 1
.head 5 -  Set wnRtfWidth = inSizeCol[ wnRtfCurCol ]
.head 5 -  Set wnRtfMargeL = 0
.head 5 -  Set wnRtfMargeR = 0
.head 5 -  Set wnRtfMargeT = 0
.head 5 -  Set wnRtfMargeB = 0
.head 5 -  !
.head 5 -  Return TRUE
.head 3 +  Function: RtfNextColumn
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  String: lsCol
.head 4 +  Actions
.head 5 +  If wnRtfCurCol < wnRtfNbrCol
.head 6 -  Set wnRtfCurCol = wnRtfCurCol + 2
.head 6 -  Set wnRtfWidth = inSizeCol[ wnRtfCurCol ]
.head 6 -  Set lsCol = '\\column '
.head 6 -  Call SalFileWrite( pfh, lsCol, SalStrLength( lsCol ) )
.head 3 +  Function: RtfEndColumn
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  Number: pnSautSection
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  String: lsCol
.head 4 +  Actions
.head 5 -  ! Set i = wnRtfNbrCol
.head 5 +  While wnRtfCurCol < wnRtfNbrCol
.head 6 -  Call RtfNextColumn( pfh )
.head 5 -  Set lsCol = '
} '
.head 5 -  Call SalFileWrite( pfh, lsCol, SalStrLength( lsCol ) )
.head 5 +  Select Case pnSautSection
.head 6 +  Case cColumnPage
.head 7 -  Call RtfNewPage( pfh )
.head 7 -  Break
.head 6 +  Case cColumnContinue
.head 7 -  Call RtfNewSectionCont( pfh )
.head 7 -  Break
.head 6 -  Default
.head 5 -  Set wnRtfWidth = inColRtfWidth
.head 5 -  Set wnRtfHeight = inColRtfHeight
.head 5 -  Set wnRtfMargeL = inColRtfMargeL
.head 5 -  Set wnRtfMargeR = inColRtfMargeR
.head 5 -  Set wnRtfMargeT = inColRtfMargeT
.head 5 -  Set wnRtfMargeB = inColRtfMargeB
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  ! 18/09/2003
.head 3 -  !
.head 3 +  Function: __RtfReplaceStringX
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  String:
.head 4 +  Parameters
.head 5 -  String: psSource
.head 5 -  String: psSearch
.head 5 -  String: psReplace
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  String: so
.head 4 +  Actions
.head 5 -  Set so = ''
.head 5 -  Set i = 0
.head 5 +  While i < SalStrLength( psSource ) 
.head 6 +  If SalStrMidX( psSource, i, SalStrLength( psSearch ) ) = psSearch
.head 7 -  Set so = so || psReplace
.head 7 -  Set i = i - 1 + SalStrLength( psSearch )
.head 6 +  Else
.head 7 -  Set so = so || SalStrMidX( psSource, i, 1 )
.head 6 -  Set i = i + 1
.head 5 -  Return so
.head 3 +  Function: RtfIncludeFile
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  String: psFileName
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  String: lls
.head 4 +  Actions
.head 5 -  Set lls = ''
.head 5 -  Set lls = __RtfReplaceStringX( psFileName, '\\', '\\\\\\\\' )
.head 5 -  Set lls = '{\\field {\\*\\fldinst {\\ltrch INCLUDETEXT "' || lls || '" }}{\\fldrslt {\\rtlch \\af0 \\ltrch { Cliquer avec le bouton droit pour mettre à jour la zone}\\par }}}'
.head 5 +  ! If n = cFieldPage
.head 6 -  Set lls = lls || '{\\field {\\*\\fldinst { PAGE  \\\\* MERGEFORMAT }}}'
.head 5 +  ! If n = cFieldNbrPages
.head 6 -  Set lls = lls || '{\\field {\\*\\fldinst { NUMPAGES  \\\\* MERGEFORMAT }}}'
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: RtfIncludePicture
.head 4 -  Description:
.head 4 -  Returns
.head 4 +  Parameters
.head 5 -  File Handle: pfh
.head 5 -  String: psFileName
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: i
.head 5 -  String: lls
.head 4 +  Actions
.head 5 -  Set lls = ''
.head 5 -  Set lls = __RtfReplaceStringX( psFileName, '\\', '\\\\\\\\' )
.head 5 -  Set lls = '{\\field {\\*\\fldinst {\\ltrch INCLUDEPICTURE "' || lls || '" \\\\* MERGEFORMAT \\\\d }}{\\fldrslt {\\rtlch \\af0 \\ltrch { Cliquer avec le bouton droit pour mettre à jour la zone}\\par }}}'
.head 5 +  ! If n = cFieldPage
.head 6 -  Set lls = lls || '{\\field {\\*\\fldinst { PAGE  \\\\* MERGEFORMAT }}}'
.head 5 +  ! If n = cFieldNbrPages
.head 6 -  Set lls = lls || '{\\field {\\*\\fldinst { NUMPAGES  \\\\* MERGEFORMAT }}}'
.head 5 -  Call SalFileWrite( pfh, lls, SalStrLength( lls ) )
.head 3 +  Function: IN2TWIPS
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: pnValue
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: n
.head 4 +  Actions
.head 5 -  Set n = pnValue * 1440
.head 5 -  Set n = SalNumberRound( n )
.head 5 -  Return n
.head 3 +  Function: CM2TWIPS
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: pnValue
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: n
.head 4 +  Actions
.head 5 -  Set n = pnValue / 2.54
.head 5 -  Set n = IN2TWIPS( n )
.head 5 -  Return n
.head 3 +  Function: TWIPS2IN
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: pnValue
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: n
.head 4 +  Actions
.head 5 -  Set n = pnValue / 1440
.head 5 -  Return n
.head 3 +  Function: TWIPS2CM
.head 4 -  Description:
.head 4 +  Returns
.head 5 -  Number:
.head 4 +  Parameters
.head 5 -  Number: pnValue
.head 4 -  Static Variables
.head 4 +  Local variables
.head 5 -  Number: n
.head 4 +  Actions
.head 5 -  Set n = TWIPS2IN( pnValue )
.head 5 -  Set n = n * 2.54
.head 5 -  Return n
.head 2 -  Named Menus
.head 2 +  Class Definitions
.data RESOURCE 0 0 1 3760730002
0000: 41040000E1010000 0000000000000000 0200000500FFFF01 00160000436C6173
0020: 73566172004F7574 6C696E6552006567 496E666F13013800 00000F6300446573
0040: 6B746F704C006973 74426F784E01C200 0B00000043190000 0001FA0000FF6F19
0060: 00D6190001FE00FF 833200000019B500 0100FFFF604B0000 001900ED0100FF3F
0080: 6400580000190001 FB00FF0F7D000000 D6190001FE00FF83 9600000019B50001
00A0: 00FFFF60AF000000 1900ED0100FF3FC8 00580000190001FB 00FF0FE1000000D6
00C0: 190001FE00FF83FA 00000019B5000100 FFFF100180640000 010001000B634469
00E0: 724C3E697C00C000 00040000005B1900 01FB00FF6F1900D6 190001FE00FF9B32
0100: 0019B5000100FFFF 664B001900ED0100 FF3F0180044B0000 020000001E0F5472
0120: 65F8654C69005E00 0000030000006F19 00E9010000FFBF19 5900190001FB00FF
0140: 6F3200D6190001FE 00FF430180AF0000 0603000C634669F8 6C654C01D6000000
0160: 070000DE0019D200 010000FF7F19B300 1900F60100FFDF32 AC00190001FD00FF
0180: 374B00196B000100 FFFFCD640019DA00 0100FF7F7DB30019 00F60100FFDF96AC
01A0: 00190001FD00FF87 01807D000C000400 0D6352C06164696F 4C69079A00000005
01C0: 790000194B000100 00FFFFCD190019DA 000100FF7F32B300 1900F60100FFDF4B
01E0: AC00190001FD00FF 376400196B000100 FFFF01
.enddata
.head 3 +  General Window Class: TRtfStyle
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  ! Numéro du style
.head 5 -  Number: nNum
.head 5 -  ! Modifiable par l'utilisateur
.head 5 -  Number: nFontSize
.head 5 -  Boolean: bBold
.head 5 -  Boolean: bItalic
.head 5 -  Number: nUnderline
.head 5 -  Number: nFont
.head 5 -  Number: nAlign
.head 4 -  Functions
.head 4 -  Message Actions
.head 3 +  Functional Class: TRtfCellOld
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  Number: nLength
.head 5 -  Boolean: bBorderL
.head 5 -  Boolean: bBorderR
.head 5 -  Boolean: bBorderT
.head 5 -  Boolean: bBorderB
.head 5 -  ! /@@@@@ LS : 01/03/99
.head 5 -  Number: nShading
.head 5 -  Number: nMinHeight
.head 5 -  ! /@@@@@ LS : 09/03/99
.head 5 -  Boolean: bBold
.head 5 -  Boolean: bCaps
.head 5 -  Boolean: bItalic
.head 5 -  Number: nUnderline
.head 5 -  Number: nFontSize
.head 5 -  Number: nAlign
.head 5 -  Boolean: bBorderDL
.head 5 -  Boolean: bBorderDR
.head 5 -  Boolean: bBorderDT
.head 5 -  Boolean: bBorderDB
.head 5 -  ! /@@@@@ LS : 19/03/99
.head 5 -  Number: nBorderSizeL
.head 5 -  Number: nBorderSizeR
.head 5 -  Number: nBorderSizeT
.head 5 -  Number: nBorderSizeB
.head 5 -  !
.head 5 -  !
.head 5 -  ! Les 4 variables suivantes permettent d'enregistrer la valeur à imprimer
.head 5 -  ! dans la cellule du tableau
.head 5 -  ! String contient la chaine de caractère à afficher
.head 5 -  ! Number contient le nombre à afficher. La variable format contient le format d'affichage du nombre
.head 5 -  ! Date contient la date à afficher. La variable format contient le format d'affichage de la date
.head 5 -  ! inType indique quel variable utiliser pour l'impression: 1 : string, 2 : number, 3 : date
.head 5 -  String: String
.head 5 -  Long String: LongString
.head 5 -  Number: Number
.head 5 -  Date/Time: Date
.head 5 -  String: Format
.head 5 -  Number: inType
.head 5 -  Number: nSpaceBefore
.head 5 -  Number: nSpaceAfter
.head 4 -  Functions
.head 3 +  Functional Class: TTotalColumn
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  Number: inNbrCol
.head 5 -  Number: inTotal
.head 4 +  Functions
.head 5 +  Function: GetNumCol
.head 6 -  Description: Retourne le numéro de la colonne 
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return inNbrCol
.head 5 +  Function: SetNumCol
.head 6 -  Description: Indique le numéro de la colonne
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnCol
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set inNbrCol = pnCol
.head 5 +  Function: GetTotal
.head 6 -  Description: Retourne le total de la colonne
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return inTotal
.head 5 +  Function: SetTotal
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: pnTotal
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set inTotal = pnTotal
.head 7 -  Return inTotal
.head 5 +  Function: AddTotal
.head 6 -  Description: Ajoute une valeur au total de la colonne
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: pnVal
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set inTotal = inTotal + pnVal
.head 7 -  Return inTotal
.head 3 +  Functional Class: TTotalRow
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  FunctionalVar: inCol[ * ]
.head 6 -  Class: TTotalColumn
.head 5 -  Number: inNbrCol
.head 4 +  Functions
.head 5 +  Function: GetNbrCol
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return inNbrCol
.head 5 +  Function: GetNumCol
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: i
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return inCol[ i ].GetNumCol( )
.head 5 +  Function: GetTotalCol
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: i
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return inCol[ i ].GetTotal( )
.head 5 +  Function: Reset
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i
.head 8 -  Call inCol[ i ].SetNumCol( NUMBER_Null )
.head 8 -  Call inCol[ i ].SetTotal( NUMBER_Null )
.head 8 -  Set i = i - 1
.head 7 -  Set inNbrCol = 0
.head 5 +  ! Function: ClearValue
.head 6 -  Description: 
.head 6 -  Returns 
.head 6 +  Parameters 
.head 7 -  : pnRow
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  Number: i
.head 6 +  Actions 
.head 7 -  Set inNbrCol = pnRow.NbrCell( )
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 +  If pnRow.GetTypeCell( i ) = 2 
.head 9 -  Call 
.head 5 +  Function: InitCol
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnNoCol
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set inNbrCol = inNbrCol + 1
.head 7 -  Call inCol[ inNbrCol ].SetTotal( 0 )
.head 7 -  Call inCol[ inNbrCol ].SetNumCol( pnNoCol )
.head 5 +  Function: Add
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pnRow
.head 8 -  Class: TRtfRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: c
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 -  Set c = inCol[ i ].GetNumCol( )
.head 8 -  Set n = pnRow.GetNumberCell( c )
.head 8 -  Call inCol[ i ].AddTotal( n )
.head 8 -  Set i = i - 1
.head 5 +  Function: Clear
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 -  Call inCol[ i ].SetTotal( 0 )
.head 8 -  Set i = i - 1
.head 5 +  Function: SetRow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pnRow
.head 8 -  Class: TRtfRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: c
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 -  Set c = inCol[ i ].GetNumCol( )
.head 8 -  Set n = inCol[ i ].GetTotal( )
.head 8 -  Call pnRow.SetNumber( c, n, pnRow.GetFormatNumberCell( c ) )
.head 8 -  Set i = i - 1
.head 5 +  Function: SetRowNotNull
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pnRow
.head 8 -  Class: TRtfRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: c
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 -  Set c = inCol[ i ].GetNumCol( )
.head 8 -  Set n = inCol[ i ].GetTotal( )
.head 8 +  If n != NUMBER_Null
.head 9 -  Call pnRow.SetNumber( c, n, pnRow.GetFormatNumberCell( c ) )
.head 8 -  Set i = i - 1
.head 5 +  Function: GetTotal
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: pnCol
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: c
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 +  If pnCol = inCol[ i ].GetNumCol( )
.head 9 -  Set n = inCol[i].GetTotal( )
.head 9 -  Set i = 1
.head 9 -  Return n
.head 8 -  Set i = i - 1
.head 7 -  Return NUMBER_Null
.head 5 +  Function: Copy
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pTotal
.head 8 -  Class: TTotalRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = pTotal.GetNbrCol( )
.head 7 +  While i
.head 8 -  Call inCol[ i ].SetNumCol( pTotal.GetNumCol( i ) )
.head 8 -  Call inCol[ i ].SetTotal( pTotal.GetTotalCol( i ) )
.head 8 -  Set i = i - 1
.head 3 +  Functional Class: TRtfRow
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  ! Variable privée
.head 5 -  Number: inNbrCell
.head 5 -  Number: inCurCell
.head 5 -  FunctionalVar: itCells[*]
.head 6 -  Class: TRtfCellOld
.head 5 -  ! Number: inCurCell
.head 5 -  !
.head 5 -  !
.head 5 -  Boolean: m_Keep
.head 4 +  Functions
.head 5 +  Function: SetString
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  String: psString
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > inNbrCell
.head 8 -  Set inNbrCell = nCell
.head 7 -  Set itCells[ nCell ].String = psString
.head 7 -  Set itCells[ nCell ].inType = 1
.head 5 +  Function: SetLongString
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  Long String: psString
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > inNbrCell
.head 8 -  Set inNbrCell = nCell
.head 7 -  Set itCells[ nCell ].LongString = psString
.head 7 -  Set itCells[ nCell ].inType = 5
.head 5 +  Function: ClearValue
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = inNbrCell
.head 7 +  While i
.head 8 -  Set itCells[ i ].Format = ''
.head 8 -  Set itCells[ i ].Number = NUMBER_Null
.head 8 -  Set itCells[ i ].inType = -1
.head 8 -  Set itCells[ i ].String = ''
.head 8 -  Set itCells[ i ].Date = DATETIME_Null
.head 8 -  Set i = i - 1
.head 5 +  Function: ClearEmpty
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = inNbrCell
.head 7 +  While i
.head 8 -  Set itCells[ i ].Format = ''
.head 8 -  Set itCells[ i ].Number = NUMBER_Null
.head 8 -  Set itCells[ i ].inType = -1
.head 8 -  Set itCells[ i ].String = ''
.head 8 -  Set itCells[ i ].Date = DATETIME_Null
.head 8 -  Call SetEmpty( i )
.head 8 -  Set i = i - 1
.head 5 +  Function: SetRtfString
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  String: psString
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > inNbrCell
.head 8 -  Set inNbrCell = nCell
.head 7 -  Set itCells[ nCell ].String = psString
.head 7 -  Set itCells[ nCell ].inType = 4
.head 5 +  Function: SetNumber
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  Number: pnNumber
.head 7 -  String: psFormat
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > inNbrCell
.head 8 -  Set inNbrCell = nCell
.head 7 -  Set itCells[ nCell ].Format = psFormat
.head 7 -  Set itCells[ nCell ].Number = pnNumber
.head 7 -  Set itCells[ nCell ].inType = 2
.head 5 +  Function: SetEmpty
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call SetRtfString( nCell, cEspaceInsep )
.head 5 -  ! cEspaceInsep
.head 5 +  Function: SetDate
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  Date/Time: pnDate
.head 7 -  String: psFormat
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > inNbrCell
.head 8 -  Set inNbrCell = nCell
.head 7 -  Set itCells[ nCell ].Format = psFormat
.head 7 -  Set itCells[ nCell ].Date = pnDate
.head 7 -  Set itCells[ nCell ].inType = 3
.head 5 +  Function: AddCell
.head 6 -  Description: Ajoute une cellule dans la ligne
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  Number: nSize
.head 7 -  Number: nKindSize
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > inNbrCell
.head 8 -  Set inNbrCell = nCell
.head 7 +  If nKindSize = cPct
.head 8 -  Set itCells[ nCell ].nLength = CMToTwips( nSize / 100 * (wnRtfWidth - wnRtfMargeL - wnRtfMargeR ) )
.head 7 +  Else
.head 8 -  Set itCells[ nCell ].nLength = CMToTwips( nSize )
.head 7 -  Set itCells[ nCell ].nBorderSizeR = 15
.head 7 -  Set itCells[ nCell ].nBorderSizeL = 15
.head 7 -  Set itCells[ nCell ].nBorderSizeT = 15
.head 7 -  Set itCells[ nCell ].nBorderSizeB = 15
.head 5 +  Function: DefineCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnCell
.head 7 -  Number: pnAttr
.head 7 -  Number: pnFontSize
.head 7 -  Number: pnShading
.head 7 -  Number: pnMinHeight
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnCell > inNbrCell
.head 8 -  Set inNbrCell = pnCell
.head 7 -  Set itCells[ pnCell ].nFontSize = pnFontSize
.head 7 +  If pnAttr & cBold
.head 8 -  Set itCells[ pnCell ].bBold = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBold = FALSE
.head 7 +  If pnAttr & cItalic
.head 8 -  Set itCells[ pnCell ].bItalic = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bItalic = FALSE
.head 7 +  If pnAttr & cCaps
.head 8 -  Set itCells[ pnCell ].bCaps = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bCaps = FALSE
.head 7 -  Set itCells[ pnCell ].nUnderline = pnAttr & 0x000F
.head 7 -  Set itCells[ pnCell ].nAlign = pnAttr & 0xF000
.head 7 -  Set itCells[ pnCell ].nShading = pnShading
.head 7 -  ! Set itCells[ pnCell ].nMinHeight = pnMinHeight
.head 7 -  Set itCells[ pnCell ].nMinHeight = CMToTwips( pnMinHeight )
.head 7 +  If pnAttr & cBorderR
.head 8 -  Set itCells[ pnCell ].bBorderR = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderR = FALSE
.head 7 +  If pnAttr & cBorderL
.head 8 -  Set itCells[ pnCell ].bBorderL = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderL = FALSE
.head 7 +  If pnAttr & cBorderT
.head 8 -  Set itCells[ pnCell ].bBorderT = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderT = FALSE
.head 7 +  If pnAttr & cBorderB
.head 8 -  Set itCells[ pnCell ].bBorderB = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderB = FALSE
.head 7 +  If pnAttr & cBorderDR
.head 8 -  Set itCells[ pnCell ].bBorderDR = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderDR = FALSE
.head 7 +  If pnAttr & cBorderDL
.head 8 -  Set itCells[ pnCell ].bBorderDL = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderDL = FALSE
.head 7 +  If pnAttr & cBorderDT
.head 8 -  Set itCells[ pnCell ].bBorderDT = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderDT = FALSE
.head 7 +  If pnAttr & cBorderDB
.head 8 -  Set itCells[ pnCell ].bBorderDB = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderDB = FALSE
.head 5 +  Function: DefineCellOld
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnCell
.head 7 -  Number: pnAttr
.head 7 -  Number: pnFontSize
.head 7 -  Number: pnShading
.head 7 -  Number: pnMinHeight
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnCell > inNbrCell
.head 8 -  Set inNbrCell = pnCell
.head 7 -  Set itCells[ pnCell ].nFontSize = pnFontSize
.head 7 +  If pnAttr & cBold
.head 8 -  Set itCells[ pnCell ].bBold = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBold = FALSE
.head 7 +  If pnAttr & cItalic
.head 8 -  Set itCells[ pnCell ].bItalic = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bItalic = FALSE
.head 7 +  If pnAttr & cCaps
.head 8 -  Set itCells[ pnCell ].bCaps = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bCaps = FALSE
.head 7 -  Set itCells[ pnCell ].nUnderline = pnAttr & 0x000F
.head 7 -  Set itCells[ pnCell ].nAlign = pnAttr & 0xF000
.head 7 -  Set itCells[ pnCell ].nShading = pnShading
.head 7 -  Set itCells[ pnCell ].nMinHeight = pnMinHeight
.head 7 +  If pnAttr & cBorderR
.head 8 -  Set itCells[ pnCell ].bBorderR = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderR = FALSE
.head 7 +  If pnAttr & cBorderL
.head 8 -  Set itCells[ pnCell ].bBorderL = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderL = FALSE
.head 7 +  If pnAttr & cBorderT
.head 8 -  Set itCells[ pnCell ].bBorderT = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderT = FALSE
.head 7 +  If pnAttr & cBorderB
.head 8 -  Set itCells[ pnCell ].bBorderB = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderB = FALSE
.head 7 +  If pnAttr & cBorderDR
.head 8 -  Set itCells[ pnCell ].bBorderDR = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderDR = FALSE
.head 7 +  If pnAttr & cBorderDL
.head 8 -  Set itCells[ pnCell ].bBorderDL = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderDL = FALSE
.head 7 +  If pnAttr & cBorderDT
.head 8 -  Set itCells[ pnCell ].bBorderDT = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderDT = FALSE
.head 7 +  If pnAttr & cBorderDB
.head 8 -  Set itCells[ pnCell ].bBorderDB = TRUE
.head 7 +  Else
.head 8 -  Set itCells[ pnCell ].bBorderDB = FALSE
.head 5 +  Function: DefineBorderCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnCell
.head 7 -  Number: pnAttr
.head 7 -  Number: pnSize
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnCell > inNbrCell
.head 8 -  Set inNbrCell = pnCell
.head 7 +  If pnAttr & cBorderR
.head 8 -  Set itCells[ pnCell ].nBorderSizeR = pnSize
.head 7 +  If pnAttr & cBorderL
.head 8 -  Set itCells[ pnCell ].nBorderSizeL = pnSize
.head 7 +  If pnAttr & cBorderT
.head 8 -  Set itCells[ pnCell ].nBorderSizeT = pnSize
.head 7 +  If pnAttr & cBorderB
.head 8 -  Set itCells[ pnCell ].nBorderSizeB = pnSize
.head 5 +  Function: BeginRow
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: i
.head 7 -  Number: p
.head 6 +  Actions
.head 7 -  ! Set s = '{\\trowd\\trgaph70\\trleft-70\\widctlpar'
.head 7 -  Set s = '{\\trowd\\trgaph70\\trleft-70'
.head 7 +  If m_Keep
.head 8 -  Set s = s || '\\trkeep'
.head 7 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 7 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 7 -  Set i = 1
.head 7 -  Set p = 0
.head 7 +  While i <= inNbrCell
.head 8 +  If itCells[i].bBorderL
.head 9 +  If itCells[i].nBorderSizeL = 0
.head 10 -  Set itCells[i].nBorderSizeL = 15
.head 9 -  Set s = s || '\\clbrdrl\\brdrs\\brdrw' || SalFmtFormatNumber( itCells[i].nBorderSizeL, '0' )
.head 8 +  If itCells[i].bBorderT
.head 9 -  ! Set s = s || '\\clbrdrt\\brdrs\\brdrw' || SalFmtFormatNumber( itCells[i].nBorderSizeT, '0' ) || ' '
.head 9 +  If itCells[i].nBorderSizeT = 0
.head 10 -  Set itCells[i].nBorderSizeT = 15
.head 9 -  Set s = s || '\\clbrdrt\\brdrs\\brdrw' || SalFmtFormatNumber( itCells[i].nBorderSizeT, '0' )
.head 8 +  If itCells[i].bBorderR
.head 9 +  If itCells[i].nBorderSizeR = 0
.head 10 -  Set itCells[i].nBorderSizeR = 15
.head 9 -  Set s = s || '\\clbrdrr\\brdrs\\brdrw' || SalFmtFormatNumber( itCells[i].nBorderSizeR, '0' )
.head 8 +  If itCells[i].bBorderB
.head 9 +  If itCells[i].nBorderSizeB = 0
.head 10 -  Set itCells[i].nBorderSizeB = 15
.head 9 -  Set s = s || '\\clbrdrb\\brdrs\\brdrw' || SalFmtFormatNumber( itCells[i].nBorderSizeB, '0' )
.head 8 +  If itCells[i].bBorderDL
.head 9 +  If itCells[i].nBorderSizeL = 0
.head 10 -  Set itCells[i].nBorderSizeL = 15
.head 9 -  Set s = s || '\\clbrdrl\\brdrdb\\brdrw' || SalFmtFormatNumber( itCells[i].nBorderSizeL, '0' )
.head 8 +  If itCells[i].bBorderDT
.head 9 +  If itCells[i].nBorderSizeT = 0
.head 10 -  Set itCells[i].nBorderSizeT = 15
.head 9 -  Set s = s || '\\clbrdrt\\brdrdb\\brdrw' || SalFmtFormatNumber( itCells[i].nBorderSizeT, '0' )
.head 8 +  If itCells[i].bBorderDR
.head 9 +  If itCells[i].nBorderSizeR = 0
.head 10 -  Set itCells[i].nBorderSizeR = 15
.head 9 -  Set s = s || '\\clbrdrr\\brdrdb\\brdrw' || SalFmtFormatNumber( itCells[i].nBorderSizeR, '0' )
.head 8 +  If itCells[i].bBorderDB
.head 9 +  If itCells[i].nBorderSizeB = 0
.head 10 -  Set itCells[i].nBorderSizeB = 15
.head 9 -  Set s = s || '\\clbrdrb\\brdrdb\\brdrw' || SalFmtFormatNumber( itCells[i].nBorderSizeB, '0' )
.head 8 +  ! If itCells[i].nAlign & cParCenter
.head 9 -  Set s = s || '\\qc'
.head 8 +  ! Else If itCells[i].nAlign & cParRight
.head 9 -  Set s = s || '\\qr'
.head 8 +  ! Else If itCells[i].nAlign & cParJust
.head 9 -  Set s = s || '\\qj'
.head 8 +  ! Else
.head 9 -  Set s = s || '\\ql'
.head 8 +  If itCells[i].nShading != 0
.head 9 -  Set s = s || '\\clshdng' || SalFmtFormatNumber( itCells[i].nShading * 100, '0' )
.head 8 +  If itCells[i].nMinHeight != 0
.head 9 -  Set s = s || '\\trrh' || SalFmtFormatNumber( itCells[i].nMinHeight , '0' )
.head 8 -  Set p = p + itCells[i].nLength
.head 8 +  If p != 0
.head 9 -  Set s = s || '\\cellx' || SalFmtFormatNumber( p, '0' )
.head 8 -  Set i = i + 1
.head 7 -  Set s = s || '\\intbl '
.head 7 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 7 -  Set inCurCell = 1
.head 7 -  ! Call RtfWrite( pfh, s )
.head 7 -  Return TRUE
.head 5 +  Function: EndRow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = '\\pard \\widctlpar\\intbl\\adjustright \\row }
'
.head 7 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 7 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 7 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 7 -  ! Call RtfWrite( pfh, s )
.head 5 +  Function: BeginCell
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: i
.head 7 -  Number: p
.head 6 +  Actions
.head 7 +  If inCurCell <= inNbrCell
.head 8 -  Set s = '\\pard '
.head 8 -  Set i = inCurCell
.head 8 -  Set s = s || '{'
.head 8 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 8 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 8 +  If itCells[i].nAlign & cParCenter
.head 9 -  Set s = s || '\\qc'
.head 8 +  Else If itCells[i].nAlign & cParRight
.head 9 -  Set s = s || '\\qr'
.head 8 +  Else If itCells[i].nAlign & cParJust
.head 9 -  Set s = s || '\\qj'
.head 8 +  Else If itCells[i].nAlign & cParSolidaire
.head 9 -  Set s = s || '\\keepn'
.head 8 +  Else
.head 9 -  Set s = s || '\\ql'
.head 8 +  If itCells[i].nSpaceBefore >= 0
.head 9 -  Set s = s || '\\sb' || SalNumberToStrX( itCells[i].nSpaceBefore * 20, 0 )
.head 8 +  If itCells[i].nSpaceAfter >= 0
.head 9 -  Set s = s || '\\sa' || SalNumberToStrX( itCells[i].nSpaceAfter * 20, 0 )
.head 8 -  ! Set s = s || '\\widctlpar\\intbl {'
.head 8 -  Set s = s || '\\intbl {'
.head 8 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 8 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 8 -  Set p = 0
.head 8 +  If itCells[i].bBold
.head 9 -  Set s = s || '\\b'
.head 8 +  If itCells[i].bCaps
.head 9 -  Set s = s || '\\caps'
.head 8 +  If itCells[i].bItalic
.head 9 -  Set s = s || '\\i'
.head 8 +  If itCells[i].nUnderline & cDoubleUnderline
.head 9 -  Set s = s || '\\uldb'
.head 8 +  If itCells[i].nUnderline & cDotUnderline
.head 9 -  Set s = s || '\\uld'
.head 8 +  If itCells[i].nUnderline & cWordUnderline
.head 9 -  Set s = s || '\\ulw'
.head 8 +  If itCells[i].nUnderline & cUnderline
.head 9 -  Set s = s || '\\ul'
.head 8 +  If itCells[i].nFontSize != 0
.head 9 -  Set s = s || '\\fs' || SalFmtFormatNumber( itCells[i].nFontSize * 2, '0' )
.head 8 -  Set s = s || ' '
.head 8 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 7 -  ! Call RtfWrite( pfh, s )
.head 7 -  Return TRUE
.head 5 +  Function: BeginCellIdent
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 7 -  Number: pnLeft
.head 7 -  Number: pnRight
.head 7 -  Number: pnFirstLine
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: i
.head 7 -  Number: p
.head 6 +  Actions
.head 7 +  If inCurCell <= inNbrCell
.head 8 -  Set s = '\\pard '
.head 8 -  Set i = inCurCell
.head 8 -  Set s = s || '{'
.head 8 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 8 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 8 +  If pnLeft != 0
.head 9 -  Set s = s || '\\li' || SalFmtFormatNumber( CMToTwips( pnLeft ), '0' )
.head 8 +  If pnRight != 0
.head 9 -  Set s = s || '\\ri' || SalFmtFormatNumber( CMToTwips( pnRight ), '0' )
.head 8 +  If pnFirstLine != 0
.head 9 -  Set s = s || '\\fi' || SalFmtFormatNumber( CMToTwips( pnFirstLine ), '0' )
.head 8 +  If itCells[i].nAlign & cParCenter
.head 9 -  Set s = s || '\\qc'
.head 8 +  Else If itCells[i].nAlign & cParRight
.head 9 -  Set s = s || '\\qr'
.head 8 +  Else If itCells[i].nAlign & cParJust
.head 9 -  Set s = s || '\\qj'
.head 8 +  Else
.head 9 -  Set s = s || '\\ql'
.head 8 -  Set s = s || '\\widctlpar\\intbl {'
.head 8 -  Set wniRtfNbrPar = wniRtfNbrPar + 1
.head 8 -  Set inRtfNbrAcco = inRtfNbrAcco + 1
.head 8 -  Set p = 0
.head 8 +  If itCells[i].bBold
.head 9 -  Set s = s || '\\b'
.head 8 +  If itCells[i].bCaps
.head 9 -  Set s = s || '\\caps'
.head 8 +  If itCells[i].bItalic
.head 9 -  Set s = s || '\\i'
.head 8 +  If itCells[i].nUnderline & cDoubleUnderline
.head 9 -  Set s = s || '\\uldb'
.head 8 +  If itCells[i].nUnderline & cDotUnderline
.head 9 -  Set s = s || '\\uld'
.head 8 +  If itCells[i].nUnderline & cWordUnderline
.head 9 -  Set s = s || '\\ulw'
.head 8 +  If itCells[i].nUnderline & cUnderline
.head 9 -  Set s = s || '\\ul'
.head 8 +  If itCells[i].nFontSize != 0
.head 9 -  Set s = s || '\\fs' || SalFmtFormatNumber( itCells[i].nFontSize * 2, '0' )
.head 8 -  Set s = s || ' '
.head 8 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 7 -  ! Call RtfWrite( pfh, s )
.head 7 -  Return TRUE
.head 5 +  Function: EndCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 +  If inCurCell <= inNbrCell
.head 8 -  Set s = '}\\cell '
.head 8 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 8 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 8 -  Set s = s || '}'
.head 8 -  Set wniRtfNbrPar = wniRtfNbrPar - 1
.head 8 -  Set inRtfNbrAcco = inRtfNbrAcco - 1
.head 8 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 8 -  Set inCurCell = inCurCell + 1
.head 7 -  ! Call RtfWrite( pfh, s )
.head 5 +  Function: Reset
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = inNbrCell
.head 7 +  While i
.head 8 -  Set itCells[ i ].bBorderB = FALSE
.head 8 -  Set itCells[ i ].bBorderT = FALSE
.head 8 -  Set itCells[ i ].bBorderL = FALSE
.head 8 -  Set itCells[ i ].bBorderR = FALSE
.head 8 -  Set itCells[ i ].bBorderDB = FALSE
.head 8 -  Set itCells[ i ].bBorderDT = FALSE
.head 8 -  Set itCells[ i ].bBorderDL = FALSE
.head 8 -  Set itCells[ i ].bBorderDR = FALSE
.head 8 -  Set itCells[ i ].bBold = FALSE
.head 8 -  Set itCells[ i ].bItalic = FALSE
.head 8 -  Set itCells[ i ].nShading = 0
.head 8 -  Set itCells[ i ].nMinHeight = 0
.head 8 -  Set itCells[ i ].nSpaceBefore = -1
.head 8 -  Set itCells[ i ].nSpaceAfter = -1
.head 8 -  Set itCells[ i ].nUnderline = 0
.head 8 -  Set itCells[ i ].nFontSize = 0
.head 8 -  Set itCells[ i ].inType = 0
.head 8 -  Set itCells[ i ].String = ''
.head 8 -  Set itCells[ i ].Format = ''
.head 8 -  Set itCells[ i ].Date = DATETIME_Null
.head 8 -  Set itCells[ i ].Number = NUMBER_Null
.head 8 -  Set i = i - 1
.head 7 -  Set inNbrCell = 0
.head 7 -  Set m_Keep = FALSE
.head 5 +  Function: Copy
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pRow
.head 8 -  Class: TRtfRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = pRow.inNbrCell
.head 7 -  Set inNbrCell = i
.head 7 -  Set m_Keep = pRow.m_Keep
.head 7 +  While i
.head 8 -  Set itCells[ i ].nLength = pRow.itCells[ i ].nLength
.head 8 -  Set itCells[ i ].bBorderL = pRow.itCells[ i ].bBorderL
.head 8 -  Set itCells[ i ].bBorderR = pRow.itCells[ i ].bBorderR
.head 8 -  Set itCells[ i ].bBorderT = pRow.itCells[ i ].bBorderT
.head 8 -  Set itCells[ i ].bBorderB = pRow.itCells[ i ].bBorderB
.head 8 -  Set itCells[ i ].bBorderDL = pRow.itCells[ i ].bBorderDL
.head 8 -  Set itCells[ i ].bBorderDB = pRow.itCells[ i ].bBorderDB
.head 8 -  Set itCells[ i ].bBorderDT = pRow.itCells[ i ].bBorderDT
.head 8 -  Set itCells[ i ].bBorderDR = pRow.itCells[ i ].bBorderDR
.head 8 -  Set itCells[ i ].nShading = pRow.itCells[ i ].nShading
.head 8 -  Set itCells[ i ].nMinHeight = pRow.itCells[ i ].nMinHeight
.head 8 -  Set itCells[ i ].bBold = pRow.itCells[ i ].bBold
.head 8 -  Set itCells[ i ].bCaps = pRow.itCells[ i ].bCaps
.head 8 -  Set itCells[ i ].bItalic = pRow.itCells[ i ].bItalic
.head 8 -  Set itCells[ i ].nUnderline = pRow.itCells[ i ].nUnderline
.head 8 -  Set itCells[ i ].nFontSize = pRow.itCells[ i ].nFontSize
.head 8 -  Set itCells[ i ].nAlign = pRow.itCells[ i ].nAlign
.head 8 -  Set itCells[ i ].inType = pRow.itCells[ i ].inType
.head 8 -  Set itCells[ i ].String = pRow.itCells[ i ].String
.head 8 -  Set itCells[ i ].Format = pRow.itCells[ i ].Format
.head 8 -  Set itCells[ i ].Date = pRow.itCells[ i ].Date
.head 8 -  Set itCells[ i ].Number = pRow.itCells[ i ].Number
.head 8 -  Set i = i - 1
.head 7 -  Set inCurCell = 0
.head 7 -  Call ClearValue( )
.head 5 -  !
.head 5 +  Function: NbrCell
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return inNbrCell
.head 5 +  Function: GetTypeCell
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > inNbrCell
.head 8 -  Return NUMBER_Null
.head 7 -  Return itCells[ nCell ].inType
.head 5 +  Function: GetNumberCell
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > inNbrCell
.head 8 -  Return NUMBER_Null
.head 7 +  If itCells[ nCell ].inType = 2
.head 8 -  Return itCells[ nCell ].Number
.head 7 -  Return NUMBER_Null
.head 5 +  Function: GetFormatNumberCell
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > inNbrCell
.head 8 -  Return ''
.head 7 +  If itCells[ nCell ].inType = 2
.head 8 -  Return itCells[ nCell ].Format
.head 7 -  Return ''
.head 5 -  !
.head 5 -  !
.head 5 +  Function: GenererRow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Long String: psFormat
.head 7 -  Number: pnSize
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: lsArr[*]
.head 7 -  Number: lnNbrArr
.head 7 -  Number: i
.head 7 -  Number: lnDef
.head 7 -  String: lsFormat
.head 7 -  Number: lnFormat
.head 7 -  Number: lnFormatDef
.head 7 -  Number: lnSize
.head 7 -  String: lsSize
.head 7 -  Number: lnDispo
.head 7 -  Number: lnLargeur
.head 7 -  Number: j
.head 7 -  String: c
.head 7 -  Number: lcFormat[*]
.head 7 -  Number: lnMinHeight
.head 7 -  Number: lnSpaceAfter
.head 7 -  Number: lnSpaceBefore
.head 7 -  Number: lnSpaceAfterDef
.head 7 -  Number: lnSpaceBeforeDef
.head 7 -  Boolean: lbDef
.head 6 +  Actions
.head 7 -  Set lnNbrArr = SalStrTokenize( psFormat, '', '|', lsArr )
.head 7 -  Set lnLargeur = wnRtfWidth - wnRtfMargeL - wnRtfMargeR
.head 7 -  Set lnDispo = lnLargeur
.head 7 -  Set lnDef = -1
.head 7 -  Set lnFormatDef = 0
.head 7 -  Set i = lnNbrArr
.head 7 +  While i
.head 8 -  Set lsFormat = lsArr[i-1]
.head 8 -  Set j = SalStrLength( lsFormat )
.head 8 -  Set lnFormat = 0
.head 8 -  Set lnMinHeight = 0
.head 8 -  Set lnSpaceAfter = -1
.head 8 -  Set lnSpaceBefore = -1
.head 8 -  Set lbDef = FALSE
.head 8 -  Set lnSpaceAfterDef = -1
.head 8 -  Set lnSpaceBeforeDef = -1
.head 8 -  Set lnSize = 1
.head 8 -  Set lcFormat[i] = cAbs
.head 8 -  Set j = 0
.head 8 +  While j < SalStrLength( lsFormat )
.head 9 -  ! Set j = j - 1
.head 9 +  If lbDef
.head 10 -  Set lnDef = i
.head 10 -  Set lnSize = 1
.head 10 -  Set lnSpaceBeforeDef = lnSpaceBefore
.head 10 -  Set lnSpaceAfterDef = lnSpaceAfter
.head 10 -  ! Set j = 0
.head 10 -  Set lnFormatDef = lnFormat
.head 9 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 9 +  If c = 't'
.head 10 -  Set lnFormat = lnFormat + cBorderT
.head 9 +  Else If c = 'b'
.head 10 -  Set lnFormat = lnFormat + cBorderB
.head 9 +  Else If c = 'l'
.head 10 -  Set lnFormat = lnFormat + cBorderL
.head 9 +  Else If c = 'r'
.head 10 -  Set lnFormat = lnFormat + cBorderR
.head 9 +  Else If c = 'B'
.head 10 -  Set lnFormat = lnFormat + cBold
.head 9 +  Else If c = 'c'
.head 10 -  Set lnFormat = lnFormat + cCaps
.head 9 +  Else If c = 'I'
.head 10 -  Set lnFormat = lnFormat + cItalic
.head 9 +  Else If c = 'U'
.head 10 -  Set lnFormat = lnFormat + cUnderline
.head 9 +  Else If c = 'C'
.head 10 -  Set lnFormat = lnFormat + cParCenter
.head 9 +  Else If c = 'L'
.head 10 -  Set lnFormat = lnFormat + cParLeft
.head 9 +  Else If c = 'R'
.head 10 -  Set lnFormat = lnFormat + cParRight
.head 9 +  Else If c = 'J'
.head 10 -  Set lnFormat = lnFormat + cParJust
.head 9 +  Else If c = '#'
.head 10 -  Set j = j + 1
.head 10 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 10 +  If c = 'h'
.head 11 -  Set j = j + 1
.head 11 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 11 +  If SalStrScan( '0123456789,.-', c ) >= 0
.head 12 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 12 -  Set lsSize = ''
.head 12 +  While ( j < SalStrLength( lsFormat ) ) and ( c != '@' ) and ( SalStrScan( '0123456789,.-', c ) >= 0 )
.head 13 -  Set lsSize = lsSize || c
.head 13 -  Set j = j + 1
.head 13 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 12 -  ! Set j = j - 1
.head 12 +  If SalStrIsValidNumber( lsSize )
.head 13 -  Set lnMinHeight = SalStrToNumber( lsSize )
.head 13 -  ! Set j = 0
.head 13 -  ! Set lnDispo = lnDispo - lnSize
.head 10 +  Else If c = 'S'
.head 11 -  Set j = j + 1
.head 11 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 11 +  If c = 'B'
.head 12 -  Set j = j + 1
.head 12 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 12 +  If SalStrScan( '0123456789,.-', c ) >= 0
.head 13 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 13 -  Set lsSize = ''
.head 13 +  While ( j < SalStrLength( lsFormat ) ) and ( c != '@' ) and ( SalStrScan( '0123456789,.-', c ) >= 0 )
.head 14 -  Set lsSize = lsSize || c
.head 14 -  Set j = j + 1
.head 14 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 13 -  ! Set j = j - 1
.head 13 +  If SalStrIsValidNumber( lsSize )
.head 14 -  Set lnSpaceBefore = SalStrToNumber( lsSize )
.head 14 -  ! Set j = 0
.head 14 -  ! Set lnDispo = lnDispo - lnSize
.head 11 +  Else If c = 'A'
.head 12 -  Set j = j + 1
.head 12 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 12 +  If SalStrScan( '0123456789,.-', c ) >= 0
.head 13 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 13 -  Set lsSize = ''
.head 13 +  While ( j < SalStrLength( lsFormat ) ) and ( c != '@' ) and ( SalStrScan( '0123456789,.-', c ) >= 0 )
.head 14 -  Set lsSize = lsSize || c
.head 14 -  Set j = j + 1
.head 14 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 13 -  ! Set j = j - 1
.head 13 +  If SalStrIsValidNumber( lsSize )
.head 14 -  Set lnSpaceAfter = SalStrToNumber( lsSize )
.head 14 -  ! Set j = 0
.head 14 -  ! Set lnDispo = lnDispo - lnSize
.head 11 +  Else If c = 'X'
.head 12 -  Set j = j + 1
.head 12 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 12 +  If SalStrScan( '0123456789,.-', c ) >= 0
.head 13 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 13 -  Set lsSize = ''
.head 13 +  While ( j < SalStrLength( lsFormat ) ) and ( c != '@' ) and ( SalStrScan( '0123456789,.-', c ) >= 0 )
.head 14 -  Set lsSize = lsSize || c
.head 14 -  Set j = j + 1
.head 14 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 13 -  ! Set j = j - 1
.head 13 +  If SalStrIsValidNumber( lsSize )
.head 14 -  Set lnSpaceAfter = SalStrToNumber( lsSize )
.head 14 -  Set lnSpaceBefore = lnSpaceAfter
.head 14 -  ! Set j = 0
.head 14 -  ! Set lnDispo = lnDispo - lnSize
.head 9 +  ! Else If c = '%'
.head 10 -  Set lsSize = SalStrLeftX( lsFormat, j)
.head 10 +  If lsSize = '*'
.head 11 -  Set lnDef = i
.head 11 -  Set lcFormat[i] = cPct
.head 11 -  Set lnSize = 1
.head 11 -  Set j = 0
.head 11 -  Set lnFormatDef = lnFormat
.head 10 +  Else
.head 11 +  If SalStrIsValidNumber( lsSize )
.head 12 -  Set lnSize = SalStrToNumber( lsSize )
.head 12 -  Set lcFormat[i] = cPct
.head 12 -  Set lnSize = lnLargeur * lnSize / 100
.head 12 -  Set lnDispo = lnDispo - lnSize
.head 12 -  Set lnFormatDef = lnFormat
.head 12 -  Set j = 0
.head 9 +  Else If SalStrScan( '0123456789,.*', c ) >= 0
.head 10 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 10 -  Set lsSize = ''
.head 10 +  While ( j < SalStrLength( lsFormat ) ) and ( SalStrScan( '0123456789,.*', c ) >= 0 )
.head 11 -  Set lsSize = lsSize || c
.head 11 -  Set j = j + 1
.head 11 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 10 +  If c = '%'
.head 11 -  Set lcFormat[i] = cPct
.head 10 +  Else
.head 11 -  Set j = j - 1
.head 10 +  If lsSize = '*'
.head 11 -  Set lbDef = TRUE
.head 11 -  Set lnDef = i
.head 11 -  Set lnSize = 1
.head 11 -  Set lnSpaceBeforeDef = lnSpaceBefore
.head 11 -  Set lnSpaceAfterDef = lnSpaceAfter
.head 11 -  ! Set j = 0
.head 11 -  Set lnFormatDef = lnFormat
.head 10 +  Else
.head 11 +  If SalStrIsValidNumber( lsSize )
.head 12 -  Set lnSize = SalStrToNumber( lsSize )
.head 12 -  ! Set j = 0
.head 12 -  Set lnDispo = lnDispo - lnSize
.head 9 +  ! If lnDef >= 0
.head 10 -  Set lnFormatDef = lnFormat
.head 10 -  Set lnSpaceBeforeDef = lnSpaceBefore
.head 10 -  Set lnSpaceAfterDef = lnSpaceAfter
.head 9 -  Set j = j + 1
.head 8 -  Call AddCell( i, lnSize, lcFormat[i] )
.head 8 -  Call DefineCell( i, lnFormat, pnSize, 0, lnMinHeight )
.head 8 -  ! If ( lnSpaceBefore > -1 ) or ( lnSpaceAfter > - 1 )
.head 8 -  Call DefineCellPar( i, lnSpaceBefore, lnSpaceAfter )
.head 8 -  Set i = i - 1
.head 7 +  If lnDef >= 0
.head 8 -  Call AddCell( lnDef, lnDispo, lcFormat[lnDef] )
.head 8 -  Call DefineCell( lnDef, lnFormatDef, pnSize, 0, 0 )
.head 8 -  ! If ( lnSpaceBeforeDef > -1 ) or ( lnSpaceAfterDef > - 1 )
.head 8 -  Call DefineCellPar( i, lnSpaceBeforeDef, lnSpaceAfterDef )
.head 5 +  Function: GetFormatCell
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: pnCell
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: lnFmt
.head 6 +  Actions
.head 7 -  Set lnFmt = 0
.head 7 +  If itCells[ pnCell ].bItalic
.head 8 -  Set lnFmt = lnFmt + cItalic
.head 7 +  If itCells[ pnCell ].bBold
.head 8 -  Set lnFmt = lnFmt + cBold
.head 7 +  If itCells[ pnCell ].bCaps
.head 8 -  Set lnFmt = lnFmt + cCaps
.head 7 -  Set lnFmt = lnFmt + itCells[ pnCell ].nUnderline
.head 7 -  Set lnFmt = lnFmt + itCells[ pnCell ].nAlign
.head 7 -  !
.head 7 +  If itCells[ pnCell ].bBorderR
.head 8 -  Set lnFmt = lnFmt + cBorderR
.head 7 +  If itCells[ pnCell ].bBorderL
.head 8 -  Set lnFmt = lnFmt + cBorderL
.head 7 +  If itCells[ pnCell ].bBorderT
.head 8 -  Set lnFmt = lnFmt + cBorderT
.head 7 +  If itCells[ pnCell ].bBorderB
.head 8 -  Set lnFmt = lnFmt + cBorderB
.head 7 +  If itCells[ pnCell ].bBorderDR
.head 8 -  Set lnFmt = lnFmt + cBorderDR
.head 7 +  If itCells[ pnCell ].bBorderDL
.head 8 -  Set lnFmt = lnFmt + cBorderDL
.head 7 +  If itCells[ pnCell ].bBorderDT
.head 8 -  Set lnFmt = lnFmt + cBorderDT
.head 7 +  If itCells[ pnCell ].bBorderDB
.head 8 -  Set lnFmt = lnFmt + cBorderDB
.head 7 -  Return lnFmt
.head 5 +  Function: WriteRow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: j
.head 7 -  Number: n
.head 7 -  String: s
.head 7 -  Long String: s1
.head 6 +  Actions
.head 7 -  Call BeginRow( pfh )
.head 7 -  Set i = 1
.head 7 +  While i <= inNbrCell
.head 8 -  Call RtfBeginBlock( pfh )
.head 8 -  Call BeginCell( pfh )
.head 8 -  Set s = ''
.head 8 +  Select Case itCells[ i ].inType
.head 9 +  Case 4
.head 10 -  Set s = itCells[ i ].String
.head 10 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 10 -  Break
.head 9 +  Case 5
.head 10 -  Call RtfWriteMemo( pfh, itCells[ i ].LongString )
.head 10 -  ! Set s1 = itCells[ i ].LongString
.head 10 -  ! Set s = ''
.head 10 +  ! While SalStrFirstC( s1, n )
.head 11 +  Select Case n
.head 12 +  Case 13
.head 13 -  ! Set s = SalNumberToChar( n )
.head 13 -  ! Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 13 -  Call RtfNewPar( pfh )
.head 13 -  Break
.head 12 +  Case 10
.head 13 -  Break
.head 12 +  Default
.head 13 -  Set s = SalNumberToChar( n )
.head 13 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 10 -  Break
.head 9 +  Default
.head 10 +  Select Case itCells[ i ].inType
.head 11 +  Case 2
.head 12 -  Set s = SalFmtFormatNumber( itCells[ i ].Number, itCells[ i ].Format )
.head 12 -  Break
.head 11 +  Case 3
.head 12 -  Set s = SalFmtFormatDateTime( itCells[ i ].Date, itCells[ i ].Format )
.head 12 -  Break
.head 11 +  Default
.head 12 -  Set s = itCells[ i ].String
.head 10 -  Call RtfWrite( pfh, s )
.head 8 -  Call EndCell( pfh )
.head 8 -  Call RtfEndBlock( pfh )
.head 8 -  Set i = i + 1
.head 7 -  Call EndRow( pfh )
.head 5 +  Function: WriteRowNotNull
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: j
.head 7 -  Number: n
.head 7 -  String: s
.head 7 -  Long String: s1
.head 6 +  Actions
.head 7 -  Call BeginRow( pfh )
.head 7 -  Set i = 1
.head 7 +  While i <= inNbrCell
.head 8 -  Call RtfBeginBlock( pfh )
.head 8 -  Call BeginCell( pfh )
.head 8 -  Set s = ''
.head 8 +  Select Case itCells[ i ].inType
.head 9 +  Case 4
.head 10 -  Set s = itCells[ i ].String
.head 10 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 10 -  Break
.head 9 +  Case 5
.head 10 -  Call RtfWriteMemo( pfh, itCells[ i ].LongString )
.head 10 -  ! Set s1 = itCells[ i ].LongString
.head 10 -  ! Set s = ''
.head 10 +  ! While SalStrFirstC( s1, n )
.head 11 +  Select Case n
.head 12 +  Case 13
.head 13 -  ! Set s = SalNumberToChar( n )
.head 13 -  ! Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 13 -  Call RtfNewPar( pfh )
.head 13 -  Break
.head 12 +  Case 10
.head 13 -  Break
.head 12 +  Default
.head 13 -  Set s = SalNumberToChar( n )
.head 13 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 10 -  Break
.head 9 +  Default
.head 10 +  Select Case itCells[ i ].inType
.head 11 +  Case 2
.head 12 -  Set s = SalFmtFormatNumber( itCells[ i ].Number, itCells[ i ].Format )
.head 12 -  Break
.head 11 +  Case 3
.head 12 -  Set s = SalFmtFormatDateTime( itCells[ i ].Date, itCells[ i ].Format )
.head 12 -  Break
.head 11 +  Default
.head 12 -  Set s = itCells[ i ].String
.head 10 +  If s = ''
.head 11 -  Call SalFileWrite( pfh, cEspaceInsep, SalStrLength( cEspaceInsep ) )
.head 10 +  Else
.head 11 -  Call RtfWrite( pfh, s )
.head 8 -  Call EndCell( pfh )
.head 8 -  Call RtfEndBlock( pfh )
.head 8 -  Set i = i + 1
.head 7 -  Call EndRow( pfh )
.head 5 +  Function: WriteRowHeader
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Call BeginRow( pfh )
.head 7 -  Call RtfTableRowTitle( pfh )
.head 7 -  Set i = 1
.head 7 +  While i <= inNbrCell
.head 8 -  Call BeginCell( pfh )
.head 8 -  Set s = ''
.head 8 +  Select Case itCells[ i ].inType
.head 9 +  Case 4
.head 10 -  Set s = itCells[ i ].String
.head 10 -  Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 10 -  Break
.head 9 +  Default
.head 10 +  Select Case itCells[ i ].inType
.head 11 +  Case 2
.head 12 -  Set s = SalFmtFormatNumber( itCells[ i ].Number, itCells[ i ].Format )
.head 12 -  Break
.head 11 +  Case 3
.head 12 -  Set s = SalFmtFormatDateTime( itCells[ i ].Date, itCells[ i ].Format )
.head 12 -  Break
.head 11 +  Default
.head 12 -  Set s = itCells[ i ].String
.head 10 -  Call RtfWrite( pfh, s )
.head 8 -  Call EndCell( pfh )
.head 8 -  Set i = i + 1
.head 7 -  Call EndRow( pfh )
.head 5 +  Function: DefineCellPar
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnCell
.head 7 -  Number: pnSpaceBefore
.head 7 -  Number: pnSpaceAfter
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnCell > inNbrCell
.head 8 -  Set inNbrCell = pnCell
.head 7 -  Set itCells[ pnCell ].nSpaceBefore = pnSpaceBefore
.head 7 -  Set itCells[ pnCell ].nSpaceAfter = pnSpaceAfter
.head 5 +  Function: StartCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call BeginCell( pfh )
.head 5 +  Function: NextCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  File Handle: pfh
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call EndCell( pfh )
.head 7 -  Call BeginCell( pfh )
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 +  Function: BorderCells
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnNum
.head 7 -  Number: pnStyle
.head 7 -  Boolean: pbOn
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 +  If ( pnNum >= 1 ) and ( pnNum <= inNbrCell )
.head 8 +  If pnStyle & cBorderB
.head 9 -  Set itCells[pnNum].bBorderB = pbOn
.head 8 +  If pnStyle & cBorderT
.head 9 -  Set itCells[pnNum].bBorderT = pbOn
.head 8 +  If pnStyle & cBorderL
.head 9 -  Set itCells[pnNum].bBorderL = pbOn
.head 8 +  If pnStyle & cBorderR
.head 9 -  Set itCells[pnNum].bBorderR = pbOn
.head 8 +  If pnStyle & cBorderDB
.head 9 -  Set itCells[pnNum].bBorderDB = pbOn
.head 8 +  If pnStyle & cBorderDT
.head 9 -  Set itCells[pnNum].bBorderDT = pbOn
.head 8 +  If pnStyle & cBorderDL
.head 9 -  Set itCells[pnNum].bBorderDL = pbOn
.head 8 +  If pnStyle & cBorderDR
.head 9 -  Set itCells[pnNum].bBorderDR = pbOn
.head 5 +  Function: BorderCellsLR
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pn
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Boolean: lnOn
.head 7 -  Number: lnStyle
.head 7 -  Number: i
.head 6 +  Actions
.head 7 +  Select Case pn
.head 8 +  Case 1
.head 9 -  Set lnOn = TRUE
.head 9 -  Set lnStyle = cBorderL | cBorderR
.head 9 -  Break
.head 8 +  Default
.head 9 -  Set lnOn = FALSE
.head 9 -  Set lnStyle = cNoBorder
.head 7 -  Set i = inNbrCell
.head 7 +  While i
.head 8 -  Call BorderCells( i, lnStyle, lnOn )
.head 8 -  Set i = i - 1
.head 5 +  Function: BorderCellsAll
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnStyle
.head 7 -  Boolean: pbOn
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = inNbrCell
.head 7 +  While i
.head 8 -  Call BorderCells( i, pnStyle, pbOn )
.head 8 -  Set i = i - 1
.head 5 +  Function: BorderBottomD
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pn
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Boolean: lnOn
.head 7 -  Number: lnStyle
.head 7 -  Number: i
.head 6 +  Actions
.head 7 +  Select Case pn
.head 8 +  Case 1
.head 9 -  Set lnOn = TRUE
.head 9 -  Set lnStyle = cBorderDB
.head 9 -  Break
.head 8 +  Default
.head 9 -  Set lnOn = FALSE
.head 9 -  Set lnStyle = cNoBorder
.head 7 -  Set i = inNbrCell
.head 7 +  While i
.head 8 -  Call BorderCells( i, lnStyle, lnOn )
.head 8 -  Set i = i - 1
.head 5 +  Function: BorderTopD
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pn
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Boolean: lnOn
.head 7 -  Number: lnStyle
.head 7 -  Number: i
.head 6 +  Actions
.head 7 +  Select Case pn
.head 8 +  Case 1
.head 9 -  Set lnOn = TRUE
.head 9 -  Set lnStyle = cBorderB
.head 9 -  Break
.head 8 +  Default
.head 9 -  Set lnOn = FALSE
.head 9 -  Set lnStyle = cNoBorder
.head 7 -  Set i = inNbrCell
.head 7 +  While i
.head 8 -  Call BorderCells( i, lnStyle, lnOn )
.head 8 -  Set i = i - 1
.head 5 +  Function: Size
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return wnRtfWidth - wnRtfMargeL - wnRtfMargeR
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 +  Functional Class: __TRtfValeur
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  Boolean: bModified
.head 5 -  Number: nValue
.head 4 +  Functions
.head 5 +  Function: SetValue
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set nValue = pnValue
.head 7 -  Set bModified = TRUE
.head 5 +  Function: GetValue
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return nValue
.head 5 +  Function: SetModified
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set bModified = pbValue
.head 5 +  Function: Modified
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return bModified
.head 3 -  !
.head 3 +  Functional Class: TRtfChar
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  ! Boolean: __bBold
.head 5 -  ! Boolean: __bItalic
.head 5 -  ! Number: __nFont
.head 5 -  ! Number: __nFontSize
.head 5 -  ! Number: __nUnderline
.head 5 -  FunctionalVar: __bBold
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bHidden
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bShadow
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bStrike
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bDoubleStrike
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bCaps
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bSuper
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bSub
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bItalic
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nFont
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nFontColor
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nFontSize
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nUnderline
.head 6 -  Class: __TRtfValeur
.head 5 -  ! __TRtfValeur:
.winattr class FunctionalVar:
.head 6 -  Class: __TRtfValeur
.end
.head 5 -  Boolean: __bModif
.head 4 +  Functions
.head 5 +  Function: Copy
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pData
.head 8 -  Class: TRtfChar
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bBold.SetValue( pData.__bBold.GetValue(  ) )
.head 7 -  Call __bHidden.SetValue( pData.__bHidden.GetValue(  ) )
.head 7 -  Call __bShadow.SetValue( pData.__bShadow.GetValue(  ) )
.head 7 -  Call __bStrike.SetValue( pData.__bStrike.GetValue(  ) )
.head 7 -  Call __bDoubleStrike.SetValue( pData.__bDoubleStrike.GetValue(  ) )
.head 7 -  Call __bCaps.SetValue( pData.__bCaps.GetValue(  ) )
.head 7 -  Call __bSuper.SetValue( pData.__bSuper.GetValue(  ) )
.head 7 -  Call __bSub.SetValue( pData.__bSub.GetValue(  ) )
.head 7 -  Call __bItalic.SetValue( pData.__bItalic.GetValue(  ) )
.head 7 -  Call __nFont.SetValue( pData.__nFont.GetValue(  ) )
.head 7 -  Call __nFontColor.SetValue( pData.__nFontColor.GetValue(  ) )
.head 7 -  Call __nFontSize.SetValue( pData.__nFontSize.GetValue(  ) )
.head 7 -  Call __nUnderline.SetValue( pData.__nUnderline.GetValue(  ) )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: Clear
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bBold.SetValue( FALSE )
.head 7 -  Call __bHidden.SetValue( FALSE )
.head 7 -  Call __bShadow.SetValue( FALSE )
.head 7 -  Call __bStrike.SetValue( FALSE )
.head 7 -  Call __bDoubleStrike.SetValue( FALSE )
.head 7 -  Call __bCaps.SetValue( FALSE )
.head 7 -  Call __bSuper.SetValue( FALSE )
.head 7 -  Call __bSub.SetValue( FALSE )
.head 7 -  Call __bItalic.SetValue( FALSE )
.head 7 -  Call __nFont.SetValue( 0 )
.head 7 -  Call __nFontColor.SetValue( 0 )
.head 7 -  Call __nFontSize.SetValue( 12 )
.head 7 -  Call __nUnderline.SetValue( 0 )
.head 5 +  Function: Default
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bBold.SetValue( FALSE )
.head 7 -  Call __bHidden.SetValue( FALSE )
.head 7 -  Call __bShadow.SetValue( FALSE )
.head 7 -  Call __bStrike.SetValue( FALSE )
.head 7 -  Call __bDoubleStrike.SetValue( FALSE )
.head 7 -  Call __bCaps.SetValue( FALSE )
.head 7 -  Call __bSuper.SetValue( FALSE )
.head 7 -  Call __bSub.SetValue( FALSE )
.head 7 -  Call __bItalic.SetValue( FALSE )
.head 7 -  Call __nUnderline.SetValue( 0 )
.head 7 -  ! Call __nFontSize.SetValue( 12 )
.head 5 +  Function: Init
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Call __nFontSize.SetValue( 12 )
.head 7 -  Call __nFont.SetValue( 0 )
.head 7 -  Call SetModified( FALSE )
.head 5 +  Function: Bold
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bBold.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsBold
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bBold.GetValue(  )
.head 5 +  Function: Italic
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bItalic.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsItalic
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bItalic.GetValue(  )
.head 5 +  Function: Underline
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nUnderline.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsUnderline
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __nUnderline.GetValue(  )
.head 5 +  Function: Font
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnValue < 0
.head 8 -  Call __nFont.SetValue( 0 )
.head 7 +  Else
.head 8 -  Call __nFont.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: GetFont
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __nFont.GetValue(  )
.head 5 +  Function: FontSize
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnValue < 0
.head 8 -  Call __nFontSize.SetValue( 0 )
.head 7 +  Else
.head 8 -  Call __nFontSize.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: GetFontSize
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __nFontSize.GetValue(  )
.head 5 +  Function: FontColor
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnValue < 0
.head 8 -  Call __nFontColor.SetValue( 0 )
.head 7 +  Else
.head 8 -  Call __nFontColor.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: GetFontColor
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __nFontColor.GetValue(  )
.head 5 +  Function: SetModified
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bBold.SetModified( pbValue )
.head 7 -  Call __bItalic.SetModified( pbValue )
.head 7 -  Call __nUnderline.SetModified( pbValue )
.head 7 -  Call __bCaps.SetModified( pbValue )
.head 7 -  Call __bSuper.SetModified( pbValue )
.head 7 -  Call __bSub.SetModified( pbValue )
.head 7 -  Call __bShadow.SetModified( pbValue )
.head 7 -  Call __bStrike.SetModified( pbValue )
.head 7 -  Call __bDoubleStrike.SetModified( pbValue )
.head 7 -  Call __bHidden.SetModified( pbValue )
.head 7 -  Call __nFont.SetModified( pbValue )
.head 7 -  Call __nFontSize.SetModified( pbValue )
.head 7 -  Call __nFontColor.SetModified( pbValue )
.head 7 -  Set __bModif = pbValue
.head 5 +  Function: Caps
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bCaps.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsCaps
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bCaps.GetValue(  )
.head 5 +  Function: Super
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bSuper.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsSupper
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bSuper.GetValue(  )
.head 5 +  Function: Sub
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bSub.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsSub
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bSub.GetValue(  )
.head 5 +  Function: Shadow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bShadow.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsShadow
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bShadow.GetValue(  )
.head 5 +  Function: Strike
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bStrike.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsStrike
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bStrike.GetValue(  )
.head 5 +  Function: DoubleStrike
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bDoubleStrike.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsDoubleStrike
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bDoubleStrike.GetValue(  )
.head 5 +  Function: Hidden
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bHidden.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: IsHidden
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bHidden.GetValue(  )
.head 5 +  Function: IsModified
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Boolean: b
.head 6 +  Actions
.head 7 -  Set b= __bModif
.head 7 -  Set b = b or __bBold.Modified(  )
.head 7 -  Set b = b or __bHidden.Modified(  )
.head 7 -  Set b = b or __bCaps.Modified(  )
.head 7 -  Set b = b or __bStrike.Modified(  )
.head 7 -  Set b = b or __bDoubleStrike.Modified(  )
.head 7 -  Set b = b or __bShadow.Modified(  )
.head 7 -  Set b = b or __bSuper.Modified(  )
.head 7 -  Set b = b or __bSub.Modified(  )
.head 7 -  Set b = b or __bItalic.Modified(  )
.head 7 -  Set b = b or __nUnderline.Modified(  )
.head 7 -  Set b = b or __nFont.Modified(  )
.head 7 -  Set b = b or __nFontSize.Modified(  )
.head 7 -  Return b
.head 5 +  ! Function: GetStrFmt
.head 6 -  Description: 
.head 6 +  Returns 
.head 7 -  String: 
.head 6 -  Parameters 
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  String: s
.head 6 +  Actions 
.head 7 -  Set s = ''
.head 7 +  If __bBold.Modified(  )
.head 8 +  If __bBold.GetValue(  )
.head 9 -  Set s = s || '\\b'
.head 8 +  Else 
.head 9 -  Set s = s || '\\b0'
.head 7 +  If __bHidden.Modified(  )
.head 8 +  If __bHidden.GetValue(  )
.head 9 -  Set s = s || '\\v'
.head 8 +  Else 
.head 9 -  Set s = s || '\\v0'
.head 7 +  If __bStrike.Modified(  )
.head 8 +  If __bStrike.GetValue(  )
.head 9 -  Set s = s || '\\strike'
.head 8 +  Else 
.head 9 -  Set s = s || '\\strike0'
.head 7 +  If __bDoubleStrike.Modified(  )
.head 8 +  If __bDoubleStrike.GetValue(  )
.head 9 -  Set s = s || '\\striked1'
.head 8 +  Else 
.head 9 -  Set s = s || '\\striked0'
.head 7 +  If __bShadow.Modified(  )
.head 8 +  If __bShadow.GetValue(  )
.head 9 -  Set s = s || '\\shadow'
.head 8 +  Else 
.head 9 -  Set s = s || '\\shadow0'
.head 7 +  If __bCaps.Modified(  )
.head 8 +  If __bCaps.GetValue(  )
.head 9 -  Set s = s || '\\caps'
.head 8 +  Else 
.head 9 -  Set s = s || '\\caps0'
.head 7 +  If __bSuper.Modified(  ) or __bSub.Modified(  )
.head 8 -  Set s = s || '\\nosupersub'
.head 8 +  If __bSuper.GetValue(  )
.head 9 -  Set s = s || '\\super'
.head 8 +  If __bSub.GetValue(  )
.head 9 -  Set s = s || '\\sub'
.head 8 -  ! If not ( __bSub.GetValue(  ) or __bSuper.GetValue( ) )
.head 7 +  If __bItalic.Modified(  )
.head 8 +  If __bItalic.GetValue(  )
.head 9 -  Set s = s || '\\i'
.head 8 +  Else 
.head 9 -  Set s = s || '\\i0'
.head 7 +  If __nUnderline.Modified(  )
.head 8 +  Select Case __nUnderline.GetValue(  )
.head 9 +  Case cUnderline
.head 10 -  Set s = s || '\\ul'
.head 10 -  Break 
.head 9 +  Case cDoubleUnderline
.head 10 -  Set s = s || '\\uldb'
.head 10 -  Break 
.head 9 +  Case cDotUnderline
.head 10 -  Set s = s || '\\uld'
.head 10 -  Break 
.head 9 +  Case cWaveUnderline
.head 10 -  Set s = s || '\\ulwave'
.head 10 -  Break 
.head 9 +  Case cWordUnderline
.head 10 -  Set s = s || '\\ulw'
.head 10 -  Break 
.head 9 +  Default 
.head 10 -  Set s = s || '\\ulnone'
.head 7 +  If __nFont.Modified(  )
.head 8 -  Set s = s || '\\f' || SalNumberToStrX( __nFont.GetValue(  ), 0 )
.head 7 +  If __nFontColor.Modified(  )
.head 8 -  Set s = s || '\\cf' || SalNumberToStrX( __nFontColor.GetValue(  ), 0 )
.head 7 +  If __nFontSize.Modified(  )
.head 8 -  Set s = s || '\\fs' || SalNumberToStrX( __nFontSize.GetValue(  ) * 2, 0 )
.head 7 +  If SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 -  Return s
.head 5 +  Function: GetStrFmt
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 +  If __bModif
.head 8 -  ! Set s = '\\plain'
.head 8 +  If __bBold.Modified(  )
.head 9 +  If __bBold.GetValue(  )
.head 10 -  Set s = s || '\\b'
.head 9 +  Else
.head 10 -  Set s = s || '\\b0'
.head 8 +  If __bHidden.Modified(  )
.head 9 +  If __bHidden.GetValue(  )
.head 10 -  Set s = s || '\\v'
.head 9 +  Else
.head 10 -  Set s = s || '\\v0'
.head 8 +  If __bStrike.Modified(  )
.head 9 +  If __bStrike.GetValue(  )
.head 10 -  Set s = s || '\\strike'
.head 9 +  Else
.head 10 -  Set s = s || '\\strike0'
.head 8 +  If __bDoubleStrike.Modified(  )
.head 9 +  If __bDoubleStrike.GetValue(  )
.head 10 -  Set s = s || '\\striked1'
.head 9 +  Else
.head 10 -  Set s = s || '\\striked0'
.head 8 +  If __bShadow.Modified(  )
.head 9 +  If __bShadow.GetValue(  )
.head 10 -  Set s = s || '\\shadow'
.head 9 +  Else
.head 10 -  Set s = s || '\\shadow0'
.head 8 +  If __bCaps.Modified(  )
.head 9 +  If __bCaps.GetValue(  )
.head 10 -  Set s = s || '\\caps'
.head 9 +  Else
.head 10 -  Set s = s || '\\caps0'
.head 8 +  If __bSuper.Modified(  ) or __bSub.Modified(  )
.head 9 -  ! If not ( __bSub.GetValue(  ) or __bSuper.GetValue( ) )
.head 9 -  Set s = s || '\\nosupersub'
.head 9 +  If __bSuper.GetValue(  )
.head 10 -  Set s = s || '\\super'
.head 9 +  If __bSub.GetValue(  )
.head 10 -  Set s = s || '\\sub'
.head 8 +  If __bItalic.Modified(  )
.head 9 +  If __bItalic.GetValue(  )
.head 10 -  Set s = s || '\\i'
.head 9 +  Else
.head 10 -  Set s = s || '\\i0'
.head 8 +  If __nUnderline.Modified(  )
.head 9 +  Select Case __nUnderline.GetValue(  )
.head 10 +  Case cUnderline
.head 11 -  Set s = s || '\\ul'
.head 11 -  Break
.head 10 +  Case cDoubleUnderline
.head 11 -  Set s = s || '\\uldb'
.head 11 -  Break
.head 10 +  Case cDotUnderline
.head 11 -  Set s = s || '\\uld'
.head 11 -  Break
.head 10 +  Case cWaveUnderline
.head 11 -  Set s = s || '\\ulwave'
.head 11 -  Break
.head 10 +  Case cWordUnderline
.head 11 -  Set s = s || '\\ulw'
.head 11 -  Break
.head 10 +  Default
.head 11 -  Set s = s || '\\ulnone'
.head 8 +  If __nFont.Modified(  )
.head 9 -  Set s = s || '\\f' || SalNumberToStrX( __nFont.GetValue(  ), 0 )
.head 8 +  If __nFontColor.Modified(  )
.head 9 -  Set s = s || '\\cf' || SalNumberToStrX( __nFontColor.GetValue(  ), 0 )
.head 8 +  If __nFontSize.Modified(  )
.head 9 -  Set s = s || '\\fs' || SalNumberToStrX( __nFontSize.GetValue(  ) * 2, 0 )
.head 8 -  Set __bModif = FALSE
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 -  Set s = VisStrSubstitute( s, ' ', '' )
.head 7 -  Call SetModified( FALSE )
.head 7 -  Return s
.head 5 +  Function: GetStrFmtAll
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 +  If TRUE
.head 8 -  Set s = '\\plain'
.head 8 +  If __bBold.GetValue(  )
.head 9 -  Set s = s || '\\b'
.head 8 +  ! Else
.head 9 -  Set s = s || '\\b0'
.head 8 +  If __bHidden.GetValue(  )
.head 9 -  Set s = s || '\\v'
.head 8 +  ! Else
.head 9 -  Set s = s || '\\v0'
.head 8 +  If __bStrike.GetValue(  )
.head 9 -  Set s = s || '\\strike'
.head 8 +  ! Else
.head 9 -  Set s = s || '\\strike0'
.head 8 +  If __bDoubleStrike.GetValue(  )
.head 9 -  Set s = s || '\\striked1'
.head 8 +  ! Else
.head 9 -  Set s = s || '\\striked0'
.head 8 +  If __bShadow.GetValue(  )
.head 9 -  Set s = s || '\\shadow'
.head 8 +  ! Else
.head 9 -  Set s = s || '\\shadow0'
.head 8 +  If __bCaps.GetValue(  )
.head 9 -  Set s = s || '\\caps'
.head 8 +  ! Else
.head 9 -  Set s = s || '\\caps0'
.head 8 +  If __bSuper.Modified(  ) or __bSub.Modified(  )
.head 9 -  ! If not ( __bSub.GetValue(  ) or __bSuper.GetValue( ) )
.head 8 -  ! Set s = s || '\\nosupersub'
.head 8 +  If __bSuper.GetValue(  )
.head 9 -  Set s = s || '\\super'
.head 8 +  If __bSub.GetValue(  )
.head 9 -  Set s = s || '\\sub'
.head 8 -  If __bItalic.Modified(  )
.head 8 +  If __bItalic.GetValue(  )
.head 9 -  Set s = s || '\\i'
.head 8 +  ! Else
.head 9 -  Set s = s || '\\i0'
.head 8 -  If __nUnderline.Modified(  )
.head 8 +  Select Case __nUnderline.GetValue(  )
.head 9 +  Case cUnderline
.head 10 -  Set s = s || '\\ul'
.head 10 -  Break
.head 9 +  Case cDoubleUnderline
.head 10 -  Set s = s || '\\uldb'
.head 10 -  Break
.head 9 +  Case cDotUnderline
.head 10 -  Set s = s || '\\uld'
.head 10 -  Break
.head 9 +  Case cWaveUnderline
.head 10 -  Set s = s || '\\ulwave'
.head 10 -  Break
.head 9 +  Case cWordUnderline
.head 10 -  Set s = s || '\\ulw'
.head 10 -  Break
.head 9 +  ! Default
.head 10 -  Set s = s || '\\ulnone'
.head 8 -  ! If __nFont.Modified(  )
.head 8 -  Set s = s || '\\f' || SalNumberToStrX( __nFont.GetValue(  ), 0 )
.head 8 -  ! If __nFontColor.Modified(  )
.head 8 -  Set s = s || '\\cf' || SalNumberToStrX( __nFontColor.GetValue(  ), 0 )
.head 8 -  ! If __nFontSize.Modified(  )
.head 8 -  Set s = s || '\\fs' || SalNumberToStrX( __nFontSize.GetValue(  ) * 2, 0 )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 -  Set s = VisStrSubstitute( s, ' ', '' )
.head 7 -  Return s
.head 5 +  Function: FormatChar
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = 0
.head 7 +  While i < SalStrLength( psValue )
.head 8 -  Set s = SalStrMidX( psValue, i, 1 )
.head 8 +  If s = 'B'
.head 9 -  Call __bBold.SetValue( TRUE )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'b'
.head 9 -  Call __bBold.SetValue( FALSE )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'I'
.head 9 -  Call __bItalic.SetValue( TRUE )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'i'
.head 9 -  Call __bItalic.SetValue( FALSE )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'U'
.head 9 -  Call __nUnderline.SetValue( cUnderline )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'u'
.head 9 -  Call __nUnderline.SetValue( 0 )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'D'
.head 9 -  Call __nUnderline.SetValue( cDoubleUnderline )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'd'
.head 9 -  Call __nUnderline.SetValue( cDoubleUnderline )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'C'
.head 9 -  Call __bCaps.SetValue( TRUE )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'c'
.head 9 -  Call __bCaps.SetValue( FALSE )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'X'
.head 9 -  Call __bSuper.SetValue( TRUE )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'x'
.head 9 -  Call __bSuper.SetValue( FALSE )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 'S'
.head 9 -  Call __bSub.SetValue( TRUE )
.head 9 -  Set __bModif = TRUE
.head 8 +  Else If s = 's'
.head 9 -  Call __bSub.SetValue( FALSE )
.head 9 -  Set __bModif = TRUE
.head 8 -  Set i = i + 1
.head 3 -  !
.head 3 +  Functional Class: TRtfTabs
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  Number: __nNbrTab
.head 5 -  Number: __nPosTab[*]
.head 5 -  Number: __nTypeTab[*]
.head 5 -  Boolean: __bModif
.head 4 +  Functions
.head 5 +  Function: Init
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __nNbrTab = 0
.head 5 +  Function: ObjectDestructor
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 -  Actions
.head 5 +  Function: __getNumTab
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnPos
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Boolean: bOk
.head 6 +  Actions
.head 7 -  Set bOk = FALSE
.head 7 -  Set i = 0
.head 7 +  While not bOk and ( i < __nNbrTab )
.head 8 -  Set bOk = ( __nPosTab[i] = pnPos ) 
.head 8 +  If not bOk
.head 9 -  Set i = i + 1
.head 7 +  If not bOk
.head 8 -  Set i = __nNbrTab
.head 7 -  Return i
.head 5 +  Function: SetT
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnPos
.head 7 -  Number: pnType
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = __getNumTab( pnPos )
.head 7 +  If i = __nNbrTab
.head 8 -  Set __nNbrTab = __nNbrTab + 1
.head 8 -  Set __nPosTab[i] = pnPos
.head 8 -  Set __nTypeTab[i] = pnType
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: Del
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnPos
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = __getNumTab( pnPos )
.head 7 +  While i < ( __nNbrTab - 1 )
.head 8 -  Set __nPosTab[i] = __nPosTab[i+1]
.head 8 -  Set __nTypeTab[i] = __nTypeTab[i+1]
.head 8 -  Set i = i + 1
.head 7 -  Set __nNbrTab = __nNbrTab - 1
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: Clear
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = __nNbrTab
.head 7 +  While i > 0
.head 8 -  Set __nPosTab[i] = NUMBER_Null
.head 8 -  Set __nTypeTab[i] = NUMBER_Null
.head 8 -  Set i = i - 1
.head 7 -  Set __nNbrTab = 0
.head 5 +  Function: GetStrFmt
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: s
.head 7 -  Number: nKind
.head 6 +  Actions
.head 7 -  Set s = ' '
.head 7 +  If __bModif
.head 8 -  Set i = 0
.head 8 +  While i < __nNbrTab
.head 9 -  Set nKind = __nTypeTab[i]
.head 9 +  If nKind & cTabDot
.head 10 -  Set s = s || '\\tldot'
.head 10 -  Set nKind = nKind - cTabDot
.head 9 +  If nKind & cTabHyphen
.head 10 -  Set s = s || '\\tlhyph'
.head 10 -  Set nKind = nKind - cTabHyphen
.head 9 +  If nKind & cTabUnderline
.head 10 -  Set s = s || '\\tlul'
.head 10 -  Set nKind = nKind - cTabUnderline
.head 9 +  If nKind & cTabThichLine
.head 10 -  Set s = s || '\\tlth'
.head 10 -  Set nKind = nKind - cTabThichLine
.head 9 +  If nKind & cTabEqualSign
.head 10 -  Set s = s || '\\tleq'
.head 10 -  Set nKind = nKind - cTabEqualSign
.head 9 +  If nKind = cTabDec
.head 10 -  Set s = s || '\\tqdec'
.head 9 +  If nKind = cTabRight
.head 10 -  Set s = s || '\\tqr'
.head 9 +  If nKind = cTabCenter
.head 10 -  Set s = s || '\\tqc'
.head 9 -  Set s = s || '\\tx' || SalFmtFormatNumber( CMToTwips( __nPosTab[i] ), '0' )
.head 9 -  Set i = i + 1
.head 8 -  Set __bModif = FALSE
.head 7 +  If s != ''
.head 8 -  ! Set s = '\\widctlpar' || s
.head 7 -  ! Set s = '\\widctlpar' || s || '\\tx' || SalFmtFormatNumber( CMToTwips( pnPos ), '0' )
.head 7 -  Return s
.head 5 +  Function: GetStrFmtAll
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: s
.head 7 -  Number: nKind
.head 6 +  Actions
.head 7 -  Set s = ' '
.head 7 +  If TRUE
.head 8 -  Set i = 0
.head 8 +  While i < __nNbrTab
.head 9 -  Set nKind = __nTypeTab[i]
.head 9 +  If nKind & cTabDot
.head 10 -  Set s = s || '\\tldot'
.head 10 -  Set nKind = nKind - cTabDot
.head 9 +  If nKind & cTabHyphen
.head 10 -  Set s = s || '\\tlhyph'
.head 10 -  Set nKind = nKind - cTabHyphen
.head 9 +  If nKind & cTabUnderline
.head 10 -  Set s = s || '\\tlul'
.head 10 -  Set nKind = nKind - cTabUnderline
.head 9 +  If nKind & cTabThichLine
.head 10 -  Set s = s || '\\tlth'
.head 10 -  Set nKind = nKind - cTabThichLine
.head 9 +  If nKind & cTabEqualSign
.head 10 -  Set s = s || '\\tleq'
.head 10 -  Set nKind = nKind - cTabEqualSign
.head 9 +  If nKind = cTabDec
.head 10 -  Set s = s || '\\tqdec'
.head 9 +  If nKind = cTabRight
.head 10 -  Set s = s || '\\tqr'
.head 9 +  If nKind = cTabCenter
.head 10 -  Set s = s || '\\tqc'
.head 9 -  Set s = s || '\\tx' || SalFmtFormatNumber( CMToTwips( __nPosTab[i] ), '0' )
.head 9 -  Set i = i + 1
.head 7 +  If s != ''
.head 8 -  ! Set s = '\\widctlpar' || s 
.head 7 -  ! Set s = '\\widctlpar' || s || '\\tx' || SalFmtFormatNumber( CMToTwips( pnPos ), '0' )
.head 7 -  Return s
.head 5 +  Function: Modified
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bModif
.head 5 +  Function: Copy
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: oData
.head 8 -  Class: TRtfTabs
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set __nNbrTab = oData.__nNbrTab
.head 7 -  Set __bModif = oData.__bModif
.head 7 -  Set i = __nNbrTab
.head 7 +  While i
.head 8 -  Set i = i - 1
.head 8 -  Set __nPosTab[i] = oData.__nPosTab[i]
.head 8 -  Set __nTypeTab[i] = oData.__nTypeTab[i]
.head 3 -  !
.head 3 +  Functional Class: TRtfParagraphe
.head 4 -  Description:
.head 4 +  Derived From
.head 5 -  Class: TRtfChar
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  Boolean: __bInTbl
.head 5 -  FunctionalVar: __nAlignement
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bParSolidaire
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bLigneSolidaire
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __bBorderOutside
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderHoriz
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderVert
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderTop
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderBottom
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderLeft
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderRight
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderHWidth
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderVWidth
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderTWidth
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderLWidth
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderRWidth
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderBWidth
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderTSpace
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderBSpace
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderLSpace
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nBorderRSpace
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nShading
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nShadingType
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nFirstLine
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nLeftIndent
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nRightIndent
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nSpaceBefore
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: __nSpaceAfter
.head 6 -  Class: __TRtfValeur
.head 5 -  FunctionalVar: Tabs
.head 6 -  Class: TRtfTabs
.head 5 -  Boolean: __bModif
.head 4 +  Functions
.head 5 +  Function: Copy
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pData
.head 8 -  Class: TRtfParagraphe
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nAlignement.SetValue( pData.__nAlignement.GetValue(  ) )
.head 7 -  Call __bParSolidaire.SetValue( pData.__bParSolidaire.GetValue(  ) )
.head 7 -  Call __bLigneSolidaire.SetValue( pData.__bLigneSolidaire.GetValue(  ) )
.head 7 -  Call __bBorderOutside.SetValue( pData.__bBorderOutside.GetValue(  ) )
.head 7 -  Call __nBorderHoriz.SetValue( pData.__nBorderHoriz.GetValue(  ) )
.head 7 -  Call __nBorderVert.SetValue( pData.__nBorderVert.GetValue(  ) )
.head 7 -  Call __nBorderTop.SetValue( pData.__nBorderTop.GetValue(  ) )
.head 7 -  Call __nBorderBottom.SetValue( pData.__nBorderBottom.GetValue(  ) )
.head 7 -  Call __nBorderLeft.SetValue( pData.__nBorderLeft.GetValue(  ) )
.head 7 -  Call __nBorderRight.SetValue( pData.__nBorderRight.GetValue(  ) )
.head 7 -  Call __nBorderHWidth.SetValue( pData.__nBorderHWidth.GetValue(  ) )
.head 7 -  Call __nBorderVWidth.SetValue( pData.__nBorderVWidth.GetValue(  ) )
.head 7 -  Call __nBorderTWidth.SetValue( pData.__nBorderTWidth.GetValue(  ) )
.head 7 -  Call __nBorderLWidth.SetValue( pData.__nBorderLWidth.GetValue(  ) )
.head 7 -  Call __nBorderRWidth.SetValue( pData.__nBorderRWidth.GetValue(  ) )
.head 7 -  Call __nBorderBWidth.SetValue( pData.__nBorderBWidth.GetValue(  ) )
.head 7 -  Call __nBorderTSpace.SetValue( pData.__nBorderTSpace.GetValue(  ) )
.head 7 -  Call __nBorderBSpace.SetValue( pData.__nBorderBSpace.GetValue(  ) )
.head 7 -  Call __nBorderLSpace.SetValue( pData.__nBorderLSpace.GetValue(  ) )
.head 7 -  Call __nBorderRSpace.SetValue( pData.__nBorderRSpace.GetValue(  ) )
.head 7 -  Call __nShading.SetValue( pData.__nShading.GetValue(  ) )
.head 7 -  Call __nShadingType.SetValue( pData.__nShadingType.GetValue(  ) )
.head 7 -  Call __nFirstLine.SetValue( pData.__nFirstLine.GetValue(  ) )
.head 7 -  Call __nLeftIndent.SetValue( pData.__nLeftIndent.GetValue(  ) )
.head 7 -  Call __nRightIndent.SetValue( pData.__nRightIndent.GetValue(  ) )
.head 7 -  Call __nSpaceBefore.SetValue( pData.__nSpaceBefore.GetValue(  ) )
.head 7 -  Call __nSpaceAfter.SetValue( pData.__nSpaceAfter.GetValue(  ) )
.head 7 -  Call TRtfChar.Copy( pData )
.head 7 -  Call Tabs.Copy( pData.Tabs )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: Clear
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nAlignement.SetValue( cParLeft )
.head 7 -  Call __bParSolidaire.SetValue( FALSE )
.head 7 -  Call __bLigneSolidaire.SetValue( FALSE )
.head 7 -  Call __bBorderOutside.SetValue( FALSE )
.head 7 -  Call __nBorderHoriz.SetValue( 0)
.head 7 -  Call __nBorderVert.SetValue( 0 )
.head 7 -  Call __nBorderTop.SetValue( 0 )
.head 7 -  Call __nBorderBottom.SetValue( 0 )
.head 7 -  Call __nBorderLeft.SetValue( 0 )
.head 7 -  Call __nBorderRight.SetValue( 0 )
.head 7 -  Call __nBorderHWidth.SetValue( 0 )
.head 7 -  Call __nBorderVWidth.SetValue( 0 )
.head 7 -  Call __nBorderTWidth.SetValue( 0 )
.head 7 -  Call __nBorderLWidth.SetValue( 0 )
.head 7 -  Call __nBorderRWidth.SetValue( 0 )
.head 7 -  Call __nBorderBWidth.SetValue( 0 )
.head 7 -  Call __nBorderTSpace.SetValue( 0 )
.head 7 -  Call __nBorderBSpace.SetValue( 0 )
.head 7 -  Call __nBorderLSpace.SetValue( 0 )
.head 7 -  Call __nBorderRSpace.SetValue( 0 )
.head 7 -  Call __nShading.SetValue( 0 )
.head 7 -  Call __nShadingType.SetValue( 0 )
.head 7 -  Call __nFirstLine.SetValue( 0 )
.head 7 -  Call __nLeftIndent.SetValue( 0 )
.head 7 -  Call __nRightIndent.SetValue( 0 )
.head 7 -  Call __nSpaceBefore.SetValue( 0 )
.head 7 -  Call __nSpaceAfter.SetValue( 0 )
.head 7 -  ! Set __bModif = TRUE
.head 7 -  Call TRtfChar.Clear(  )
.head 5 +  Function: Default
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nAlignement.SetValue( cParLeft )
.head 7 -  Call __bParSolidaire.SetValue( FALSE )
.head 7 -  Call __bLigneSolidaire.SetValue( FALSE )
.head 7 -  Call __bBorderOutside.SetValue( FALSE )
.head 7 -  Call __nBorderHoriz.SetValue( 0 )
.head 7 -  Call __nBorderVert.SetValue( 0 )
.head 7 -  Call __nBorderTop.SetValue( 0 )
.head 7 -  Call __nBorderBottom.SetValue( 0 )
.head 7 -  Call __nBorderLeft.SetValue( 0 )
.head 7 -  Call __nBorderRight.SetValue( 0 )
.head 7 -  Call __nBorderHWidth.SetValue( 0 )
.head 7 -  Call __nBorderVWidth.SetValue( 0 )
.head 7 -  Call __nBorderTWidth.SetValue( 0 )
.head 7 -  Call __nBorderBWidth.SetValue( 0 )
.head 7 -  Call __nBorderLWidth.SetValue( 0 )
.head 7 -  Call __nBorderRWidth.SetValue( 0 )
.head 7 -  Call __nShading.SetValue( 0 )
.head 7 -  Call __nShadingType.SetValue( 0 )
.head 7 -  Call __nFirstLine.SetValue( 0 )
.head 7 -  Call __nLeftIndent.SetValue( 0 )
.head 7 -  Call __nRightIndent.SetValue( 0 )
.head 7 -  Call __nSpaceAfter.SetValue( 0 )
.head 7 -  Call __nSpaceBefore.SetValue( 0 )
.head 5 +  Function: Init
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call TRtfChar.Init(  )
.head 7 -  Call __nBorderTWidth.SetValue( 15 )
.head 7 -  Call __nBorderBWidth.SetValue( 15 )
.head 7 -  Call __nBorderLWidth.SetValue( 15 )
.head 7 -  Call __nBorderRWidth.SetValue( 15 )
.head 7 -  Call __nBorderTSpace.SetValue( 20 )
.head 7 -  Call __nBorderBSpace.SetValue( 20 )
.head 7 -  Call __nBorderLSpace.SetValue( 20 )
.head 7 -  Call __nBorderRSpace.SetValue( 20 )
.head 7 -  Call __nFirstLine.SetValue( 0 )
.head 7 -  Call __nLeftIndent.SetValue( 0 )
.head 7 -  Call __nRightIndent.SetValue( 0 )
.head 7 -  Call SetModified( FALSE )
.head 5 +  Function: InTbl
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __bInTbl = pbValue
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: SpaceBefore
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nSpaceBefore.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: SpaceAfter
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nSpaceAfter.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: FirstLine
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nFirstLine.SetValue( CM2TWIPS( pnValue ) )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: LeftIndent
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nLeftIndent.SetValue( CM2TWIPS( pnValue ) )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: RightIndent
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nRightIndent.SetValue( CM2TWIPS( pnValue ) )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: Alignement
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nAlignement.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: ParagrapheSolidaire
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bParSolidaire.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: LigneSolidaire
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __bLigneSolidaire.SetValue( pbValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderTop
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderTop.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderHoriz
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderHoriz.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderVert
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderVert.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderBottom
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderBottom.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderLeft
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderLeft.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderRight
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderRight.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: Box
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call BorderTop( pnValue )
.head 7 -  Call BorderBottom( pnValue )
.head 7 -  Call BorderLeft( pnValue )
.head 7 -  Call BorderRight( pnValue )
.head 5 +  Function: BorderTopWidth
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderTWidth.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderHorizWidth
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderHWidth.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderVertWidth
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderVWidth.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderBottomWidth
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderBWidth.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderLeftWidth
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderLWidth.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderRightWidth
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderRWidth.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderTopSpace
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderTSpace.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderBottomSpace
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderBSpace.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderLeftSpace
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderLSpace.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: BorderRightSpace
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nBorderRSpace.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  ! Function: GetStrFmt
.head 6 -  Description: 
.head 6 +  Returns 
.head 7 -  String: 
.head 6 -  Parameters 
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  String: s
.head 7 -  String: sW
.head 6 +  Actions 
.head 7 -  Set s = ''
.head 7 +  If __nAlignement.Modified(  )
.head 8 +  Select Case __nAlignement.GetValue(  )
.head 9 +  Case cParRight
.head 10 -  Set s = s || '\\qr'
.head 10 -  Break 
.head 9 +  Case cParCenter
.head 10 -  Set s = s || '\\qc'
.head 10 -  Break 
.head 9 +  Case cParJust
.head 10 -  Set s = s || '\\qj'
.head 10 -  Break 
.head 9 +  ! Case cWordUnderline
.head 10 -  Set s = s || '\\ulw'
.head 10 -  Break 
.head 9 +  Default 
.head 10 -  Set s = s || '\\ql'
.head 7 +  If __bParSolidaire.Modified(  )
.head 8 +  If __bParSolidaire.GetValue(  )
.head 9 -  Set s = s || '\\keepn'
.head 7 +  If __bLigneSolidaire.Modified(  )
.head 8 +  If __bLigneSolidaire.GetValue(  )
.head 9 -  Set s = s || '\\keep'
.head 7 +  If __nBorderVert.Modified(  ) or __nBorderHoriz.Modified(  ) or __nBorderTop.Modified(  ) or __nBorderBottom.Modified(  ) or __nBorderLeft.Modified(  ) or __nBorderRight.Modified(  ) or 
    __nBorderHWidth.Modified(  ) or __nBorderVWidth.Modified(  ) or __nBorderTWidth.Modified(  ) or __nBorderBWidth.Modified(  ) or __nBorderLWidth.Modified(  ) or __nBorderRWidth.Modified(  ) or
    __nBorderTSpace.Modified(  ) or __nBorderBSpace.Modified(  ) or __nBorderLSpace.Modified(  ) or __nBorderRSpace.Modified(  ) 
.head 8 -  Set s = s || '\\pard' 
.head 8 -  Set sW = ''
.head 8 +  If __nBorderTop.GetValue(  )
.head 9 -  Set s = s || '\\brdrt' || sW || GetCodeBorder( __nBorderTop.GetValue(  ) ) 
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderTWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderTSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderHoriz.GetValue(  )
.head 9 -  ! Set s = s || '\\brdrt\\brdrbtw' || GetCodeBorder( __nBorderHoriz.GetValue(  ) ) 
.head 9 -  ! Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderHWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brdrb\\brdrbtw' || GetCodeBorder( __nBorderHoriz.GetValue(  ) ) 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderHWidth.GetValue(  ), 0 )
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  ! Set s = s || '\\brsp' || SalNumberToStrX( __nBorderTSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderLeft.GetValue(  )
.head 9 -  Set s = s || '\\brdrl' || sW || GetCodeBorder( __nBorderLeft.GetValue(  ) ) 
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderLWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderLSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderVert.GetValue(  )
.head 9 -  ! Set s = s || '\\brdrl\\brdrbtw' || GetCodeBorder( __nBorderVert.GetValue(  ) ) 
.head 9 -  ! Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderVWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brdrr\\brdrbtw' || GetCodeBorder( __nBorderVert.GetValue(  ) ) 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderVWidth.GetValue(  ), 0 )
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  ! Set s = s || '\\brsp' || SalNumberToStrX( __nBorderLSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderBottom.GetValue(  )
.head 9 -  Set s = s || '\\brdrb' || sW || GetCodeBorder( __nBorderBottom.GetValue(  ) ) 
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderBWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderBSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderRight.GetValue(  )
.head 9 -  Set s = s || '\\brdrr' || sW || GetCodeBorder( __nBorderRight.GetValue(  ) ) 
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderRWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderRSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 -  ! Set s = s || '\\brdrbtw'
.head 7 +  If __nShading.Modified(  )
.head 8 -  Set s = s || '\\shading' || SalNumberToStrX( __nShading.GetValue(  ) *100, 0 )
.head 7 +  If __nShadingType.Modified(  )
.head 8 +  Select Case __nShadingType.GetValue(  )
.head 9 +  Case cParShadingHoriz
.head 10 -  Set s = s || '\\bghoriz'
.head 10 -  Break 
.head 9 +  Case cParShadingVert
.head 10 -  Set s = s || '\\bgvert'
.head 10 -  Break 
.head 9 +  Case cParShadingFDiag
.head 10 -  Set s = s || '\\bgfdiag'
.head 10 -  Break 
.head 9 +  Case cParShadingBDiag
.head 10 -  Set s = s || '\\bgbdiag'
.head 10 -  Break 
.head 9 +  Case cParShadingCross
.head 10 -  Set s = s || '\\bgcross'
.head 10 -  Break 
.head 9 +  Case cParShadingDCross
.head 10 -  Set s = s || '\\bgdcross'
.head 10 -  Break 
.head 9 +  Case cParShadingDKHoriz
.head 10 -  Set s = s || '\\bgdkhoriz'
.head 10 -  Break 
.head 9 +  Case cParShadingDKVert
.head 10 -  Set s = s || '\\bgdkvert'
.head 10 -  Break 
.head 9 +  Case cParShadingDKFDiag
.head 10 -  Set s = s || '\\bgdkfdiag'
.head 10 -  Break 
.head 9 +  Case cParShadingDKBDiag
.head 10 -  Set s = s || '\\bgdkbdiag'
.head 10 -  Break 
.head 9 +  Case cParShadingDKCross
.head 10 -  Set s = s || '\\bgdkcross'
.head 10 -  Break 
.head 9 +  Case cParShadingDKDCross
.head 10 -  Set s = s || '\\bgdkdcross'
.head 10 -  Break 
.head 7 +  If __nFirstLine.Modified(  )
.head 8 -  Set s = s || '\\fi' || SalNumberToStrX( __nFirstLine.GetValue(  ) , 0 )
.head 7 +  If __nLeftIndent.Modified(  )
.head 8 -  Set s = s || '\\li' || SalNumberToStrX( __nLeftIndent.GetValue(  ) , 0 )
.head 7 +  If __nRightIndent.Modified(  )
.head 8 -  Set s = s || '\\ri' || SalNumberToStrX( __nRightIndent.GetValue(  ) , 0 )
.head 7 +  If __nSpaceBefore.Modified(  )
.head 8 -  Set s = s || '\\sb' || SalNumberToStrX( __nSpaceBefore.GetValue(  ) * 20 , 0 )
.head 7 +  If __nSpaceAfter.Modified(  )
.head 8 -  Set s = s || '\\sa' || SalNumberToStrX( __nSpaceAfter.GetValue(  ) * 20 , 0 )
.head 7 -  Set s = s || Tabs.GetStrFmt(  )
.head 7 +  If TRtfChar.IsModified( )
.head 8 -  Set s = s || TRtfChar.GetStrFmt(  )
.head 8 -  Call TRtfChar.SetModified( FALSE )
.head 7 +  If SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 -  Call SetModified( FALSE )
.head 7 -  Return s
.head 5 +  Function: GetStrFmt
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  String: sW
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 +  If __bModif
.head 8 +  If __bInTbl
.head 9 -  Set s = s || '\\intbl'
.head 8 -  ! Set s = s || '\\pard'
.head 8 -  If __nAlignement.Modified(  )
.head 8 +  Select Case __nAlignement.GetValue(  )
.head 9 +  Case cParRight
.head 10 -  Set s = s || '\\qr'
.head 10 -  Break
.head 9 +  Case cParCenter
.head 10 -  Set s = s || '\\qc'
.head 10 -  Break
.head 9 +  Case cParJust
.head 10 -  Set s = s || '\\qj'
.head 10 -  Break
.head 9 +  Case cParLeft
.head 10 -  Set s = s || '\\ql'
.head 10 -  Break
.head 9 +  ! Case cWordUnderline
.head 10 -  Set s = s || '\\ulw'
.head 10 -  Break 
.head 9 +  ! Default
.head 10 -  Set s = s || '\\ql'
.head 8 -  If __bParSolidaire.Modified(  )
.head 8 +  If __bParSolidaire.GetValue(  )
.head 9 -  Set s = s || '\\keepn'
.head 8 -  If __bLigneSolidaire.Modified(  )
.head 8 +  If __bLigneSolidaire.GetValue(  )
.head 9 -  Set s = s || '\\keep'
.head 8 +  ! If __nBorderVert.Modified(  ) or __nBorderHoriz.Modified(  ) or __nBorderTop.Modified(  ) or __nBorderBottom.Modified(  ) or __nBorderLeft.Modified(  ) or __nBorderRight.Modified(  ) or 
    __nBorderHWidth.Modified(  ) or __nBorderVWidth.Modified(  ) or __nBorderTWidth.Modified(  ) or __nBorderBWidth.Modified(  ) or __nBorderLWidth.Modified(  ) or __nBorderRWidth.Modified(  ) or
    __nBorderTSpace.Modified(  ) or __nBorderBSpace.Modified(  ) or __nBorderLSpace.Modified(  ) or __nBorderRSpace.Modified(  ) 
.head 9 -  ! Set s = s || '\\pard' 
.head 9 -  Set sW = ''
.head 8 +  If __nBorderTop.GetValue(  )
.head 9 -  Set s = s || '\\brdrt' || sW || GetCodeBorder( __nBorderTop.GetValue(  ) ) 
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderTWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderTSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderHoriz.GetValue(  )
.head 9 -  ! Set s = s || '\\brdrt\\brdrbtw' || GetCodeBorder( __nBorderHoriz.GetValue(  ) ) 
.head 9 -  ! Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderHWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brdrb\\brdrbtw' || GetCodeBorder( __nBorderHoriz.GetValue(  ) ) 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderHWidth.GetValue(  ), 0 )
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  ! Set s = s || '\\brsp' || SalNumberToStrX( __nBorderTSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderLeft.GetValue(  )
.head 9 -  Set s = s || '\\brdrl' || sW || GetCodeBorder( __nBorderLeft.GetValue(  ) ) 
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderLWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderLSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderVert.GetValue(  )
.head 9 -  ! Set s = s || '\\brdrl\\brdrbtw' || GetCodeBorder( __nBorderVert.GetValue(  ) ) 
.head 9 -  ! Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderVWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brdrr\\brdrbtw' || GetCodeBorder( __nBorderVert.GetValue(  ) ) 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderVWidth.GetValue(  ), 0 )
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  ! Set s = s || '\\brsp' || SalNumberToStrX( __nBorderLSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderBottom.GetValue(  )
.head 9 -  Set s = s || '\\brdrb' || sW || GetCodeBorder( __nBorderBottom.GetValue(  ) ) 
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderBWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderBSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 +  If __nBorderRight.GetValue(  )
.head 9 -  Set s = s || '\\brdrr' || sW || GetCodeBorder( __nBorderRight.GetValue(  ) ) 
.head 9 -  ! Set sW = ''
.head 9 -  ! Set s = s || '\\brdrs' 
.head 9 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderRWidth.GetValue(  ), 0 )
.head 9 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderRSpace.GetValue(  ), 0 )
.head 9 -  Set s = s || ' '
.head 8 -  ! Set s = s || '\\brdrbtw'
.head 8 -  ! If __nShading.Modified(  )
.head 8 -  Set s = s || '\\shading' || SalNumberToStrX( __nShading.GetValue(  ) *100, 0 )
.head 8 -  ! If __nShadingType.Modified(  )
.head 8 +  Select Case __nShadingType.GetValue(  )
.head 9 +  Case cParShadingHoriz
.head 10 -  Set s = s || '\\bghoriz'
.head 10 -  Break
.head 9 +  Case cParShadingVert
.head 10 -  Set s = s || '\\bgvert'
.head 10 -  Break
.head 9 +  Case cParShadingFDiag
.head 10 -  Set s = s || '\\bgfdiag'
.head 10 -  Break
.head 9 +  Case cParShadingBDiag
.head 10 -  Set s = s || '\\bgbdiag'
.head 10 -  Break
.head 9 +  Case cParShadingCross
.head 10 -  Set s = s || '\\bgcross'
.head 10 -  Break
.head 9 +  Case cParShadingDCross
.head 10 -  Set s = s || '\\bgdcross'
.head 10 -  Break
.head 9 +  Case cParShadingDKHoriz
.head 10 -  Set s = s || '\\bgdkhoriz'
.head 10 -  Break
.head 9 +  Case cParShadingDKVert
.head 10 -  Set s = s || '\\bgdkvert'
.head 10 -  Break
.head 9 +  Case cParShadingDKFDiag
.head 10 -  Set s = s || '\\bgdkfdiag'
.head 10 -  Break
.head 9 +  Case cParShadingDKBDiag
.head 10 -  Set s = s || '\\bgdkbdiag'
.head 10 -  Break
.head 9 +  Case cParShadingDKCross
.head 10 -  Set s = s || '\\bgdkcross'
.head 10 -  Break
.head 9 +  Case cParShadingDKDCross
.head 10 -  Set s = s || '\\bgdkdcross'
.head 10 -  Break
.head 8 -  ! If __nFirstLine.GetValue(  )
.head 8 -  Set s = s || '\\fi' || SalNumberToStrX( __nFirstLine.GetValue(  ) , 0 )
.head 8 -  ! If __nLeftIndent.GetValue(  )
.head 8 -  Set s = s || '\\li' || SalNumberToStrX( __nLeftIndent.GetValue(  ) , 0 )
.head 8 -  ! If __nRightIndent.GetValue(  )
.head 8 -  Set s = s || '\\ri' || SalNumberToStrX( __nRightIndent.GetValue(  ) , 0 )
.head 8 -  ! If __nSpaceBefore.GetValue(  )
.head 8 -  Set s = s || '\\sb' || SalNumberToStrX( __nSpaceBefore.GetValue(  ) * 20 , 0 )
.head 8 -  ! If __nSpaceAfter.GetValue(  )
.head 8 -  Set s = s || '\\sa' || SalNumberToStrX( __nSpaceAfter.GetValue(  ) * 20 , 0 )
.head 8 -  Call SetModified( FALSE )
.head 7 -  Set s = s || Tabs.GetStrFmt(  )
.head 7 +  ! If TRtfChar.IsModified( )
.head 8 -  Call TRtfChar.SetModified( FALSE )
.head 7 -  Set s = s || TRtfChar.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 -  Set s = VisStrSubstitute( s, ' ', '' )
.head 7 -  Return s
.head 5 +  Function: GetStrFmtAll
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  String: sW
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 +  If __bInTbl
.head 8 -  Set s = s || '\\intbl'
.head 7 -  Set s = s || '\\pard'
.head 7 +  Select Case __nAlignement.GetValue(  )
.head 8 +  Case cParRight
.head 9 -  Set s = s || '\\qr'
.head 9 -  Break
.head 8 +  Case cParCenter
.head 9 -  Set s = s || '\\qc'
.head 9 -  Break
.head 8 +  Case cParJust
.head 9 -  Set s = s || '\\qj'
.head 9 -  Break
.head 8 +  Case cParLeft
.head 9 -  Set s = s || '\\ql'
.head 9 -  Break
.head 8 +  ! Case cWordUnderline
.head 9 -  Set s = s || '\\ulw'
.head 9 -  Break 
.head 8 +  ! Default
.head 9 -  Set s = s || '\\ql'
.head 7 +  If __bParSolidaire.GetValue(  )
.head 8 -  Set s = s || '\\keepn'
.head 7 -  If __bLigneSolidaire.Modified(  )
.head 7 +  If __bLigneSolidaire.GetValue(  )
.head 8 -  Set s = s || '\\keep'
.head 7 +  ! If __nBorderVert.Modified(  ) or __nBorderHoriz.Modified(  ) or __nBorderTop.Modified(  ) or __nBorderBottom.Modified(  ) or __nBorderLeft.Modified(  ) or __nBorderRight.Modified(  ) or 
    __nBorderHWidth.Modified(  ) or __nBorderVWidth.Modified(  ) or __nBorderTWidth.Modified(  ) or __nBorderBWidth.Modified(  ) or __nBorderLWidth.Modified(  ) or __nBorderRWidth.Modified(  ) or
    __nBorderTSpace.Modified(  ) or __nBorderBSpace.Modified(  ) or __nBorderLSpace.Modified(  ) or __nBorderRSpace.Modified(  ) 
.head 8 -  ! Set s = s || '\\pard' 
.head 8 -  Set sW = ''
.head 7 +  If __nBorderTop.GetValue(  )
.head 8 -  Set s = s || '\\brdrt' || sW || GetCodeBorder( __nBorderTop.GetValue(  ) ) 
.head 8 -  ! Set sW = ''
.head 8 -  ! Set s = s || '\\brdrs' 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderTWidth.GetValue(  ), 0 )
.head 8 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderTSpace.GetValue(  ), 0 )
.head 8 -  Set s = s || ' '
.head 7 +  If __nBorderHoriz.GetValue(  )
.head 8 -  ! Set s = s || '\\brdrt\\brdrbtw' || GetCodeBorder( __nBorderHoriz.GetValue(  ) ) 
.head 8 -  ! Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderHWidth.GetValue(  ), 0 )
.head 8 -  Set s = s || '\\brdrb\\brdrbtw' || GetCodeBorder( __nBorderHoriz.GetValue(  ) ) 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderHWidth.GetValue(  ), 0 )
.head 8 -  ! Set sW = ''
.head 8 -  ! Set s = s || '\\brdrs' 
.head 8 -  ! Set s = s || '\\brsp' || SalNumberToStrX( __nBorderTSpace.GetValue(  ), 0 )
.head 8 -  Set s = s || ' '
.head 7 +  If __nBorderLeft.GetValue(  )
.head 8 -  Set s = s || '\\brdrl' || sW || GetCodeBorder( __nBorderLeft.GetValue(  ) ) 
.head 8 -  ! Set sW = ''
.head 8 -  ! Set s = s || '\\brdrs' 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderLWidth.GetValue(  ), 0 )
.head 8 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderLSpace.GetValue(  ), 0 )
.head 8 -  Set s = s || ' '
.head 7 +  If __nBorderVert.GetValue(  )
.head 8 -  ! Set s = s || '\\brdrl\\brdrbtw' || GetCodeBorder( __nBorderVert.GetValue(  ) ) 
.head 8 -  ! Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderVWidth.GetValue(  ), 0 )
.head 8 -  Set s = s || '\\brdrr\\brdrbtw' || GetCodeBorder( __nBorderVert.GetValue(  ) ) 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderVWidth.GetValue(  ), 0 )
.head 8 -  ! Set sW = ''
.head 8 -  ! Set s = s || '\\brdrs' 
.head 8 -  ! Set s = s || '\\brsp' || SalNumberToStrX( __nBorderLSpace.GetValue(  ), 0 )
.head 8 -  Set s = s || ' '
.head 7 +  If __nBorderBottom.GetValue(  )
.head 8 -  Set s = s || '\\brdrb' || sW || GetCodeBorder( __nBorderBottom.GetValue(  ) ) 
.head 8 -  ! Set sW = ''
.head 8 -  ! Set s = s || '\\brdrs' 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderBWidth.GetValue(  ), 0 )
.head 8 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderBSpace.GetValue(  ), 0 )
.head 8 -  Set s = s || ' '
.head 7 +  If __nBorderRight.GetValue(  )
.head 8 -  Set s = s || '\\brdrr' || sW || GetCodeBorder( __nBorderRight.GetValue(  ) ) 
.head 8 -  ! Set sW = ''
.head 8 -  ! Set s = s || '\\brdrs' 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( __nBorderRWidth.GetValue(  ), 0 )
.head 8 -  Set s = s || '\\brsp' || SalNumberToStrX( __nBorderRSpace.GetValue(  ), 0 )
.head 8 -  Set s = s || ' '
.head 7 -  ! Set s = s || '\\brdrbtw'
.head 7 -  ! If __nShading.Modified(  )
.head 7 -  Set s = s || '\\shading' || SalNumberToStrX( __nShading.GetValue(  ) *100, 0 )
.head 7 -  ! If __nShadingType.Modified(  )
.head 7 +  Select Case __nShadingType.GetValue(  )
.head 8 +  Case cParShadingHoriz
.head 9 -  Set s = s || '\\bghoriz'
.head 9 -  Break
.head 8 +  Case cParShadingVert
.head 9 -  Set s = s || '\\bgvert'
.head 9 -  Break
.head 8 +  Case cParShadingFDiag
.head 9 -  Set s = s || '\\bgfdiag'
.head 9 -  Break
.head 8 +  Case cParShadingBDiag
.head 9 -  Set s = s || '\\bgbdiag'
.head 9 -  Break
.head 8 +  Case cParShadingCross
.head 9 -  Set s = s || '\\bgcross'
.head 9 -  Break
.head 8 +  Case cParShadingDCross
.head 9 -  Set s = s || '\\bgdcross'
.head 9 -  Break
.head 8 +  Case cParShadingDKHoriz
.head 9 -  Set s = s || '\\bgdkhoriz'
.head 9 -  Break
.head 8 +  Case cParShadingDKVert
.head 9 -  Set s = s || '\\bgdkvert'
.head 9 -  Break
.head 8 +  Case cParShadingDKFDiag
.head 9 -  Set s = s || '\\bgdkfdiag'
.head 9 -  Break
.head 8 +  Case cParShadingDKBDiag
.head 9 -  Set s = s || '\\bgdkbdiag'
.head 9 -  Break
.head 8 +  Case cParShadingDKCross
.head 9 -  Set s = s || '\\bgdkcross'
.head 9 -  Break
.head 8 +  Case cParShadingDKDCross
.head 9 -  Set s = s || '\\bgdkdcross'
.head 9 -  Break
.head 7 -  ! If __nFirstLine.GetValue(  )
.head 7 -  Set s = s || '\\fi' || SalNumberToStrX( __nFirstLine.GetValue(  ) , 0 )
.head 7 -  ! If __nLeftIndent.GetValue(  )
.head 7 -  Set s = s || '\\li' || SalNumberToStrX( __nLeftIndent.GetValue(  ) , 0 )
.head 7 -  ! If __nRightIndent.GetValue(  )
.head 7 -  Set s = s || '\\ri' || SalNumberToStrX( __nRightIndent.GetValue(  ) , 0 )
.head 7 -  ! If __nSpaceBefore.GetValue(  )
.head 7 -  Set s = s || '\\sb' || SalNumberToStrX( __nSpaceBefore.GetValue(  ) * 20 , 0 )
.head 7 -  ! If __nSpaceAfter.GetValue(  )
.head 7 -  Set s = s || '\\sa' || SalNumberToStrX( __nSpaceAfter.GetValue(  ) * 20 , 0 )
.head 7 -  Set s = s || Tabs.GetStrFmtAll(  )
.head 7 +  ! If TRtfChar.IsModified( )
.head 8 -  Call TRtfChar.SetModified( FALSE )
.head 7 -  Set s = s || TRtfChar.GetStrFmtAll(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 -  Set s = VisStrSubstitute( s, ' ', '' )
.head 7 -  Return s
.head 5 +  Function: IsModified
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Boolean: b
.head 6 +  Actions
.head 7 -  Set b= __bModif
.head 7 -  Set b = b or __nAlignement.Modified(  )
.head 7 -  Set b = b or __bParSolidaire.Modified(  )
.head 7 -  Set b = b or __bLigneSolidaire.Modified(  )
.head 7 -  Set b = b or __bBorderOutside.Modified(  )
.head 7 -  Set b = b or __nBorderHoriz.Modified(  )
.head 7 -  Set b = b or __nBorderVert.Modified(  )
.head 7 -  Set b = b or __nBorderTop.Modified(  )
.head 7 -  Set b = b or __nBorderBottom.Modified(  )
.head 7 -  Set b = b or __nBorderLeft.Modified(  )
.head 7 -  Set b = b or __nBorderRight.Modified(  )
.head 7 -  Set b = b or __nBorderHWidth.Modified(  )
.head 7 -  Set b = b or __nBorderVWidth.Modified(  )
.head 7 -  Set b = b or __nBorderTWidth.Modified(  )
.head 7 -  Set b = b or __nBorderLWidth.Modified(  )
.head 7 -  Set b = b or __nBorderBWidth.Modified(  )
.head 7 -  Set b = b or __nBorderRWidth.Modified(  )
.head 7 -  Set b = b or __nBorderTSpace.Modified(  )
.head 7 -  Set b = b or __nBorderBSpace.Modified(  )
.head 7 -  Set b = b or __nBorderLSpace.Modified(  )
.head 7 -  Set b = b or __nBorderRSpace.Modified(  )
.head 7 -  Set b = b or __nShading.Modified(  )
.head 7 -  Set b = b or __nShadingType.Modified(  )
.head 7 -  Set b = b or __nSpaceAfter.Modified(  )
.head 7 -  Set b = b or __nSpaceBefore.Modified(  )
.head 7 -  Set b = b or Tabs.Modified(  )
.head 7 -  Return b
.head 5 +  Function: GetCodeBorder
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 +  Select Case pnValue
.head 8 +  Case cParBorderSingleT
.head 9 -  Set s = '\\brdrs'
.head 9 -  Break
.head 8 +  Case cParBorderDoubleT
.head 9 -  Set s = '\\brdrth'
.head 9 -  Break
.head 8 +  Case cParBorderShadowed
.head 9 -  Set s = '\\brdrsh'
.head 9 -  Break
.head 8 +  Case cParBorderDouble
.head 9 -  Set s = '\\brdrdb'
.head 9 -  Break
.head 8 +  Case cParBorderDotted
.head 9 -  Set s = '\\brdrdot'
.head 9 -  Break
.head 8 +  Case cParBorderDashed
.head 9 -  Set s = '\\brdrdash'
.head 9 -  Break
.head 8 +  Case cParBorderHairline
.head 9 -  Set s = '\\brdrhair'
.head 9 -  Break
.head 8 +  Case cParBorderInset
.head 9 -  Set s = '\\brdrinset'
.head 9 -  Break
.head 8 +  Case cParBorderDot
.head 9 -  Set s = '\\brdrdashd'
.head 9 -  Break
.head 8 +  Case cParBorderDotDot
.head 9 -  Set s = '\\brdrdashdd'
.head 9 -  Break
.head 8 +  Case cParBorderOutset
.head 9 -  Set s = '\\brdroutset'
.head 9 -  Break
.head 8 +  Case cParBorderTriple
.head 9 -  Set s = '\\brdrtriple'
.head 9 -  Break
.head 8 +  Case cParBorderWavy
.head 9 -  Set s = '\\brdrwavy'
.head 9 -  Break
.head 8 +  Case cParBorderDWavy
.head 9 -  Set s = '\\brdrwavydb'
.head 9 -  Break
.head 8 +  Case cParBorderEmbossed
.head 9 -  Set s = '\\brdremboss'
.head 9 -  Break
.head 8 +  Case cParBorderEngraved
.head 9 -  Set s = '\\brdrengrave'
.head 9 -  Break
.head 8 +  Case cParBorderFrame
.head 9 -  Set s = '\\brdrframe'
.head 9 -  Break
.head 8 +  ! Default
.head 9 -  Set s = '\\brdrs'
.head 7 -  Return s
.head 5 +  Function: SetModified
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nAlignement.SetModified( pbValue )
.head 7 -  Call __bParSolidaire.SetModified( pbValue )
.head 7 -  Call __bLigneSolidaire.SetModified( pbValue )
.head 7 -  Call __nBorderHoriz.SetModified( pbValue )
.head 7 -  Call __nBorderVert.SetModified( pbValue )
.head 7 -  Call __nBorderTop.SetModified( pbValue )
.head 7 -  Call __nBorderBottom.SetModified( pbValue )
.head 7 -  Call __nBorderLeft.SetModified( pbValue )
.head 7 -  Call __nBorderRight.SetModified( pbValue )
.head 7 -  Call __nShading.SetModified( pbValue )
.head 7 -  Call __nShadingType.SetModified( pbValue )
.head 7 -  Call __nBorderHWidth.SetModified( pbValue )
.head 7 -  Call __nBorderVWidth.SetModified( pbValue )
.head 7 -  Call __nBorderTWidth.SetModified( pbValue )
.head 7 -  Call __nBorderBWidth.SetModified( pbValue )
.head 7 -  Call __nBorderLWidth.SetModified( pbValue )
.head 7 -  Call __nBorderRWidth.SetModified( pbValue )
.head 7 -  Call __nBorderTSpace.SetModified( pbValue )
.head 7 -  Call __nBorderBSpace.SetModified( pbValue )
.head 7 -  Call __nBorderLSpace.SetModified( pbValue )
.head 7 -  Call __nBorderRSpace.SetModified( pbValue )
.head 7 -  Call __nFirstLine.SetModified( pbValue )
.head 7 -  Call __nLeftIndent.SetModified( pbValue )
.head 7 -  Call __nRightIndent.SetModified( pbValue )
.head 7 -  Call __nSpaceAfter.SetModified( pbValue )
.head 7 -  Call __nSpaceBefore.SetModified( pbValue )
.head 7 -  ! Call TRtfChar.SetModified( pbValue )
.head 7 -  Set __bModif = pbValue
.head 5 +  Function: Shading
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nShading.SetValue( pnValue )
.head 5 +  Function: ShadingType
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __nShadingType.SetValue( pnValue )
.head 5 -  ! !
.head 5 -  !
.head 3 -  !
.head 3 +  Functional Class: TRtfWrite
.head 4 -  Description:
.head 4 +  Derived From
.head 5 -  Class: TRtfParagraphe
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  Number: __nTypeExport
.head 4 +  Functions
.head 5 +  Function: SaveStringRTF
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call ..OutData().Write( psValue, SalStrLength( psValue ) )
.head 5 -  !
.head 5 -  !
.head 5 +  Function: LBFIntbl
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return ''
.head 5 -  !
.head 5 -  !
.head 5 +  Function: StrToRtf
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s2
.head 7 -  String: s
.head 7 -  String: s3
.head 7 -  Number: n
.head 7 -  String: s1
.head 7 -  Number: n1
.head 7 -  Boolean: bOk
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 +  While SalStrFirstC( psValue, n )
.head 8 +  If ( n >= 32 ) and ( n <= 126 )
.head 9 -  Set s1 = SalNumberToChar( n )
.head 9 -  Set bOk = TRUE
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cTab
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cPar
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = ..LBFIntbl( ) || s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cEspaceInsep
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cParSolidaireS
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cTiretConditionnel
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk
.head 10 +  If ( s1 = '{' ) or ( s1 = '}' ) or ( s1 = '\\' ) 
.head 11 -  Set s1 = '\\' || s1
.head 9 -  Set s = s || s1
.head 8 +  Else
.head 9 -  Set s1 = ''
.head 9 +  If n >= 32
.head 10 +  While n
.head 11 -  Set n1 = SalNumberMod( n, 16 )
.head 11 +  Select Case n1
.head 12 +  Case 0
.head 13 -  Set s1 = '0' || s1
.head 13 -  Break
.head 12 +  Case 1
.head 13 -  Set s1 = '1' || s1
.head 13 -  Break
.head 12 +  Case 2
.head 13 -  Set s1 = '2' || s1
.head 13 -  Break
.head 12 +  Case 3
.head 13 -  Set s1 = '3' || s1
.head 13 -  Break
.head 12 +  Case 4
.head 13 -  Set s1 = '4' || s1
.head 13 -  Break
.head 12 +  Case 5
.head 13 -  Set s1 = '5' || s1
.head 13 -  Break
.head 12 +  Case 6
.head 13 -  Set s1 = '6' || s1
.head 13 -  Break
.head 12 +  Case 7
.head 13 -  Set s1 = '7' || s1
.head 13 -  Break
.head 12 +  Case 8
.head 13 -  Set s1 = '8' || s1
.head 13 -  Break
.head 12 +  Case 9
.head 13 -  Set s1 = '9' || s1
.head 13 -  Break
.head 12 +  Case 10
.head 13 -  Set s1 = 'a' || s1
.head 13 -  Break
.head 12 +  Case 11
.head 13 -  Set s1 = 'b' || s1
.head 13 -  Break
.head 12 +  Case 12
.head 13 -  Set s1 = 'c' || s1
.head 13 -  Break
.head 12 +  Case 13
.head 13 -  Set s1 = 'd' || s1
.head 13 -  Break
.head 12 +  Case 14
.head 13 -  Set s1 = 'e' || s1
.head 13 -  Break
.head 12 +  Case 15
.head 13 -  Set s1 = 'f' || s1
.head 13 -  Break
.head 11 -  Set n = n - n1
.head 11 -  Set n = n / 16
.head 9 +  If s1 != ''
.head 10 +  While SalNumberMod( SalStrLength( s1 ), 2 )
.head 11 -  Set s1 = '0' || s1
.head 10 -  Set s = s || "\\'" || s1
.head 7 -  Return s
.head 5 -  !
.head 5 -  !
.head 5 +  Function: NewPar
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s   = '\\par
'
.head 7 -  ! Set s = s || ' '
.head 7 -  Call ..SaveStringRTF( s )
.head 5 +  Function: NewLine
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s   = '\\line
'
.head 7 -  ! Set s = s || ' '
.head 7 -  Call ..SaveStringRTF( s )
.head 5 +  Function: ParDefault
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s   = '\\pard'
.head 7 -  Call TRtfParagraphe.Default(  )
.head 7 -  Set s   = s || '\\plain'
.head 7 -  Call TRtfChar.Default(  )
.head 7 -  Set s = s || ' '
.head 7 -  Call ..SaveStringRTF( s )
.head 5 +  Function: Write
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = StrToRtf( psValue )
.head 7 -  Call ..SaveStringRTF( s )
.head 5 +  Function: Writeln
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Call Write( psValue )
.head 7 -  Call NewPar(  )
.head 5 +  Function: Footnote
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psFootnote
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 -  Set s = s || '{\\super\\chftn {\\footnote {\\super\\chftn}\\fs18 { ' || StrToRtf( psFootnote ) || '}}}'
.head 7 -  Set s = s || ' '
.head 7 -  Call ..SaveStringRTF( s )
.head 5 +  Function: Endnote
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psEndnote
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 -  Set s = s || '{\\super\\chftn {\\footnote\\ftnalt {\\super\\chftn}\\fs18 { ' || StrToRtf( psEndnote ) || '}}}'
.head 7 -  Set s = s || ' '
.head 7 -  Call SaveStringRTF( s )
.head 5 -  !
.head 5 -  !
.head 5 +  Function: OutData
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  FunctionalVar:
.head 8 -  Class: TStream
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call SalMessageBox( "La fonction OUTDATA n'est pas redéfinie", "Erreur", MB_Ok )
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 +  Function: SetType
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __nTypeExport = nValue
.head 5 +  Function: GetType
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __nTypeExport
.head 3 -  !
.head 3 +  Functional Class: TRtfSection
.head 4 -  Description:
.head 4 +  Derived From
.head 5 -  Class: TRtfWrite
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  Number: __nPaperHeight
.head 5 -  Number: __nPaperWidth
.head 5 -  Boolean: __bLandscape
.head 5 -  Number: __nMargeLeft
.head 5 -  Number: __nMargeRight
.head 5 -  Number: __nMargeTop
.head 5 -  Number: __nMargeBottom
.head 5 -  Boolean: __bModif
.head 5 -  Boolean: __bOpenOffice
.head 5 -  Boolean: __bInit
.head 4 +  Functions
.head 5 +  Function: Init
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  ! Call nPaper
.head 7 -  Call TRtfParagraphe.Init(  )
.head 5 +  Function: ObjectDestructor
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 -  Actions
.head 5 +  Function: SetPaperHeight
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __nPaperHeight = CM2TWIPS( pnValue )
.head 7 -  Call SetModif( TRUE )
.head 7 -  Set wnRtfHeight = __nPaperHeight
.head 5 +  Function: SetPaperWidth
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __nPaperWidth = CM2TWIPS( pnValue )
.head 7 -  Call SetModif( TRUE )
.head 7 -  Set wnRtfWidth = __nPaperWidth
.head 5 +  Function: Landscape
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: n
.head 6 +  Actions
.head 7 +  If pbValue != __bLandscape
.head 8 -  Set n = __nPaperHeight
.head 8 -  Set __nPaperHeight = __nPaperWidth
.head 8 -  Set __nPaperWidth = n
.head 7 -  Set __bLandscape = pbValue
.head 7 -  Call SetModif( TRUE )
.head 7 -  Set wnRtfWidth = __nPaperWidth
.head 7 -  Set wnRtfHeight = __nPaperHeight
.head 5 +  Function: GetLandscape
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bLandscape
.head 5 +  Function: GetPaperHeight
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return TWIPS2CM( __nPaperHeight )
.head 5 +  Function: GetPaperWidth
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return TWIPS2CM( __nPaperWidth )
.head 5 +  Function: SetMargeLeft
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __nMargeLeft = CM2TWIPS( pnValue )
.head 7 -  Call SetModif( TRUE )
.head 7 -  Set wnRtfMargeL = __nMargeLeft
.head 5 +  Function: GetMargeLeft
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return TWIPS2CM( __nMargeLeft )
.head 5 +  Function: SetMargeTop
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __nMargeTop = CM2TWIPS( pnValue )
.head 7 -  Call SetModif( TRUE )
.head 7 -  Set wnRtfMargeT = __nMargeTop
.head 5 +  Function: GetMargeTop
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return TWIPS2CM( __nMargeTop )
.head 5 +  Function: SetMargeRight
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __nMargeRight = CM2TWIPS( pnValue )
.head 7 -  Call SetModif( TRUE )
.head 7 -  Set wnRtfMargeR = __nMargeRight
.head 5 +  Function: GetMargeRight
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return TWIPS2CM( __nMargeRight )
.head 5 +  Function: SetMargeBottom
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __nMargeBottom = CM2TWIPS( pnValue )
.head 7 -  Call SetModif( TRUE )
.head 7 -  Set wnRtfMargeB = __nMargeBottom
.head 5 +  Function: GetMargeBottom
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return TWIPS2CM( __nMargeBottom )
.head 5 +  Function: SetMarges
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call SetMargeTop( pnValue )
.head 7 -  Call SetMargeBottom( pnValue )
.head 7 -  Call SetMargeLeft( pnValue )
.head 7 -  Call SetMargeRight( pnValue )
.head 5 +  Function: SectionModif
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __bModif
.head 5 +  Function: SetModif
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Boolean: pbValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __bModif = pbValue
.head 5 +  Function: GetStrFmt
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 +  If __bModif
.head 8 +  If not __bInit
.head 9 -  Set __bInit = TRUE
.head 9 +  If GetType( ) = cDocumentOpenOffice
.head 10 -  Set s = s || "
{\\*\\pgdsctbl
{\\pgdsc0\\pgdscuse195"
.head 10 +  If GetLandscape(  )
.head 11 -  Set s = s || '\\lndscpsxn'
.head 10 -  Set s = s || '\\pghsxn' || SalNumberToStrX( __nPaperHeight, 0 )
.head 10 -  Set s = s || '\\pgwsxn' || SalNumberToStrX( __nPaperWidth, 0 )
.head 10 -  ! If __bOpenOffice
.head 10 -  Set s = s || '\\marglsxn' || SalNumberToStrX( __nMargeLeft, 0 )
.head 10 -  Set s = s || '\\margrsxn' || SalNumberToStrX( __nMargeRight, 0 )
.head 10 -  Set s = s || '\\margtsxn' || SalNumberToStrX( __nMargeTop, 0 )
.head 10 -  Set s = s || '\\margbsxn' || SalNumberToStrX( __nMargeBottom, 0 )
.head 10 -  Set s = s || "\\pgdscnxt0 Standard;}}

"
.head 10 +  If GetLandscape(  )
.head 11 -  Set s = s || '\\landscape'
.head 10 +  ! If __bLandscape
.head 11 -  Set s = s || '\\lndscpsxn'
.head 10 -  Set s = s || '\\paperh' || SalNumberToStrX( __nPaperHeight, 0 )
.head 10 -  Set s = s || '\\paperw' || SalNumberToStrX( __nPaperWidth, 0 )
.head 10 -  ! If __bOpenOffice
.head 10 -  Set s = s || '\\margl' || SalNumberToStrX( __nMargeLeft, 0 )
.head 10 -  Set s = s || '\\margr' || SalNumberToStrX( __nMargeRight, 0 )
.head 10 -  Set s = s || '\\margt' || SalNumberToStrX( __nMargeTop, 0 )
.head 10 -  Set s = s || '\\margb' || SalNumberToStrX( __nMargeBottom, 0 )
.head 10 +  If GetLandscape(  )
.head 11 -  Set s = s || '\\sectd\\sbknone'
.head 8 +  If GetLandscape(  )
.head 9 -  Set s = s || '\\lndscpsxn'
.head 8 +  ! If __bLandscape
.head 9 -  Set s = s || '\\lndscpsxn'
.head 8 -  Set s = s || '\\pghsxn' || SalNumberToStrX( __nPaperHeight, 0 )
.head 8 -  Set s = s || '\\pgwsxn' || SalNumberToStrX( __nPaperWidth, 0 )
.head 8 -  ! If __bOpenOffice
.head 8 -  Set s = s || '\\marglsxn' || SalNumberToStrX( __nMargeLeft, 0 )
.head 8 -  Set s = s || '\\margrsxn' || SalNumberToStrX( __nMargeRight, 0 )
.head 8 -  Set s = s || '\\margtsxn' || SalNumberToStrX( __nMargeTop, 0 )
.head 8 -  Set s = s || '\\margbsxn' || SalNumberToStrX( __nMargeBottom, 0 )
.head 8 +  ! If not __bOpenOffice
.head 9 +  If GetLandscape(  )
.head 10 -  Set s = s || '\\landscape'
.head 8 +  ! If __bOpenOffice
.head 9 -  Set s = s || '\\pgwsxn' || SalNumberToStrX( __nPaperWidth, 0 )
.head 9 -  Set s = s || '\\pghsxn' || SalNumberToStrX( __nPaperHeight, 0 )
.head 9 +  If GetLandscape(  )
.head 10 -  Set s = s || '\\lndscpsxn'
.head 9 -  Set s = s || '\\marglsxn' || SalNumberToStrX( __nMargeLeft, 0 )
.head 9 -  Set s = s || '\\margrsxn' || SalNumberToStrX( __nMargeRight, 0 )
.head 9 -  Set s = s || '\\margtsxn' || SalNumberToStrX( __nMargeTop, 0 )
.head 9 -  Set s = s || '\\margbsxn' || SalNumberToStrX( __nMargeBottom, 0 )
.head 8 +  ! Else
.head 9 +  If GetLandscape(  )
.head 10 -  Set s = s || '\\landscape'
.head 9 -  Set s = s || '\\paperh' || SalNumberToStrX( __nPaperHeight, 0 )
.head 9 -  Set s = s || '\\paperw' || SalNumberToStrX( __nPaperWidth, 0 )
.head 9 -  Set s = s || '\\margel' || SalNumberToStrX( __nMargeLeft, 0 )
.head 9 -  Set s = s || '\\marger' || SalNumberToStrX( __nMargeRight, 0 )
.head 9 -  Set s = s || '\\marget' || SalNumberToStrX( __nMargeTop, 0 )
.head 9 -  Set s = s || '\\margeb' || SalNumberToStrX( __nMargeBottom, 0 )
.head 8 -  Call SetModif( FALSE )
.head 7 +  ! If TRtfParagraph.IsModified( ) or TRtfChar.IsModified(  )
.head 8 -  Call TRtfParagraph.SetModified( FALSE )
.head 7 -  Set s = s || TRtfParagraphe.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 -  ! Set s = VisStrSubstitute( s, ' ', '' )
.head 7 -  Return s
.head 5 +  Function: SetOffice
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __bOpenOffice = FALSE
.head 5 +  Function: SetOpenOffice
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __bOpenOffice = TRUE
.head 5 +  Function: getlargeur
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __nPaperWidth - __nMargeLeft - __nMargeRight
.head 5 +  Function: GetDispoWidth
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return GetPaperWidth(  ) - GetMargeLeft(  ) - GetMargeRight(  )
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 3 -  !
.head 3 +  Functional Class: TRtfDocument
.head 4 -  Description:
.head 4 +  Derived From
.head 5 -  Class: TRtfSection
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  ! String: __sFileName
.head 5 -  FunctionalVar: __Header
.head 6 -  Class: TMemoryStream
.head 5 -  FunctionalVar: __Doc
.head 6 -  Class: TTextStream
.head 5 -  Number: __ngPaperHeight
.head 5 -  Number: __ngPaperWidth
.head 5 -  ! Boolean: bLandscape
.head 5 -  ! Number: nMargeLeft
.head 5 -  ! Number: nMargeRight
.head 5 -  ! Number: nMargeTop
.head 5 -  ! Number: nMargeBottom
.head 5 -  Boolean: __bWrite
.head 5 -  Number: __nNbrColor
.head 5 -  Number: __nColor[*]
.head 5 -  Number: __nNbrFonts
.head 5 -  String: __sFonts[*]
.head 5 -  Number: __nNbrBlock
.head 5 -  String: Title
.head 5 -  String: Author
.head 5 -  String: Subject
.head 5 -  String: Operator
.head 5 -  String: Category
.head 5 -  String: Company
.head 5 -  Date/Time: CreationTime
.head 5 -  Date/Time: RevisionTime
.head 5 -  String: Comment
.head 5 -  String: Keywords
.head 5 -  Number: Version
.head 5 -  String: __sFileName
.head 5 -  Window Handle: __wh
.head 5 -  !
.head 5 -  FunctionalVar: __oStack
.head 6 -  Class: __TRtfStackPara
.head 5 -  Number: __DefaultType
.head 5 -  !
.head 5 -  !
.head 5 -  String: __TmpFileName
.head 4 +  Functions
.head 5 +  Function: SetFileName
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psFileName
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __sFileName = psFileName
.head 5 +  Function: GetFileName
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __sFileName
.head 5 +  Function: SetDefault
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set __DefaultType = pnValue
.head 5 +  Function: SelectOpen
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  Window Handle: pwhParent
.head 7 -  String: psFilename
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: wsFileName
.head 7 -  Number: wnFilter
.head 7 -  String: wsFilter[*]
.head 7 -  String: wsSavedPath
.head 7 -  String: wsPath
.head 7 -  String: wsFullFileName
.head 7 -  Number: wnRet
.head 7 -  Number: anType[*]
.head 7 -  Number: __i
.head 6 +  Actions
.head 7 -  Set wsFileName = psFilename
.head 7 -  Set __wh = pwhParent
.head 7 -  Set wnFilter = 0
.head 7 -  Set __i = SalGetProfileInt( 'Traitement Texte', 'Type', -1, 'c:\\stesud.tmp\\stesud.ini' )
.head 7 +  If __i > 0
.head 8 -  Call SetDefault( __i )
.head 7 +  If __DefaultType = cDocumentOpenOffice
.head 8 -  Set wsFilter[wnFilter] = 'OpenOffice'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2 ] = cDocumentOpenOffice
.head 8 -  Set wsFilter[wnFilter] = '*.sxw'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'Word XP'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentRTF
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'Word 2000'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentWord2000
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'Word 97'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentWord97
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 7 +  Else If __DefaultType = cDocumentWord97
.head 8 -  Set wsFilter[wnFilter] = 'Word 97'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentWord97
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  ! Set wsFilter[wnFilter] = 'Document'
.head 8 -  Set wsFilter[wnFilter] = 'Word XP'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentRTF
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'OpenOffice'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2 ] = cDocumentOpenOffice
.head 8 -  Set wsFilter[wnFilter] = '*.sxw'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'Word 2000'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentWord2000
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 7 +  Else If __DefaultType = cDocumentWord2000
.head 8 -  Set wsFilter[wnFilter] = 'Word 2000'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentWord2000
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  ! Set wsFilter[wnFilter] = 'Document'
.head 8 -  Set wsFilter[wnFilter] = 'Word XP'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentRTF
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'OpenOffice'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2 ] = cDocumentOpenOffice
.head 8 -  Set wsFilter[wnFilter] = '*.sxw'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'Word 97'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentWord97
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 7 +  Else
.head 8 -  ! Set wsFilter[wnFilter] = 'Document'
.head 8 -  Set wsFilter[wnFilter] = 'Word XP'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentRTF
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'OpenOffice'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2 ] = cDocumentOpenOffice
.head 8 -  Set wsFilter[wnFilter] = '*.sxw'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'Word 2000'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentWord2000
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set wsFilter[wnFilter] = 'Word 97'
.head 8 -  Set wnFilter = wnFilter + 1
.head 8 -  Set anType[ ( wnFilter + 1 ) / 2] = cDocumentWord97
.head 8 -  Set wsFilter[wnFilter] = '*.rtf;*.doc'
.head 8 -  Set wnFilter = wnFilter + 1
.head 7 -  Set wsSavedPath = VisDosGetCurDir( SalFileGetDrive(  ) )
.head 7 -  Set wsPath = GetUserDirDef( cPathStesud )
.head 7 -  Set wsFullFileName = wsPath || '\\' || wsFileName
.head 7 -  Set wsFullFileName = GetWindowDir( cDirPersonal )  || wsFileName
.head 7 -  Set wsFileName = wsFullFileName
.head 7 -  Call SalFileSetDrive( SalStrLeftX( wsPath, 1 ) )
.head 7 -  Call SalFileSetCurrentDirectory( wsPath )
.head 7 +  If SalDlgSaveFile( pwhParent, 'Enregistrer sous...', wsFilter, wnFilter, wnRet, wsFileName, wsFullFileName )
.head 8 -  !
.head 8 -  Call SetType( anType[ wnRet ])
.head 8 -  Call SetFileName( wsFullFileName )
.head 8 -  Call SalSetProfileString( 'Traitement Texte', 'Type', SalNumberToStrX( GetType(  ), 0 ), 'c:\\stesud.tmp\\stesud.ini' )
.head 8 -  Return Open( wsFullFileName )
.head 7 -  Return FALSE
.head 5 -  !
.head 5 +  Function: Init
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call SetOffice(  )
.head 7 -  Call FormatPapier( cPaperA4 )
.head 7 -  Set __nPaperHeight = CM2TWIPS( 29.7 )
.head 7 -  Set __nPaperWidth = CM2TWIPS( 21 )
.head 7 -  ! Set TRtfSection.nPaperHeight = 16838
.head 7 -  ! Set TRtfSection.nPaperWidth = 11905
.head 7 -  Set __bLandscape = FALSE
.head 7 -  Call TRtfSection.SetPaperHeight( 29.7 )
.head 7 -  Call TRtfSection.SetPaperWidth( 21 )
.head 7 -  ! Call TRtfSection.Landscape( bLandscape )
.head 7 -  Set __nMargeLeft = 1440
.head 7 -  Set __nMargeRight = 1440
.head 7 -  Set __nMargeTop = 1440
.head 7 -  Set __nMargeBottom = 1440
.head 7 -  ! Set TRtfSection.nMargeLeft = 1440
.head 7 -  ! Set TRtfSection.nMargeRight = 1440
.head 7 -  ! Set TRtfSection.nMargeTop = 1440
.head 7 -  ! Set TRtfSection.nMargeBottom = 1440
.head 7 -  Call TRtfSection.Init(  )
.head 7 -  Set __nNbrBlock = 0
.head 7 -  Set __nNbrFonts = 3
.head 7 -  Set __sFonts[ 0 ] = 'Times New Roman'
.head 7 -  Set __sFonts[ 1 ] = 'Arial'
.head 7 -  Set __sFonts[ 2 ] = 'Wingdings'
.head 7 -  Set __nNbrColor = 1
.head 7 -  Set __nColor[ 0 ] = COLOR_Black
.head 7 -  Set __nColor[ __nNbrColor ] = COLOR_Red
.head 7 -  Set __nNbrColor = __nNbrColor + 1
.head 7 -  Set __nColor[ __nNbrColor ] = COLOR_Green
.head 7 -  Set __nNbrColor = __nNbrColor + 1
.head 7 -  Set __nColor[ __nNbrColor ] = COLOR_Blue
.head 7 -  Set __nNbrColor = __nNbrColor + 1
.head 7 -  Call SetDefault( cDocumentRTF )
.head 5 +  Function: FormatPapier
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  Select Case pnValue
.head 8 +  Case cPaperA3
.head 9 -  Set __ngPaperHeight = CM2TWIPS( 42 )
.head 9 -  Set __ngPaperWidth = CM2TWIPS( 29.7 )
.head 9 -  Break
.head 8 +  Default
.head 9 -  Set __ngPaperHeight = CM2TWIPS( 29.7 )
.head 9 -  Set __ngPaperWidth = CM2TWIPS( 21 )
.head 7 -  Set __nPaperHeight = __ngPaperHeight
.head 7 -  Set __nPaperWidth = __ngPaperWidth
.head 7 -  !
.head 7 -  Set wnRtfHeight = __nPaperHeight
.head 7 -  Set wnRtfWidth = __nPaperWidth
.head 5 +  Function: ObjectDestructor
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 -  Actions
.head 5 +  Function: AddFont
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  String: psFont
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Boolean: bOk 
.head 6 +  Actions
.head 7 -  Set i = __nNbrFonts
.head 7 -  Set bOk = FALSE
.head 7 +  While not bOk and ( i > 0 )
.head 8 -  Set i = i - 1
.head 8 -  Set bOk = __sFonts[ i ] = psFont
.head 7 +  If not bOk
.head 8 -  Set __nNbrFonts = __nNbrFonts + 1
.head 8 -  Set i = __nNbrFonts - 1
.head 8 -  Set __sFonts[ i ] = psFont
.head 7 -  Return i
.head 5 +  Function: AddColor
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: p__nColor
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Boolean: bOk 
.head 6 +  Actions
.head 7 -  Set i = __nNbrColor
.head 7 -  Set bOk = FALSE
.head 7 +  While not bOk and ( i > 0 )
.head 8 -  Set i = i - 1
.head 8 -  Set bOk = __nColor[ i ] = p__nColor
.head 7 +  If not bOk
.head 8 -  Set __nNbrColor = __nNbrColor + 1
.head 8 -  Set i = __nNbrColor - 1
.head 8 -  Set __nColor[ i ] = p__nColor
.head 7 -  Return i
.head 5 +  Function: Open
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  String: psFileName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set __sFileName = psFileName
.head 7 +  ! If __Doc.Open( psFileName || '.tmp', OF_Create | OF_ReadWrite | OF_Text )
.head 8 -  Call __Header.Open(  )
.head 8 -  Call Init(  )
.head 8 -  Call TRtfSection.Init( )
.head 8 -  Return TRUE
.head 7 -  Set __TmpFileName = VisFileCreateTemp( 'DOC' )
.head 7 +  If __Doc.Open( __TmpFileName , OF_Create | OF_ReadWrite | OF_Text )
.head 8 -  Call __Header.Open(  )
.head 8 -  Call Init(  )
.head 8 -  Call TRtfSection.Init( )
.head 8 -  Return TRUE
.head 7 +  Else
.head 8 -  Return FALSE
.head 5 +  Function: Close
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  FunctionalVar: stream
.head 8 -  Class: TTextStream
.head 7 -  String: s
.head 7 -  Number: i
.head 7 -  Number: r
.head 7 -  Number: g
.head 7 -  Number: b
.head 6 +  Actions
.head 7 +  If stream.Open( __sFileName, OF_Create | OF_Text | OF_ReadWrite )
.head 8 -  Set s = '{\\rtf1\\ansi\\def0 
'
.head 8 -  Call stream.Write( s, SalStrLength( s ) )
.head 8 -  Set s = '{\\fonttbl'
.head 8 -  Set i = 0
.head 8 +  While i < __nNbrFonts
.head 9 -  Set s = s || '{\\f' || SalNumberToStrX( i, 0 ) || '\\fnil\\fcharset ' || __sFonts[i] || ';}'
.head 9 -  Set i  = i + 1
.head 9 +  If SalNumberMod( i, 3 ) = 0
.head 10 -  Set s = s || '
'
.head 8 -  Set s = s || '}
'
.head 8 -  Call stream.Write( s, SalStrLength( s ) )
.head 8 -  Set s = '{\\colortbl;'
.head 8 -  Set i = 0
.head 8 +  While i < __nNbrColor
.head 9 -  Call SalColorToRGB( __nColor[i], r, g, b )
.head 9 -  Set s = s || '\\red' || SalNumberToStrX( r, 0 ) || '\\green' || SalNumberToStrX( g, 0 ) || '\\blue' || SalNumberToStrX( b, 0 ) ||  ';'
.head 9 -  Set i  = i + 1
.head 9 +  If SalNumberMod( i, 3 ) = 0
.head 10 -  Set s = s || '
'
.head 8 -  Set s = s || '}
'
.head 8 -  Call stream.Write( s, SalStrLength( s ) )
.head 8 -  Set s = '{\\stylesheet
{\\widctlpar\\adjustright \\fs20\\lang1036\\cgrid\\qj \\snext0 Normal;'
.head 8 -  Set s = s || '}
}'
.head 8 -  Call stream.Write( s, SalStrLength( s ) )
.head 8 -  Set s = '{\\info
'
.head 8 +  If Title != ''
.head 9 -  Set s = s || '{\\title ' || StrToRtf( Title ) || '}
'
.head 8 +  If Subject != ''
.head 9 -  Set s = s || '{\\subject ' || StrToRtf( Subject ) || '}
'
.head 8 +  If Author != ''
.head 9 -  Set s = s || '{\\author ' || StrToRtf( Author ) || '}
'
.head 8 +  If Company != ''
.head 9 -  Set s = s || '{\\company ' || StrToRtf( Company ) || '}
'
.head 8 +  If Operator != ''
.head 9 -  Set s = s || '{\\operator ' || StrToRtf( Operator ) || '}
'
.head 8 +  If Category != ''
.head 9 -  Set s = s || '{\\category ' || StrToRtf( Category ) || '}
'
.head 8 +  If Keywords != ''
.head 9 -  Set s = s || '{\\keywords ' || StrToRtf( Keywords ) || '}
'
.head 8 +  If Comment != ''
.head 9 -  Set s = s || '{\\comment ' || StrToRtf( Comment ) || '}
'
.head 8 +  If Version != NUMBER_Null
.head 9 -  Set s = s || '{\\version'
.head 9 -  Set s = s || SalNumberToStrX( Version, 0 )
.head 9 -  Set s = s ||  '}
'
.head 8 +  If CreationTime != DATETIME_Null
.head 9 -  Set s = s || '{\\creatim '
.head 9 -  Set s = s || '\\yr' || SalNumberToStrX( SalDateYear( CreationTime ), 0 )
.head 9 -  Set s = s || '\\mo' || SalNumberToStrX( SalDateMonth( CreationTime ), 0 )
.head 9 -  Set s = s || '\\dy' || SalNumberToStrX( SalDateDay( CreationTime ), 0 )
.head 9 -  Set s = s || '\\hr' || SalNumberToStrX( SalDateHour( CreationTime ), 0 )
.head 9 -  Set s = s || '\\min' || SalNumberToStrX( SalDateMinute( CreationTime ), 0 )
.head 9 -  Set s = s || '\\sec' || SalNumberToStrX( SalDateSecond( CreationTime ), 0 )
.head 9 -  Set s = s ||  '}
'
.head 8 +  If RevisionTime != DATETIME_Null
.head 9 -  Set s = s || '{\\revtim '
.head 9 -  Set s = s || '\\yr' || SalNumberToStrX( SalDateYear( RevisionTime ), 0 )
.head 9 -  Set s = s || '\\mo' || SalNumberToStrX( SalDateMonth( RevisionTime ), 0 )
.head 9 -  Set s = s || '\\dy' || SalNumberToStrX( SalDateDay( RevisionTime ), 0 )
.head 9 -  Set s = s || '\\hr' || SalNumberToStrX( SalDateHour( RevisionTime ), 0 )
.head 9 -  Set s = s || '\\min' || SalNumberToStrX( SalDateMinute( RevisionTime ), 0 )
.head 9 -  Set s = s || '\\sec' || SalNumberToStrX( SalDateSecond( RevisionTime ), 0 )
.head 9 -  Set s = s ||  '}
'
.head 8 -  Set s = s || '
}
'
.head 8 -  Call stream.Write( s, SalStrLength( s ) )
.head 8 -  ! Call stream.Copy( __Header )
.head 8 -  Set s = '
'
.head 8 -  ! Set s = s || '\\paperh' || SalNumberToStrX( __ngPaperHeight, 0 )
.head 8 -  ! Set s = s || '\\paperw' || SalNumberToStrX( __ngPaperWidth, 0 )
.head 8 -  ! Set s = s || '\\margel' || SalNumberToStrX( __nMargeLeft, 0 )
.head 8 -  ! Set s = s || '\\marger' || SalNumberToStrX( __nMargeRight, 0 )
.head 8 -  ! Set s = s || '\\marget' || SalNumberToStrX( __nMargeTop, 0 )
.head 8 -  ! Set s = s || '\\margeb' || SalNumberToStrX( __nMargeBottom, 0 )
.head 8 -  ! Set s = s || ' '
.head 8 -  ! Call stream.Write( s, SalStrLength( s ) )
.head 8 -  Set s = '\\ftbnj 
'
.head 8 -  Call stream.Write( s, SalStrLength( s ) )
.head 8 -  Call __Doc.Seek( 0, 0 )
.head 8 -  Call stream.Copy( __Doc )
.head 8 +  While __nNbrBlock > 0
.head 9 -  Call EndBlock(  )
.head 8 -  Set s = '
}'
.head 8 -  Call stream.Write( s, SalStrLength( s ) )
.head 8 -  Call stream.Close(  )
.head 8 -  Call __Header.Close(  )
.head 8 -  Call __Doc.Close(  )
.head 8 -  Call __Doc.Open( __TmpFileName, OF_Delete )
.head 5 +  Function: Tab
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 -  Set s = s || TRtfSection.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 +  If ( s != '' ) and ( s != '
' )
.head 8 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 9 -  Set s = s || ' '
.head 7 +  ! If SectionModif( ) or TRtfParagraph.IsModified(  )
.head 8 -  Set s = '
'
.head 8 -  Set s = s || TRtfSection.GetStrFmt(  )
.head 8 +  While SalStrRightX( s, 1 ) = ' '
.head 9 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 8 +  If s != ''
.head 9 -  Set s = s || ' '
.head 7 -  Set s  = s || '\\tab'
.head 7 +  If s != ''
.head 8 -  Set s = s || ' '
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: NewSection
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s   = '
'
.head 7 -  Set s = s || '\\sect\\sectd'
.head 7 -  Set n = pnValue & 0x00FF
.head 7 +  Select Case n
.head 8 +  Case cSectionNone
.head 9 -  Set s = s || '\\sbknone'
.head 9 -  Break
.head 8 +  Case cSectionCol
.head 9 -  Set s = s || '\\sbkcol'
.head 9 -  Break
.head 8 +  Case cSectionPage
.head 9 -  ! Set s = s || '\\sbkpage'
.head 9 -  Break
.head 8 +  Case cSectionEven
.head 9 -  Set s = s || '\\sbkeven'
.head 9 -  Break
.head 8 +  Case cSectionOdd
.head 9 -  Set s = s || '\\sbkodd'
.head 9 -  Break
.head 7 +  If pnValue & cSectionEndnote
.head 8 -  Set s = s || '\\endnhere'
.head 7 -  Call TRtfSection.SetModif( TRUE )
.head 7 +  ! If s != ''
.head 8 -  Set s = s || ' '
.head 7 -  ! Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  ! Set s = s || TRtfSection.GetStrFmt(  )
.head 7 +  If s != ''
.head 8 -  Set s = s || ' '
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: NewPage
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s   = '
\\par \\page\\par
'
.head 7 -  ! Set s = s || ' '
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: NbrColumns
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 +  If SectionModif( )
.head 8 -  Set s = '
'
.head 8 -  Set s = s || TRtfSection.GetStrFmt(  )
.head 7 -  Set s = s || '\\cols' || SalNumberToStrX( pnValue, 0 )
.head 7 -  Set s = s || ' '
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: SpaceBetweenCols
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = '\\colsx' || SalNumberToStrX( pnValue, 0 )
.head 7 -  Set s = s || ' '
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: SpaceToRightCols
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pNoCol
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = '\\colno' || SalNumberToStrX( pNoCol, 0 )
.head 7 -  Set s = s || '\\colsr' || SalNumberToStrX( pnValue, 0 )
.head 7 -  Set s = s || ' '
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: ColumnWidth
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pNoCol
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = '\\colno' || SalNumberToStrX( pNoCol, 0 )
.head 7 -  Set s = s || '\\colw' || SalNumberToStrX( pnValue, 0 )
.head 7 -  Set s = s || ' '
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: BeginBlock
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Call __oStack.Push( this )
.head 7 -  Set s = ''
.head 7 -  ! If SectionModif( ) or TRtfParagraph.IsModified(  )
.head 7 -  Set s = '
'
.head 7 -  Set s = s || TRtfSection.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 +  If ( s != '' ) and ( s != '
' )
.head 8 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 9 -  Set s = s || ' '
.head 7 -  Set s = s || '{'
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set __nNbrBlock = __nNbrBlock + 1
.head 7 -  Return TRUE
.head 5 +  Function: EndBlock
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 +  If __nNbrBlock > 0
.head 8 -  Set s = '}'
.head 8 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 8 -  Set __nNbrBlock = __nNbrBlock - 1
.head 8 -  Call __oStack.Pop( this )
.head 5 +  ! Function: StrToRtf_Old
.head 6 -  Description: 
.head 6 +  Returns 
.head 7 -  String: 
.head 6 +  Parameters 
.head 7 -  String: psValue
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  String: s
.head 7 -  Number: n
.head 7 -  String: s1
.head 7 -  Number: n1
.head 6 +  Actions 
.head 7 -  Set s = ''
.head 7 +  While SalStrFirstC( psValue, n )
.head 8 +  If ( n >= 32 ) and ( n <= 126 )
.head 9 -  Set s1 = SalNumberToChar( n )
.head 9 +  If ( s1 = '{' ) or ( s1 = '}' ) or ( s1 = '\\' ) 
.head 10 -  Set s1 = '\\' || s1
.head 9 -  Set s = s || s1
.head 8 +  Else 
.head 9 -  Set s1 = ''
.head 9 +  If n >= 32
.head 10 +  While n
.head 11 -  Set n1 = SalNumberMod( n, 16 )
.head 11 +  Select Case n1
.head 12 +  Case 0
.head 13 -  Set s1 = '0' || s1
.head 13 -  Break 
.head 12 +  Case 1
.head 13 -  Set s1 = '1' || s1
.head 13 -  Break 
.head 12 +  Case 2
.head 13 -  Set s1 = '2' || s1
.head 13 -  Break 
.head 12 +  Case 3
.head 13 -  Set s1 = '3' || s1
.head 13 -  Break 
.head 12 +  Case 4
.head 13 -  Set s1 = '4' || s1
.head 13 -  Break 
.head 12 +  Case 5
.head 13 -  Set s1 = '5' || s1
.head 13 -  Break 
.head 12 +  Case 6
.head 13 -  Set s1 = '6' || s1
.head 13 -  Break 
.head 12 +  Case 7
.head 13 -  Set s1 = '7' || s1
.head 13 -  Break 
.head 12 +  Case 8
.head 13 -  Set s1 = '8' || s1
.head 13 -  Break 
.head 12 +  Case 9
.head 13 -  Set s1 = '9' || s1
.head 13 -  Break 
.head 12 +  Case 10
.head 13 -  Set s1 = 'a' || s1
.head 13 -  Break 
.head 12 +  Case 11
.head 13 -  Set s1 = 'b' || s1
.head 13 -  Break 
.head 12 +  Case 12
.head 13 -  Set s1 = 'c' || s1
.head 13 -  Break 
.head 12 +  Case 13
.head 13 -  Set s1 = 'd' || s1
.head 13 -  Break 
.head 12 +  Case 14
.head 13 -  Set s1 = 'e' || s1
.head 13 -  Break 
.head 12 +  Case 15
.head 13 -  Set s1 = 'f' || s1
.head 13 -  Break 
.head 11 -  Set n = n - n1
.head 11 -  Set n = n / 16
.head 9 +  If s1 != ''
.head 10 +  While SalNumberMod( SalStrLength( s1 ), 2 )
.head 11 -  Set s1 = '0' || s1
.head 10 -  Set s = s || "\\'" || s1
.head 7 -  Return s
.head 5 +  ! Function: StrToRtf
.head 6 -  Description: 
.head 6 +  Returns 
.head 7 -  String: 
.head 6 +  Parameters 
.head 7 -  String: psValue
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  String: s2
.head 7 -  String: s
.head 7 -  String: s3
.head 7 -  Number: n
.head 7 -  String: s1
.head 7 -  Number: n1
.head 7 -  Boolean: bOk
.head 6 +  Actions 
.head 7 -  Set s = ''
.head 7 +  While SalStrFirstC( psValue, n )
.head 8 +  If ( n >= 32 ) and ( n <= 126 )
.head 9 -  Set s1 = SalNumberToChar( n )
.head 9 -  Set bOk = TRUE
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cTab
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cPar
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cEspaceInsep
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cParSolidaireS
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cTiretConditionnel
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk
.head 10 +  If ( s1 = '{' ) or ( s1 = '}' ) or ( s1 = '\\' ) 
.head 11 -  Set s1 = '\\' || s1
.head 9 -  Set s = s || s1
.head 8 +  Else 
.head 9 -  Set s1 = ''
.head 9 +  If n >= 32
.head 10 +  While n
.head 11 -  Set n1 = SalNumberMod( n, 16 )
.head 11 +  Select Case n1
.head 12 +  Case 0
.head 13 -  Set s1 = '0' || s1
.head 13 -  Break 
.head 12 +  Case 1
.head 13 -  Set s1 = '1' || s1
.head 13 -  Break 
.head 12 +  Case 2
.head 13 -  Set s1 = '2' || s1
.head 13 -  Break 
.head 12 +  Case 3
.head 13 -  Set s1 = '3' || s1
.head 13 -  Break 
.head 12 +  Case 4
.head 13 -  Set s1 = '4' || s1
.head 13 -  Break 
.head 12 +  Case 5
.head 13 -  Set s1 = '5' || s1
.head 13 -  Break 
.head 12 +  Case 6
.head 13 -  Set s1 = '6' || s1
.head 13 -  Break 
.head 12 +  Case 7
.head 13 -  Set s1 = '7' || s1
.head 13 -  Break 
.head 12 +  Case 8
.head 13 -  Set s1 = '8' || s1
.head 13 -  Break 
.head 12 +  Case 9
.head 13 -  Set s1 = '9' || s1
.head 13 -  Break 
.head 12 +  Case 10
.head 13 -  Set s1 = 'a' || s1
.head 13 -  Break 
.head 12 +  Case 11
.head 13 -  Set s1 = 'b' || s1
.head 13 -  Break 
.head 12 +  Case 12
.head 13 -  Set s1 = 'c' || s1
.head 13 -  Break 
.head 12 +  Case 13
.head 13 -  Set s1 = 'd' || s1
.head 13 -  Break 
.head 12 +  Case 14
.head 13 -  Set s1 = 'e' || s1
.head 13 -  Break 
.head 12 +  Case 15
.head 13 -  Set s1 = 'f' || s1
.head 13 -  Break 
.head 11 -  Set n = n - n1
.head 11 -  Set n = n / 16
.head 9 +  If s1 != ''
.head 10 +  While SalNumberMod( SalStrLength( s1 ), 2 )
.head 11 -  Set s1 = '0' || s1
.head 10 -  Set s = s || "\\'" || s1
.head 7 -  Return s
.head 5 +  Function: WriteTab
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 7 -  Number: i
.head 7 -  String: as
.head 6 +  Actions
.head 7 -  ! Set n = SalStrTokenize( psValue, '', cTab, as )
.head 7 -  Set as = psValue
.head 7 -  Set n = SalStrScan( as, cTab )
.head 7 -  Set i = 0
.head 7 +  While n >= 0
.head 8 -  Set s = SalStrLeftX( as, n - 1 )
.head 8 +  If i
.head 9 -  Call Tab(  )
.head 8 -  Call Write( s )
.head 8 -  Set i = i + 1
.head 8 -  Set as = SalStrMidX( as, n + SalStrLength( cTab ) - 1, SalStrLength( as ) )
.head 8 -  Set n = SalStrScan( as, cTab )
.head 7 +  If i
.head 8 -  Call Tab(  )
.head 7 -  Call Write( as )
.head 5 +  Function: WritelnTab
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Call WriteTab( psValue )
.head 7 -  Call NewPar(  )
.head 5 +  Function: HeaderBegin
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 -  ! If SectionModif( ) or TRtfParagraph.IsModified(  )
.head 7 -  Set s = '
'
.head 7 -  Set s = s || TRtfSection.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 +  If ( s != '' ) and ( s != '
' )
.head 8 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 9 -  Set s = s || ' '
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set s = '
{\\header
'
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set __nNbrBlock = __nNbrBlock + 1
.head 7 -  Call BeginBlock(  )
.head 7 -  Return TRUE
.head 5 +  Function: HeaderEnd
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Call EndBlock(  )
.head 7 -  Set s = '}'
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set __nNbrBlock = __nNbrBlock - 1
.head 7 -  Set s = '
'
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: FooterBegin
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 -  ! If SectionModif( ) or TRtfParagraph.IsModified(  )
.head 7 -  Set s = '
'
.head 7 -  Set s = s || TRtfSection.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 +  If ( s != '' ) and ( s != '
' )
.head 8 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 9 -  Set s = s || ' '
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set s = '
{\\footer\\widctlpar
'
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set __nNbrBlock = __nNbrBlock + 1
.head 7 -  Call BeginBlock(  )
.head 7 -  Return TRUE
.head 5 +  Function: FooterEnd
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Call EndBlock(  )
.head 7 -  Set s = '}'
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set __nNbrBlock = __nNbrBlock - 1
.head 7 -  Set s = '
'
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: SetText
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 +  If SectionModif( )
.head 8 -  ! If GetLandscape(  )
.head 8 -  Set s = '
'
.head 8 -  ! Set s = s || '\\pghsxw' || SalNumberToStrX( GetPaperHeight(  ), 0 )
.head 8 -  ! Set s = s || '\\pgwsxw' || SalNumberToStrX( GetPaperWidth(  ), 0 )
.head 8 -  ! Set s = s || '\\margelsxn' || SalNumberToStrX( GetMargeLeft(  ), 0 )
.head 8 -  ! Set s = s || '\\margersxn' || SalNumberToStrX( GetMargeRight(  ), 0 )
.head 8 -  ! Set s = s || '\\margetsxn' || SalNumberToStrX( GetMargeTop(  ), 0 )
.head 8 -  ! Set s = s || '\\margebsxn' || SalNumberToStrX( GetMargeBottom(  ), 0 )
.head 8 -  ! Set s = s || '\\lndscpsxn '
.head 8 -  ! Call __Doc.Write( s, SalStrLength( s ) )
.head 8 -  ! Call SetModif( TRUE )
.head 8 -  Set s = s || TRtfSection.GetStrFmt(  )
.head 7 -  Set s = s || TRtfParagraphe.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 +  If s != ''
.head 8 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 9 -  Set s = s || ' '
.head 8 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  ! Set s = StrToRtf( psValue )
.head 7 -  Set s = psValue
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set __bWrite = TRUE
.head 5 -  !
.head 5 +  Function: InsertField
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: n
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: lls
.head 6 +  Actions
.head 7 -  Set lls = ''
.head 7 +  If n = cFieldPage
.head 8 -  Set lls = lls || '{\\field {\\*\\fldinst { PAGE  \\\\* MERGEFORMAT }}}'
.head 7 +  If n = cFieldNbrPages
.head 8 -  Set lls = lls || '{\\field {\\*\\fldinst { NUMPAGES  \\\\* MERGEFORMAT }}}'
.head 7 -  Call __Doc.Write( lls, SalStrLength( lls ) )
.head 5 +  Function: InsertSymbol
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: n
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: lls
.head 6 +  Actions
.head 7 -  Set lls = '
'
.head 7 -  Set lls = lls || TRtfSection.GetStrFmt(  )
.head 7 +  While SalStrRightX( lls, 1 ) = ' '
.head 8 -  Set lls = SalStrLeftX( lls, SalStrLength( lls ) - 1 )
.head 7 +  If ( lls != '' ) and ( lls != '
' )
.head 8 +  If SalStrScan( ' 0123456789', SalStrRightX( lls, 1 ) ) = -1
.head 9 -  Set lls = lls || ' '
.head 7 -  Set lls = lls || '{\\field {\\*\\fldinst SYMBOL ' || SalNumberToStrX( n, 0 ) || ' \\\\f \"Wingdings\" \\\\s 8}}'
.head 7 -  Call __Doc.Write( lls, SalStrLength( lls ) )
.head 5 -  !
.head 5 +  Function: TOCIndex
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psRef
.head 7 -  Number: pnLevel
.head 7 -  String: psT
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = '{\\tc'
.head 7 +  If pnLevel != 0
.head 8 -  Set s = s || '\\tcl' || SalFmtFormatNumber( pnLevel, '0' )
.head 7 +  If psT != ''
.head 8 +  If SalStrFirstC( psT, i )
.head 9 -  Set s = s || '\\tcf' || SalFmtFormatNumber( i, '0' )
.head 7 -  Set s = s || '\\v ' || psRef
.head 7 -  Set s = s || '}'
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: TOC
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnLevel
.head 7 -  String: psT
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: i
.head 6 +  Actions
.head 7 +  If pnLevel = 0
.head 8 -  Set pnLevel = 3
.head 7 +  If psT != ''
.head 8 -  Set psT = ' ' || psT
.head 7 -  Set s = '{\\field\\fldedit{\\*\\fldinst  TOC \\\\o "1-' || SalFmtFormatNumber( pnLevel, '0' ) || '" \\\\f' || psT || ' }{\\fldrslt Mise à jour du sommaire (bouton droit de la souris sur ce champ)}}' 
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: INDIndex
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psRef
.head 7 -  String: psT
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = '{\\xe'
.head 7 +  ! If pnLevel != 0
.head 8 -  Set s = s || '\\tcl' || SalFmtFormatNumber( pnLevel, '0' )
.head 7 +  If psT != ''
.head 8 +  If SalStrFirstC( psT, i )
.head 9 -  Set s = s || '\\xef' || SalFmtFormatNumber( i, '0' )
.head 7 -  Set s = s || '\\v ' || psRef
.head 7 -  Set s = s || '}'
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 +  Function: Index
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psT
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: i
.head 6 +  Actions
.head 7 +  If psT != ''
.head 8 -  Set psT = ' ' || psT
.head 7 -  Set s = '{\\field{\\*\\fldinst  INDEX \\\\e "\\tab " \\\\c "1" \\\\{\\fs18 f' || psT || '} }{\\fldrslt \\sbknone\\linex0\\headery709\\footery709\\cols1 \\tqr\\tldot\\tx' || SalFmtFormatNumber( ( CMToTwips( ( wnRtfWidth - wnRtfMargeL - 
wnRtfMargeR ) - 1 ) ) , '0' ) || ' Veuillez mettre à jour les champs (bouton droit de la souris)}}\\par ' 
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 5 -  !
.head 5 +  Function: IncludeFile
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psFileName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: lls
.head 6 +  Actions
.head 7 -  Set lls = ''
.head 7 -  Set lls = __RtfReplaceStringX( psFileName, '\\', '\\\\\\\\' )
.head 7 -  Set lls = '{\\field {\\*\\fldinst {\\ltrch INCLUDETEXT "' || lls || '" }}{\\fldrslt {\\rtlch \\af0 \\ltrch { Cliquer avec le bouton droit pour mettre à jour la zone}\\par }}}'
.head 7 -  Call __Doc.Write( lls, SalStrLength( lls ) )
.head 5 +  Function: IncludePicture
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psFileName
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: lls
.head 6 +  Actions
.head 7 -  Set lls = ''
.head 7 -  Set lls = __RtfReplaceStringX( psFileName, '\\', '\\\\\\\\' )
.head 7 -  Set lls = '{\\field {\\*\\fldinst {\\ltrch INCLUDEPICTURE "' || lls || '" \\\\* MERGEFORMAT \\\\d }}{\\fldrslt {\\rtlch \\af0 \\ltrch { Cliquer avec le bouton droit pour mettre à jour la zone}\\par }}}'
.head 7 -  Call __Doc.Write( lls, SalStrLength( lls ) )
.head 5 -  !
.head 5 -  !
.head 5 +  ! Function: Attr
.head 6 -  Description: 
.head 6 -  Returns 
.head 6 +  Parameters 
.head 7 -  Number: pnAttr
.head 7 -  Number: pnFontSize
.head 7 -  ! Number: pnShading
.head 7 -  ! Number: pnMinHeight
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  String: s
.head 6 +  Actions 
.head 7 -  Set s = ''
.head 7 -  Call ParDefault(  )
.head 7 +  If pnAttr & cBold
.head 8 -  Call Bold( TRUE )
.head 7 +  If pnAttr & cStrike
.head 8 -  Call Strike( TRUE )
.head 7 +  If pnAttr & cItalic
.head 8 -  Call Italic( TRUE )
.head 7 +  If pnAttr & cCaps
.head 8 -  Call Caps( TRUE )
.head 7 +  If pnAttr & cDoubleUnderline
.head 8 -  Call Underline( cDoubleUnderline )
.head 7 +  If pnAttr & cDotUnderline
.head 8 -  ! Set s = s || '\\uld'
.head 8 -  Call Underline( cDotUnderline )
.head 7 +  If pnAttr & cWordUnderline
.head 8 -  ! Set s = s || '\\ulw'
.head 8 -  Call Underline( cWordUnderline )
.head 7 +  If pnAttr & cUnderline
.head 8 -  ! Set s = s || '\\ul'
.head 8 -  Call Underline( cUnderline )
.head 7 +  If pnAttr & cParCenter
.head 8 -  ! Set s = s || '\\qc'
.head 8 -  Call Alignement( cParCenter )
.head 7 +  If pnAttr & cParRight
.head 8 -  ! Set s = s || '\\qr'
.head 8 -  Call Alignement( cParRight )
.head 7 +  If pnAttr & cParJust
.head 8 -  ! Set s = s || '\\qj'
.head 8 -  Call Alignement( cParJust )
.head 7 +  If pnAttr & cParSolidaire
.head 8 -  ! Set s = s || '\\keepn'
.head 8 -  Call ParagrapheSolidaire( TRUE )
.head 7 +  If pnAttr & cLineSolidaire
.head 8 -  ! Set s = s || '\\keep'
.head 8 -  Call LigneSolidaire( TRUE )
.head 7 +  If pnFontSize != 0
.head 8 -  ! Set s = s || '\\fs' || SalFmtFormatNumber( pnFontSize * 2, '0' )
.head 8 -  Call FontSize( pnFontSize )
.head 7 -  ! Set s = s || ' '
.head 7 -  ! Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 +  Function: Attr
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnAttr
.head 7 -  Number: pnFontSize
.head 7 -  ! Number: pnShading
.head 7 -  ! Number: pnMinHeight
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 -  ! Call ParDefault(  )
.head 7 +  If pnAttr & cBold
.head 8 -  Set s = s || '\\b'
.head 7 +  If pnAttr & cStrike
.head 8 -  ! Call Strike( TRUE )
.head 8 -  Set s = s || '\\strike'
.head 7 +  If pnAttr & cItalic
.head 8 -  ! Call Italic( TRUE )
.head 8 -  Set s = s || '\\i'
.head 7 +  If pnAttr & cCaps
.head 8 -  ! Call Caps( TRUE )
.head 8 -  Set s = s || '\\caps'
.head 7 +  If pnAttr & cDoubleUnderline
.head 8 -  ! Call Underline( cDoubleUnderline )
.head 8 -  Set s = s || '\\uldb'
.head 7 +  If pnAttr & cDotUnderline
.head 8 -  Set s = s || '\\uld'
.head 8 -  ! Call Underline( cDotUnderline )
.head 7 +  If pnAttr & cWordUnderline
.head 8 -  Set s = s || '\\ulw'
.head 8 -  ! Call Underline( cWordUnderline )
.head 7 +  If pnAttr & cUnderline
.head 8 -  Set s = s || '\\ul'
.head 8 -  ! Call Underline( cUnderline )
.head 7 +  If pnAttr & cParCenter
.head 8 -  Set s = s || '\\qc'
.head 8 -  ! Call Alignement( cParCenter )
.head 7 +  If pnAttr & cParRight
.head 8 -  Set s = s || '\\qr'
.head 8 -  ! Call Alignement( cParRight )
.head 7 +  If pnAttr & cParJust
.head 8 -  Set s = s || '\\qj'
.head 8 -  ! Call Alignement( cParJust )
.head 7 +  If pnAttr & cParSolidaire
.head 8 -  Set s = s || '\\keepn'
.head 8 -  ! Call ParagrapheSolidaire( TRUE )
.head 7 +  If pnAttr & cLineSolidaire
.head 8 -  Set s = s || '\\keep'
.head 8 -  ! Call LigneSolidaire( TRUE )
.head 7 +  If pnFontSize != 0
.head 8 -  Set s = s || '\\fs' || SalFmtFormatNumber( pnFontSize * 2, '0' )
.head 8 -  ! Call FontSize( pnFontSize )
.head 7 -  Set s = s || ' '
.head 7 -  ! Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 7 -  Call OutData( ).Write( s, SalStrLength( s ) )
.head 5 +  Function: WriteMemo
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Long String: pls
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Long String: lls
.head 7 -  Long String: ls1
.head 7 -  Number: i
.head 7 -  Number: l
.head 6 +  Actions
.head 7 -  ! Set lls = RtfCodeHexa( pls )
.head 7 -  Set lls = pls
.head 7 -  Set ls1 = lls
.head 7 -  Set i = SalStrScan( lls, '
' )
.head 7 +  While i >= 0
.head 8 -  Set ls1 = SalStrLeftX( lls, i  )
.head 8 -  Call Writeln( ls1 )
.head 8 -  ! Call RtfNewPar( pfh )
.head 8 -  Set lls = SalStrMidX( lls, i + SalStrLength( '
' ) , SalStrLength( lls ) )
.head 8 -  Set i = SalStrScan( lls, '
' )
.head 7 -  Call Write( lls )
.head 5 -  !
.head 5 -  !
.head 5 +  Function: SaveStringRTF
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 +  If SectionModif( )
.head 8 -  ! If GetLandscape(  )
.head 8 -  Set s = '
'
.head 8 -  ! Set s = s || '\\pghsxw' || SalNumberToStrX( GetPaperHeight(  ), 0 )
.head 8 -  ! Set s = s || '\\pgwsxw' || SalNumberToStrX( GetPaperWidth(  ), 0 )
.head 8 -  ! Set s = s || '\\margelsxn' || SalNumberToStrX( GetMargeLeft(  ), 0 )
.head 8 -  ! Set s = s || '\\margersxn' || SalNumberToStrX( GetMargeRight(  ), 0 )
.head 8 -  ! Set s = s || '\\margetsxn' || SalNumberToStrX( GetMargeTop(  ), 0 )
.head 8 -  ! Set s = s || '\\margebsxn' || SalNumberToStrX( GetMargeBottom(  ), 0 )
.head 8 -  ! Set s = s || '\\lndscpsxn '
.head 8 -  ! Call __Doc.Write( s, SalStrLength( s ) )
.head 8 -  ! Call SetModif( TRUE )
.head 8 -  Set s = s || TRtfSection.GetStrFmt(  )
.head 7 -  Set s = s || TRtfParagraphe.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 +  If s != ''
.head 8 +  If ( SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1 ) or ( ( SalStrScan( '0123456789', SalStrRightX( s, 1 ) ) > -1 ) and ( SalStrScan( '0123456789', SalStrRightX( psValue, 1 ) ) > -1 ) ) 
.head 9 -  Set s = s || ' '
.head 8 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Call __Doc.Write( psValue, SalStrLength( psValue ) )
.head 7 -  Set __bWrite = TRUE
.head 5 +  ! Function: Write
.head 6 -  Description: 
.head 6 -  Returns 
.head 6 +  Parameters 
.head 7 -  String: psValue
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  String: s
.head 6 +  Actions 
.head 7 +  If SectionModif( )
.head 8 -  ! If GetLandscape(  )
.head 8 -  Set s = '
'
.head 8 -  ! Set s = s || '\\pghsxw' || SalNumberToStrX( GetPaperHeight(  ), 0 )
.head 8 -  ! Set s = s || '\\pgwsxw' || SalNumberToStrX( GetPaperWidth(  ), 0 )
.head 8 -  ! Set s = s || '\\margelsxn' || SalNumberToStrX( GetMargeLeft(  ), 0 )
.head 8 -  ! Set s = s || '\\margersxn' || SalNumberToStrX( GetMargeRight(  ), 0 )
.head 8 -  ! Set s = s || '\\margetsxn' || SalNumberToStrX( GetMargeTop(  ), 0 )
.head 8 -  ! Set s = s || '\\margebsxn' || SalNumberToStrX( GetMargeBottom(  ), 0 )
.head 8 -  ! Set s = s || '\\lndscpsxn '
.head 8 -  ! Call __Doc.Write( s, SalStrLength( s ) )
.head 8 -  ! Call SetModif( TRUE )
.head 8 -  Set s = s || TRtfSection.GetStrFmt(  )
.head 7 -  Set s = s || TRtfParagraphe.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 +  If s != ''
.head 8 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 9 -  Set s = s || ' '
.head 8 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set s = StrToRtf( psValue )
.head 7 -  Call __Doc.Write( s, SalStrLength( s ) )
.head 7 -  Set __bWrite = TRUE
.head 5 +  Function: OutData
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  FunctionalVar:
.head 8 -  Class: TStream
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __Doc
.head 3 -  !
.head 3 +  Functional Class: TRtfCell
.head 4 -  Description:
.head 4 +  Derived From
.head 5 -  Class: TRtfParagraphe
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  !
.head 5 -  ! Les 4 variables suivantes permettent d'enregistrer la valeur à imprimer
.head 5 -  ! dans la cellule du tableau
.head 5 -  ! String contient la chaine de caractère à afficher
.head 5 -  ! Number contient le nombre à afficher. La variable format contient le format d'affichage du nombre
.head 5 -  ! Date contient la date à afficher. La variable format contient le format d'affichage de la date
.head 5 -  ! inType indique quel variable utiliser pour l'impression: 1 : string, 2 : number, 3 : date
.head 5 -  String: String
.head 5 -  Long String: LongString
.head 5 -  Number: Number
.head 5 -  Date/Time: Date
.head 5 -  String: Format
.head 5 -  Number: inType
.head 5 -  !
.head 5 -  !
.head 5 -  Number: nBorderLW
.head 5 -  Number: nBorderRW
.head 5 -  Number: nBorderTW
.head 5 -  Number: nBorderBW
.head 5 -  Number: nBorderLS
.head 5 -  Number: nBorderRS
.head 5 -  Number: nBorderTS
.head 5 -  Number: nBorderBS
.head 5 -  Number: nLength
.head 4 +  Functions
.head 5 +  ! Function: GetStrFmt
.head 6 -  Description: 
.head 6 +  Returns 
.head 7 -  String: 
.head 6 -  Parameters 
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  String: s
.head 7 -  String: sW
.head 7 -  Number: n
.head 7 -  Number: n1
.head 6 +  Actions 
.head 7 -  Set s = ''
.head 7 -  Set sW = 't'
.head 7 -  Set n = nBorderTS
.head 7 -  Set n1 = nBorderTW
.head 7 +  If n
.head 8 -  Set s = s || '\\brdr' || sW || GetCodeBorder( n ) 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( n1, 0 )
.head 8 -  Set s = s || ' '
.head 7 -  Set sW = 'r'
.head 7 -  Set n = nBorderRS
.head 7 -  Set n1 = nBorderRW
.head 7 +  If n
.head 8 -  Set s = s || '\\brdr' || sW || GetCodeBorder( n ) 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( n1, 0 )
.head 8 -  Set s = s || ' '
.head 7 -  Set sW = 'b'
.head 7 -  Set n = nBorderBS
.head 7 -  Set n1 = nBorderBW
.head 7 +  If n
.head 8 -  Set s = s || '\\brdr' || sW || GetCodeBorder( n ) 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( n1, 0 )
.head 8 -  Set s = s || ' '
.head 7 -  Set sW = 'l'
.head 7 -  Set n = nBorderLS
.head 7 -  Set n1 = nBorderLW
.head 7 +  If n
.head 8 -  Set s = s || '\\brdr' || sW || GetCodeBorder( n ) 
.head 8 -  Set s = s || '\\brdrw' || SalNumberToStrX( n1, 0 )
.head 8 -  Set s = s || ' '
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 -  Return s
.head 5 +  Function: Copy
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pData
.head 8 -  Class: TRtfCell
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call TRtfParagraphe.Copy( pData )
.head 7 -  Set nBorderLW = pData.nBorderLW
.head 7 -  Set nBorderRW = pData.nBorderRW
.head 7 -  Set nBorderTW = pData.nBorderTW
.head 7 -  Set nBorderBW = pData.nBorderBW
.head 7 -  Set nBorderLS = pData.nBorderLS
.head 7 -  Set nBorderRS = pData.nBorderRS
.head 7 -  Set nBorderTS = pData.nBorderTS
.head 7 -  Set nBorderBS = pData.nBorderBS
.head 7 -  Set nLength = pData.nLength
.head 7 -  Set String = pData.String
.head 7 -  Set LongString = pData.LongString
.head 7 -  Set Number = pData.Number
.head 7 -  Set Date = pData.Date
.head 7 -  Set Format = pData.Format
.head 7 -  Set inType = pData.inType
.head 3 +  Functional Class: TRtfTableRow
.head 4 -  Description:
.head 4 +  Derived From
.head 5 -  Class: TRtfWrite
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  FunctionalVar: Cells[*]
.head 6 -  Class: TRtfCell
.head 5 -  Number: __nNbrCells
.head 5 -  FunctionalVar: nMinHeight
.head 6 -  Class: __TRtfValeur
.head 5 -  Boolean: __bModif
.head 5 -  FunctionalVar: __Row
.head 6 -  Class: TMemoryStream
.head 5 -  Number: __inCurCell
.head 5 -  Number: __nNbrBlock
.head 5 -  ! TRtfCell: CurCell
.winattr class FunctionalVar:
.head 6 -  Class: TRtfCell
.end
.head 5 -  !
.head 5 -  FunctionalVar: __oStack
.head 6 -  Class: __TRtfStackPara
.head 5 -  Number: __nTypeDoc
.head 4 +  Functions
.head 5 +  Function: GetNumberCell
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > __nNbrCells
.head 8 -  Return NUMBER_Null
.head 7 +  If Cells[ nCell ].inType = 2
.head 8 -  Return Cells[ nCell ].Number
.head 7 -  Return NUMBER_Null
.head 5 +  Function: GetNbrCells
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __nNbrCells
.head 5 +  Function: GetFormatNumberCell
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > __nNbrCells
.head 8 -  Return ''
.head 7 +  If Cells[ nCell ].inType = 2
.head 8 -  Return Cells[ nCell ].Format
.head 7 -  Return ''
.head 5 +  Function: CopyRow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pData
.head 8 -  Class: TRtfTableRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set __nNbrCells = pData.__nNbrCells
.head 7 -  Set i = 1
.head 7 +  While i <= __nNbrCells
.head 8 -  Call Cells[i].Copy( pData.Cells[i] )
.head 8 -  Set i = i + 1
.head 7 -  Call nMinHeight.SetValue( pData.nMinHeight.GetValue(  ) )
.head 7 -  Set __inCurCell = 0
.head 7 -  Set __bModif = TRUE
.head 5 -  !
.head 5 +  Function: SetString
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  String: psString
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > __nNbrCells
.head 8 -  Set __nNbrCells = nCell
.head 7 -  Set Cells[ nCell ].String = psString
.head 7 -  Set Cells[ nCell ].inType = 1
.head 5 +  Function: SetLongString
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  Long String: psString
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > __nNbrCells
.head 8 -  Set __nNbrCells = nCell
.head 7 -  Set Cells[ nCell ].LongString = psString
.head 7 -  Set Cells[ nCell ].inType = 5
.head 5 +  Function: ClearValue
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = __nNbrCells
.head 7 +  While i
.head 8 -  Set Cells[ i ].Format = ''
.head 8 -  Set Cells[ i ].Number = NUMBER_Null
.head 8 -  Set Cells[ i ].inType = -1
.head 8 -  Set Cells[ i ].String = ''
.head 8 -  Set Cells[ i ].Date = DATETIME_Null
.head 8 -  Set i = i - 1
.head 5 +  Function: ClearEmpty
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = __nNbrCells
.head 7 +  While i
.head 8 -  Set Cells[ i ].Format = ''
.head 8 -  Set Cells[ i ].Number = NUMBER_Null
.head 8 -  Set Cells[ i ].inType = -1
.head 8 -  Set Cells[ i ].String = ''
.head 8 -  Set Cells[ i ].Date = DATETIME_Null
.head 8 -  Call SetEmpty( i )
.head 8 -  Set i = i - 1
.head 5 +  Function: SetRtfString
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  String: psString
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > __nNbrCells
.head 8 -  Set __nNbrCells = nCell
.head 7 -  Set Cells[ nCell ].String = psString
.head 7 -  Set Cells[ nCell ].inType = 4
.head 5 +  Function: SetNumber
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  Number: pnNumber
.head 7 -  String: psFormat
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > __nNbrCells
.head 8 -  Set __nNbrCells = nCell
.head 7 -  Set Cells[ nCell ].Format = psFormat
.head 7 -  Set Cells[ nCell ].Number = pnNumber
.head 7 -  Set Cells[ nCell ].inType = 2
.head 5 +  Function: SetEmpty
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call SetRtfString( nCell, cEspaceInsep )
.head 5 +  Function: SetDate
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: nCell
.head 7 -  Date/Time: pnDate
.head 7 -  String: psFormat
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > __nNbrCells
.head 8 -  Set __nNbrCells = nCell
.head 7 -  Set Cells[ nCell ].Format = psFormat
.head 7 -  Set Cells[ nCell ].Date = pnDate
.head 7 -  Set Cells[ nCell ].inType = 3
.head 5 -  !
.head 5 -  !
.head 5 +  Function: MinHeight
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call nMinHeight.SetValue( pnValue )
.head 7 -  Set __bModif = TRUE
.head 5 +  Function: AddCell
.head 6 -  Description: Ajoute une cellule dans la ligne
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pDoc
.head 8 -  Class: TRtfDocument
.head 7 -  Number: nCell
.head 7 -  Number: nSize
.head 7 -  Number: nKindSize
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If nCell > __nNbrCells
.head 8 -  Set __nNbrCells = nCell
.head 7 +  If nKindSize = cPct
.head 8 -  Set Cells[ nCell ].nLength = CMToTwips( nSize / 100 * (pDoc.GetPaperWidth(  )  - pDoc.GetMargeLeft(  ) - pDoc.GetMargeRight(  ) ) )
.head 7 +  Else
.head 8 -  Set Cells[ nCell ].nLength = CMToTwips( nSize )
.head 7 -  Set Cells[ nCell ].nBorderRW = 15
.head 7 -  Set Cells[ nCell ].nBorderLW = 15
.head 7 -  Set Cells[ nCell ].nBorderTW = 15
.head 7 -  Set Cells[ nCell ].nBorderBW = 15
.head 5 +  Function: DefineCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnCell
.head 7 -  Number: pnAttr
.head 7 -  Number: pnFontSize
.head 7 -  Number: pnShading
.head 7 -  Number: pnMinHeight
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnCell > __nNbrCells
.head 8 -  Set __nNbrCells = pnCell
.head 7 -  Call Cells[ pnCell ].FontSize( pnFontSize )
.head 7 +  If pnAttr & cBold
.head 8 -  Call Cells[ pnCell ].Bold( TRUE )
.head 7 +  Else
.head 8 -  Call Cells[ pnCell ].Bold( FALSE )
.head 7 +  If pnAttr & cItalic
.head 8 -  Call Cells[ pnCell ].Italic( TRUE )
.head 7 +  Else
.head 8 -  Call Cells[ pnCell ].Italic( FALSE )
.head 7 +  If pnAttr & cCaps
.head 8 -  Call Cells[ pnCell ].Caps( TRUE )
.head 7 +  Else
.head 8 -  Call Cells[ pnCell ].Caps( FALSE )
.head 7 -  Call Cells[ pnCell ].Underline(  pnAttr & 0x000F )
.head 7 -  Call Cells[ pnCell ].Alignement( pnAttr & 0xF000 )
.head 7 -  Call Cells[ pnCell ].Shading( pnShading )
.head 7 -  ! Set itCells[ pnCell ].nMinHeight = pnMinHeight
.head 7 -  Call MinHeight( CMToTwips( pnMinHeight ) )
.head 7 +  If pnAttr & cBorderR
.head 8 -  ! Set Cells[ pnCell ].bBorderR = TRUE
.head 8 -  Set Cells[ pnCell ].nBorderRS = cParBorderSingleT
.head 7 +  Else
.head 8 -  ! Set Cells[ pnCell ].bBorderR = FALSE
.head 8 -  ! Call Cells[ pnCell ].nBorderRS = 0
.head 8 -  Set Cells[ pnCell ].nBorderRS = 0
.head 7 -  Set Cells[ pnCell ].nBorderTS = 0
.head 7 -  Set Cells[ pnCell ].nBorderLS = 0
.head 7 -  Set Cells[ pnCell ].nBorderBS = 0
.head 7 -  Set Cells[ pnCell ].nBorderRS = 0
.head 7 +  If pnAttr & cBorderL
.head 8 -  ! Set Cells[ pnCell ].bBorderL = TRUE
.head 8 -  Set Cells[ pnCell ].nBorderLS = cParBorderSingleT
.head 8 -  Set Cells[ pnCell ].nBorderLW = 15
.head 7 +  ! Else
.head 8 -  ! Set Cells[ pnCell ].bBorderL = FALSE
.head 7 +  If pnAttr & cBorderT
.head 8 -  ! Set Cells[ pnCell ].bBorderT = TRUE
.head 8 -  Set Cells[ pnCell ].nBorderTS = cParBorderSingleT
.head 8 -  Set Cells[ pnCell ].nBorderTW = 15
.head 7 +  ! Else
.head 8 -  ! Set Cells[ pnCell ].bBorderT = FALSE
.head 7 +  If pnAttr & cBorderB
.head 8 -  ! Set Cells[ pnCell ].bBorderB = TRUE
.head 8 -  Set Cells[ pnCell ].nBorderBS = cParBorderSingleT
.head 8 -  Set Cells[ pnCell ].nBorderBW = 15
.head 7 +  If pnAttr & cBorderR
.head 8 -  ! Set Cells[ pnCell ].bBorderB = TRUE
.head 8 -  Set Cells[ pnCell ].nBorderRS = cParBorderSingleT
.head 8 -  Set Cells[ pnCell ].nBorderRW = 15
.head 7 +  ! Else
.head 8 -  ! Set Cells[ pnCell ].bBorderB = FALSE
.head 7 +  If pnAttr & cBorderDR
.head 8 -  ! Set Cells[ pnCell ].bBorderDR = TRUE
.head 8 -  Set Cells[ pnCell ].nBorderRS = cParBorderDouble
.head 8 -  Set Cells[ pnCell ].nBorderRW = 15
.head 7 +  ! Else
.head 8 -  ! Set Cells[ pnCell ].bBorderDR = FALSE
.head 7 +  If pnAttr & cBorderDL
.head 8 -  ! Set Cells[ pnCell ].bBorderDL = TRUE
.head 8 -  Set Cells[ pnCell ].nBorderLS = cParBorderDouble
.head 8 -  Set Cells[ pnCell ].nBorderLW = 15
.head 7 +  ! Else
.head 8 -  ! Set Cells[ pnCell ].bBorderDL = FALSE
.head 8 -  Set Cells[ pnCell ].nBorderLS = 0
.head 7 +  If pnAttr & cBorderDT
.head 8 -  ! Set Cells[ pnCell ].bBorderDT = TRUE
.head 8 -  Set Cells[ pnCell ].nBorderTS = cParBorderDouble
.head 8 -  Set Cells[ pnCell ].nBorderTW = 15
.head 7 +  ! Else
.head 8 -  ! Set Cells[ pnCell ].bBorderDT = FALSE
.head 8 -  Set Cells[ pnCell ].nBorderTS = 0
.head 7 +  If pnAttr & cBorderDB
.head 8 -  ! Set Cells[ pnCell ].bBorderDB = TRUE
.head 8 -  Set Cells[ pnCell ].nBorderBS = cParBorderDouble
.head 8 -  Set Cells[ pnCell ].nBorderBW = 15
.head 7 +  ! Else
.head 8 -  ! Set Cells[ pnCell ].bBorderDB = FALSE
.head 8 -  Set Cells[ pnCell ].nBorderBS = 0
.head 5 +  Function: DefineBorderCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnCell
.head 7 -  Number: pnAttr
.head 7 -  Number: pnSize
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnCell > __nNbrCells
.head 8 -  Set __nNbrCells = pnCell
.head 7 +  If pnAttr & cBorderR
.head 8 -  Set Cells[ pnCell ].nBorderRW = pnSize
.head 8 -  Set Cells[ pnCell ].nBorderRS = cParBorderSingleT
.head 7 +  If pnAttr & cBorderL
.head 8 -  Set Cells[ pnCell ].nBorderLW = pnSize
.head 8 -  Set Cells[ pnCell ].nBorderLS = cParBorderSingleT
.head 7 +  If pnAttr & cBorderT
.head 8 -  Set Cells[ pnCell ].nBorderTW = pnSize
.head 8 -  Set Cells[ pnCell ].nBorderTS = cParBorderSingleT
.head 7 +  If pnAttr & cBorderB
.head 8 -  Set Cells[ pnCell ].nBorderBW = pnSize
.head 8 -  Set Cells[ pnCell ].nBorderBS = cParBorderSingleT
.head 7 +  If pnAttr & cBorderDR
.head 8 -  Set Cells[ pnCell ].nBorderRW = pnSize
.head 8 -  Set Cells[ pnCell ].nBorderRS = cParBorderDouble
.head 7 +  If pnAttr & cBorderDL
.head 8 -  Set Cells[ pnCell ].nBorderLW = pnSize
.head 8 -  Set Cells[ pnCell ].nBorderLS = cParBorderDouble
.head 7 +  If pnAttr & cBorderDT
.head 8 -  Set Cells[ pnCell ].nBorderTW = pnSize
.head 8 -  Set Cells[ pnCell ].nBorderTS = cParBorderDouble
.head 7 +  If pnAttr & cBorderDB
.head 8 -  Set Cells[ pnCell ].nBorderBW = pnSize
.head 8 -  Set Cells[ pnCell ].nBorderBS = cParBorderDouble
.head 5 +  Function: DefineCellPar
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnCell
.head 7 -  Number: pnSpaceBefore
.head 7 -  Number: pnSpaceAfter
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 +  If pnCell > __nNbrCells
.head 8 -  Set __nNbrCells = pnCell
.head 7 -  Call Cells[ pnCell ].SpaceBefore( pnSpaceBefore )
.head 7 -  Call Cells[ pnCell ].SpaceAfter( pnSpaceAfter )
.head 5 -  !
.head 5 +  Function: Init
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 -  Actions
.head 5 -  !
.head 5 +  Function: BeginRow
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  FunctionalVar: Doc
.head 8 -  Class: TRtfDocument
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  String: s1
.head 7 -  Number: p
.head 7 -  Number: i
.head 7 -  Number: n
.head 7 -  Number: n1
.head 6 +  Actions
.head 7 +  If not __Row.IsOpened()
.head 8 -  Call __Row.Open() 
.head 8 -  Call Init(  )
.head 7 +  If __Row.IsOpened(  )
.head 8 -  Call BeginBlock(  )
.head 8 -  ! Set s = '\\trowd\\trgaph70\\trleft-70'
.head 8 -  Call Doc.BeginBlock(  )
.head 8 -  Set s = Doc.GetStrFmt(  )
.head 8 -  Set s = s || '\\trowd\\trgaph70\\trleft-70
'
.head 8 -  Set i = 0
.head 8 -  Set p = 0
.head 8 +  If nMinHeight.Modified(  )
.head 9 +  If nMinHeight.GetValue(  )
.head 10 -  Set s = s || '\\trrh' || SalNumberToStrX( nMinHeight.GetValue(  ), 0 )
.head 8 +  While i < __nNbrCells
.head 9 -  Set i = i + 1
.head 9 -  Set n = Cells[i].nBorderLS
.head 9 -  Set n1 = Cells[i].nBorderLW
.head 9 -  Set s1 = 'l'
.head 9 +  If n
.head 10 +  Select Case n
.head 11 +  Case cParBorderSingleT
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 11 +  Case cParBorderDouble
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 9 -  Set n = Cells[i].nBorderTS
.head 9 -  Set n1 = Cells[i].nBorderTW
.head 9 -  Set s1 = 't'
.head 9 +  If n
.head 10 +  Select Case n
.head 11 +  Case cParBorderSingleT
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 11 +  Case cParBorderDouble
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 9 -  Set n = Cells[i].nBorderRS
.head 9 -  Set n1 = Cells[i].nBorderRW
.head 9 -  Set s1 = 'r'
.head 9 +  If n
.head 10 +  Select Case n
.head 11 +  Case cParBorderSingleT
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 11 +  Case cParBorderDouble
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 9 -  Set n = Cells[i].nBorderBS
.head 9 -  Set n1 = Cells[i].nBorderBW
.head 9 -  Set s1 = 'b'
.head 9 +  If n
.head 10 +  Select Case n
.head 11 +  Case cParBorderSingleT
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 11 +  Case cParBorderDouble
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 9 -  Set p = p + Cells[i].nLength
.head 9 -  Set s = s || '\\cellx' || SalNumberToStrX( p, 0 ) || '
'
.head 8 -  Set s = s || '\\intbl\\pard'
.head 8 +  While SalStrRightX( s, 1 ) = ' '
.head 9 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 8 -  Set s = VisStrSubstitute( s, ' ', '' )
.head 8 +  ! If s != ' '
.head 9 -  Set s = s || ' '
.head 8 +  If s != ' '
.head 9 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 10 -  Set s = s || ' '
.head 8 -  Call __Row.PutStr( s )
.head 8 -  Set __inCurCell = 1
.head 8 -  Call SetType( Doc.GetType(  ) )
.head 7 -  Return TRUE
.head 5 +  Function: BeginRowHeader
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 +  Parameters
.head 7 -  FunctionalVar: Doc
.head 8 -  Class: TRtfDocument
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  String: s1
.head 7 -  Number: p
.head 7 -  Number: i
.head 7 -  Number: n
.head 7 -  Number: n1
.head 6 +  Actions
.head 7 +  If not __Row.IsOpened()
.head 8 -  Call __Row.Open() 
.head 8 -  Call Init(  )
.head 7 +  If __Row.IsOpened(  )
.head 8 -  Call BeginBlock(  )
.head 8 -  ! Set s = '\\trowd\\trgaph70\\trleft-70'
.head 8 -  Call Doc.BeginBlock(  )
.head 8 -  Set s = Doc.GetStrFmt(  )
.head 8 -  Set s = s || '\\trowd\\trgaph70\\trleft-70\\trhdr
'
.head 8 -  Set i = 0
.head 8 -  Set p = 0
.head 8 +  If nMinHeight.Modified(  )
.head 9 +  If nMinHeight.GetValue(  )
.head 10 -  Set s = s || '\\trrh' || SalNumberToStrX( nMinHeight.GetValue(  ), 0 )
.head 8 +  While i < __nNbrCells
.head 9 -  Set i = i + 1
.head 9 -  Set n = Cells[i].nBorderLS
.head 9 -  Set n1 = Cells[i].nBorderLW
.head 9 -  Set s1 = 'l'
.head 9 +  If n
.head 10 +  Select Case n
.head 11 +  Case cParBorderSingleT
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 11 +  Case cParBorderDouble
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 9 -  Set n = Cells[i].nBorderTS
.head 9 -  Set n1 = Cells[i].nBorderTW
.head 9 -  Set s1 = 't'
.head 9 +  If n
.head 10 +  Select Case n
.head 11 +  Case cParBorderSingleT
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 11 +  Case cParBorderDouble
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 9 -  Set n = Cells[i].nBorderRS
.head 9 -  Set n1 = Cells[i].nBorderRW
.head 9 -  Set s1 = 'r'
.head 9 +  If n
.head 10 +  Select Case n
.head 11 +  Case cParBorderSingleT
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 11 +  Case cParBorderDouble
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 9 -  Set n = Cells[i].nBorderBS
.head 9 -  Set n1 = Cells[i].nBorderBW
.head 9 -  Set s1 = 'b'
.head 9 +  If n
.head 10 +  Select Case n
.head 11 +  Case cParBorderSingleT
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 11 +  Case cParBorderDouble
.head 12 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 12 -  Break
.head 9 -  Set p = p + Cells[i].nLength
.head 9 -  Set s = s || '\\cellx' || SalNumberToStrX( p, 0 ) 
.head 9 +  If i < __nNbrCells
.head 10 -  Set s = s || '
'
.head 8 -  Set s = s || '\\intbl\\pard'
.head 8 -  Set s = VisStrSubstitute( s, ' ', '' )
.head 8 +  While SalStrRightX( s, 1 ) = ' '
.head 9 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 8 +  If s != ' '
.head 9 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 10 -  Set s = s || ' '
.head 8 +  ! If s != ' '
.head 9 -  Set s = s || ' '
.head 8 -  Call __Row.PutStr( s )
.head 8 -  Set __inCurCell = 1
.head 8 -  Call SetType( Doc.GetType(  ) )
.head 7 -  Return TRUE
.head 5 +  Function: EndRow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: Doc
.head 8 -  Class: TRtfDocument
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: i
.head 7 -  Number: p
.head 7 -  Number: n
.head 7 -  Number: n1
.head 7 -  String: s1
.head 6 +  Actions
.head 7 +  If __Row.IsOpened(  )
.head 8 -  Set s = ''
.head 8 +  If GetType(  ) = cDocumentWord2000
.head 9 -  Set s = s || '
\\widctlpar\\intbl\\adjustright'
.head 9 -  ! Set s = s || '
\\widctlpar\\intbl\\adjustright
{\\trowd\\trgaph70\\trleft-70'
.head 9 -  ! Set i = 0
.head 9 -  ! Set p = 0
.head 9 +  ! If nMinHeight.Modified(  )
.head 10 +  If nMinHeight.GetValue(  )
.head 11 -  Set s = s || '\\trrh' || SalNumberToStrX( nMinHeight.GetValue(  ), 0 )
.head 9 +  ! While i < __nNbrCells
.head 10 -  Set i = i + 1
.head 10 -  Set n = Cells[i].nBorderLS
.head 10 -  Set n1 = Cells[i].nBorderLW
.head 10 -  Set s1 = 'l'
.head 10 +  If n
.head 11 +  Select Case n
.head 12 +  Case cParBorderSingleT
.head 13 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 13 -  Break 
.head 12 +  Case cParBorderDouble
.head 13 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 13 -  Break 
.head 10 -  Set n = Cells[i].nBorderTS
.head 10 -  Set n1 = Cells[i].nBorderTW
.head 10 -  Set s1 = 't'
.head 10 +  If n
.head 11 +  Select Case n
.head 12 +  Case cParBorderSingleT
.head 13 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 13 -  Break 
.head 12 +  Case cParBorderDouble
.head 13 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 13 -  Break 
.head 10 -  Set n = Cells[i].nBorderRS
.head 10 -  Set n1 = Cells[i].nBorderRW
.head 10 -  Set s1 = 'r'
.head 10 +  If n
.head 11 +  Select Case n
.head 12 +  Case cParBorderSingleT
.head 13 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 13 -  Break 
.head 12 +  Case cParBorderDouble
.head 13 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 13 -  Break 
.head 10 -  Set n = Cells[i].nBorderBS
.head 10 -  Set n1 = Cells[i].nBorderBW
.head 10 -  Set s1 = 'b'
.head 10 +  If n
.head 11 +  Select Case n
.head 12 +  Case cParBorderSingleT
.head 13 -  Set s = s || '\\clbrdr' || s1 || '\\brdrs\\brdrw' || SalNumberToStrX( n1, 0 )
.head 13 -  Break 
.head 12 +  Case cParBorderDouble
.head 13 -  Set s = s || '\\clbrdr' || s1 || '\\brdrdb\\brdrw' || SalNumberToStrX( n1, 0 )
.head 13 -  Break 
.head 10 -  Set p = p + Cells[i].nLength
.head 10 -  Set s = s || '\\cellx' || SalNumberToStrX( p, 0 ) || '
'
.head 8 +  If GetType(  ) = cDocumentWord2000
.head 9 -  ! Set s = s || '\\row}'
.head 9 -  Set s = s || '\\row'
.head 8 +  Else
.head 9 -  Set s = s || '\\row'
.head 8 -  Call __Row.PutStr( s )
.head 8 -  Call EndBlock(  )
.head 8 -  Call __Row.Seek( 0, FILE_SeekBegin )
.head 8 -  Call Doc.__Doc.Copy( __Row )
.head 8 -  Call __Row.Close(  )
.head 8 -  Call Doc.EndBlock(  )
.head 5 +  Function: BeginCell
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  String: s1
.head 6 +  Actions
.head 7 +  If __Row.IsOpened(  )
.head 8 +  If __inCurCell <= __nNbrCells
.head 9 -  Set s = '{\\intbl'
.head 9 -  Set s1 = Cells[ __inCurCell ].GetStrFmtAll(  )
.head 9 -  Set s = s || s1
.head 9 +  If GetType(  ) = cDocumentWord2000
.head 10 -  Set s = VisStrSubstitute( s, '\\pard', '' )
.head 9 +  While SalStrRightX( s, 1 ) = ' '
.head 10 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 9 +  If s != ' '
.head 10 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 11 -  Set s = s || ' '
.head 9 +  If GetType(  ) = cDocumentWord97
.head 10 -  Set s = VisStrSubstitute( s, '\\pard', '' )
.head 9 -  Call __Row.Write( s, SalStrLength( s ) )
.head 9 -  Call TRtfParagraphe.Copy( Cells[__inCurCell] )
.head 9 -  Call BeginBlock(  )
.head 9 -  Return TRUE
.head 8 +  Else
.head 9 -  Return FALSE
.head 7 +  Else
.head 8 -  Return FALSE
.head 5 +  Function: EndCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 +  If __Row.IsOpened(  )
.head 8 +  If __inCurCell <= __nNbrCells
.head 9 -  Call EndBlock(  )
.head 9 -  Set s = '\\cell}'
.head 9 +  If GetType(  ) = cDocumentWord2000
.head 10 -  Set s = s || '\\pard
'
.head 9 +  While SalStrRightX( s, 1 ) = ' '
.head 10 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 9 +  ! If s != ' '
.head 10 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 11 -  Set s = s || ' '
.head 9 -  Call __Row.Write( s, SalStrLength( s ) )
.head 9 -  Set __inCurCell = __inCurCell + 1
.head 5 -  !
.head 5 +  Function: WriteRow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: Doc
.head 8 -  Class: TRtfDocument
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: j
.head 7 -  Number: n
.head 7 -  String: s
.head 7 -  Long String: s1
.head 6 +  Actions
.head 7 -  Call BeginRow( Doc )
.head 7 -  Set i = 1
.head 7 +  While i <= __nNbrCells
.head 8 -  Call BeginCell(  )
.head 8 -  Set s = ''
.head 8 +  Select Case Cells[ i ].inType
.head 9 +  Case 4
.head 10 -  Set s = Cells[ i ].String
.head 10 -  Call __Row.Write( s, SalStrLength( s ) )
.head 10 -  Break
.head 9 +  Case 5
.head 10 -  Call __WriteMemo( Cells[ i ].LongString )
.head 10 -  Break
.head 9 +  Default
.head 10 +  Select Case Cells[ i ].inType
.head 11 +  Case 2
.head 12 -  Set s = SalFmtFormatNumber( Cells[ i ].Number, Cells[ i ].Format )
.head 12 -  Break
.head 11 +  Case 3
.head 12 -  Set s = SalFmtFormatDateTime( Cells[ i ].Date, Cells[ i ].Format )
.head 12 -  Break
.head 11 +  Default
.head 12 -  Set s = Cells[ i ].String
.head 10 -  Call __Row.Write( s, SalStrLength( s ) )
.head 8 -  Call EndCell(  )
.head 8 -  Set i = i + 1
.head 7 -  Call EndRow( Doc )
.head 5 +  Function: WriteRowHeader
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: Doc
.head 8 -  Class: TRtfDocument
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: j
.head 7 -  Number: n
.head 7 -  String: s
.head 7 -  Long String: s1
.head 6 +  Actions
.head 7 -  Call BeginRow( Doc )
.head 7 -  Set s = '\\trhdr '
.head 7 -  Call __Row.Write( s, SalStrLength( s ) )
.head 7 -  Set i = 1
.head 7 +  While i <= __nNbrCells
.head 8 -  Call BeginCell(  )
.head 8 -  Set s = ''
.head 8 +  Select Case Cells[ i ].inType
.head 9 +  Case 4
.head 10 -  Set s = Cells[ i ].String
.head 10 -  Call __Row.Write( s, SalStrLength( s ) )
.head 10 -  Break
.head 9 +  ! Case 5
.head 10 -  Call RtfWriteMemo( pfh, itCells[ i ].LongString )
.head 10 -  Break 
.head 9 +  Default
.head 10 +  Select Case Cells[ i ].inType
.head 11 +  Case 2
.head 12 -  Set s = SalFmtFormatNumber( Cells[ i ].Number, Cells[ i ].Format )
.head 12 -  Break
.head 11 +  Case 3
.head 12 -  Set s = SalFmtFormatDateTime( Cells[ i ].Date, Cells[ i ].Format )
.head 12 -  Break
.head 11 +  Default
.head 12 -  Set s = Cells[ i ].String
.head 10 -  Call __Row.Write( s, SalStrLength( s ) )
.head 8 -  Call EndCell(  )
.head 8 -  Set i = i + 1
.head 7 -  Call EndRow( Doc )
.head 5 +  Function: WriteRowNotNull
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: Doc
.head 8 -  Class: TRtfDocument
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: j
.head 7 -  Number: n
.head 7 -  String: s
.head 7 -  Long String: s1
.head 6 +  Actions
.head 7 -  Call BeginRow( Doc )
.head 7 -  Set i = 1
.head 7 +  While i <= __nNbrCells
.head 8 -  Call BeginCell(  )
.head 8 -  Set s = ''
.head 8 +  Select Case Cells[ i ].inType
.head 9 +  Case 4
.head 10 -  Set s = Cells[ i ].String
.head 10 -  Call __Row.Write( s, SalStrLength( s ) )
.head 10 -  Break
.head 9 +  Case 5
.head 10 -  Call __WriteMemo( Cells[ i ].LongString )
.head 10 -  Break
.head 9 +  Default
.head 10 +  Select Case Cells[ i ].inType
.head 11 +  Case 2
.head 12 -  Set s = SalFmtFormatNumber( Cells[ i ].Number, Cells[ i ].Format )
.head 12 -  Break
.head 11 +  Case 3
.head 12 -  Set s = SalFmtFormatDateTime( Cells[ i ].Date, Cells[ i ].Format )
.head 12 -  Break
.head 11 +  Default
.head 12 -  Set s = Cells[ i ].String
.head 10 +  If s = ''
.head 11 -  Set s = cEspaceInsep
.head 10 -  Call __Row.Write( s, SalStrLength( s ) )
.head 8 -  Call EndCell(  )
.head 8 -  Set i = i + 1
.head 7 -  Call EndRow( Doc )
.head 5 -  !
.head 5 +  Function: GenererRow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pDoc
.head 8 -  Class: TRtfDocument
.head 7 -  Long String: psFormat
.head 7 -  Number: pnSize
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: lsArr[*]
.head 7 -  Number: lnNbrArr
.head 7 -  Number: i
.head 7 -  Number: lnDef
.head 7 -  String: lsFormat
.head 7 -  Number: lnFormat
.head 7 -  Number: lnFormatDef
.head 7 -  Number: lnSize
.head 7 -  String: lsSize
.head 7 -  Number: lnDispo
.head 7 -  Number: lnLargeur
.head 7 -  Number: j
.head 7 -  String: c
.head 7 -  Number: lcFormat[*]
.head 7 -  Number: lnMinHeight
.head 7 -  Number: lnSpaceAfter
.head 7 -  Number: lnSpaceBefore
.head 7 -  Number: lnSpaceAfterDef
.head 7 -  Number: lnSpaceBeforeDef
.head 7 -  Boolean: lbDef
.head 6 +  Actions
.head 7 -  Set lnNbrArr = SalStrTokenize( psFormat, '', '|', lsArr )
.head 7 -  Set lnLargeur = pDoc.GetPaperWidth(  )  - pDoc.GetMargeLeft(  ) - pDoc.GetMargeRight(  ) 
.head 7 -  Set lnDispo = lnLargeur
.head 7 -  Set lnDef = -1
.head 7 -  Set lnFormatDef = 0
.head 7 -  Set i = lnNbrArr
.head 7 +  While i
.head 8 -  Set lsFormat = lsArr[i-1]
.head 8 -  Set j = SalStrLength( lsFormat )
.head 8 -  Set lnFormat = 0
.head 8 -  Set lnMinHeight = 0
.head 8 -  Set lnSpaceAfter = 0
.head 8 -  Set lnSpaceBefore = 0
.head 8 -  Set lbDef = FALSE
.head 8 -  Set lnSpaceAfterDef = 0
.head 8 -  Set lnSpaceBeforeDef = 0
.head 8 -  Set lnSize = 1
.head 8 -  Set lcFormat[i] = cAbs
.head 8 -  Set j = 0
.head 8 +  While j < SalStrLength( lsFormat )
.head 9 -  ! Set j = j - 1
.head 9 +  If lbDef
.head 10 -  Set lnDef = i
.head 10 -  Set lnSize = 1
.head 10 -  Set lnSpaceBeforeDef = lnSpaceBefore
.head 10 -  Set lnSpaceAfterDef = lnSpaceAfter
.head 10 -  ! Set j = 0
.head 10 -  Set lnFormatDef = lnFormat
.head 9 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 9 +  If c = 't'
.head 10 -  Set lnFormat = lnFormat + cBorderT
.head 9 +  Else If c = 'b'
.head 10 -  Set lnFormat = lnFormat + cBorderB
.head 9 +  Else If c = 'l'
.head 10 -  Set lnFormat = lnFormat + cBorderL
.head 9 +  Else If c = 'r'
.head 10 -  Set lnFormat = lnFormat + cBorderR
.head 9 +  Else If c = 'B'
.head 10 -  Set lnFormat = lnFormat + cBold
.head 9 +  Else If c = 'c'
.head 10 -  Set lnFormat = lnFormat + cCaps
.head 9 +  Else If c = 'I'
.head 10 -  Set lnFormat = lnFormat + cItalic
.head 9 +  Else If c = 'U'
.head 10 -  Set lnFormat = lnFormat + cUnderline
.head 9 +  Else If c = 'C'
.head 10 -  Set lnFormat = lnFormat + cParCenter
.head 9 +  Else If c = 'L'
.head 10 -  Set lnFormat = lnFormat + cParLeft
.head 9 +  Else If c = 'R'
.head 10 -  Set lnFormat = lnFormat + cParRight
.head 9 +  Else If c = 'J'
.head 10 -  Set lnFormat = lnFormat + cParJust
.head 9 +  Else If c = '#'
.head 10 -  Set j = j + 1
.head 10 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 10 +  If c = 'h'
.head 11 -  Set j = j + 1
.head 11 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 11 +  If SalStrScan( ' 0123456789,.-', c ) >= 0
.head 12 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 12 -  Set lsSize = ''
.head 12 +  While ( j < SalStrLength( lsFormat ) ) and ( c != '@' ) and ( SalStrScan( ' 0123456789,.-', c ) >= 0 )
.head 13 -  Set lsSize = lsSize || c
.head 13 -  Set j = j + 1
.head 13 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 12 -  ! Set j = j - 1
.head 12 +  If SalStrIsValidNumber( lsSize )
.head 13 -  Set lnMinHeight = SalStrToNumber( lsSize )
.head 13 -  ! Set j = 0
.head 13 -  ! Set lnDispo = lnDispo - lnSize
.head 10 +  Else If c = 'S'
.head 11 -  Set j = j + 1
.head 11 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 11 +  If c = 'B'
.head 12 -  Set j = j + 1
.head 12 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 12 +  If SalStrScan( ' 0123456789,.-', c ) >= 0
.head 13 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 13 -  Set lsSize = ''
.head 13 +  While ( j < SalStrLength( lsFormat ) ) and ( c != '@' ) and ( SalStrScan( ' 0123456789,.-', c ) >= 0 )
.head 14 -  Set lsSize = lsSize || c
.head 14 -  Set j = j + 1
.head 14 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 13 -  ! Set j = j - 1
.head 13 +  If SalStrIsValidNumber( lsSize )
.head 14 -  Set lnSpaceBefore = SalStrToNumber( lsSize )
.head 14 -  ! Set j = 0
.head 14 -  ! Set lnDispo = lnDispo - lnSize
.head 11 +  Else If c = 'A'
.head 12 -  Set j = j + 1
.head 12 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 12 +  If SalStrScan( ' 0123456789,.-', c ) >= 0
.head 13 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 13 -  Set lsSize = ''
.head 13 +  While ( j < SalStrLength( lsFormat ) ) and ( c != '@' ) and ( SalStrScan( ' 0123456789,.-', c ) >= 0 )
.head 14 -  Set lsSize = lsSize || c
.head 14 -  Set j = j + 1
.head 14 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 13 -  ! Set j = j - 1
.head 13 +  If SalStrIsValidNumber( lsSize )
.head 14 -  Set lnSpaceAfter = SalStrToNumber( lsSize )
.head 14 -  ! Set j = 0
.head 14 -  ! Set lnDispo = lnDispo - lnSize
.head 11 +  Else If c = 'X'
.head 12 -  Set j = j + 1
.head 12 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 12 +  If SalStrScan( ' 0123456789,.-', c ) >= 0
.head 13 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 13 -  Set lsSize = ''
.head 13 +  While ( j < SalStrLength( lsFormat ) ) and ( c != '@' ) and ( SalStrScan( ' 0123456789,.-', c ) >= 0 )
.head 14 -  Set lsSize = lsSize || c
.head 14 -  Set j = j + 1
.head 14 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 13 -  ! Set j = j - 1
.head 13 +  If SalStrIsValidNumber( lsSize )
.head 14 -  Set lnSpaceAfter = SalStrToNumber( lsSize )
.head 14 -  Set lnSpaceBefore = lnSpaceAfter
.head 14 -  ! Set j = 0
.head 14 -  ! Set lnDispo = lnDispo - lnSize
.head 9 +  ! Else If c = '%'
.head 10 -  Set lsSize = SalStrLeftX( lsFormat, j)
.head 10 +  If lsSize = '*'
.head 11 -  Set lnDef = i
.head 11 -  Set lcFormat[i] = cPct
.head 11 -  Set lnSize = 1
.head 11 -  Set j = 0
.head 11 -  Set lnFormatDef = lnFormat
.head 10 +  Else
.head 11 +  If SalStrIsValidNumber( lsSize )
.head 12 -  Set lnSize = SalStrToNumber( lsSize )
.head 12 -  Set lcFormat[i] = cPct
.head 12 -  Set lnSize = lnLargeur * lnSize / 100
.head 12 -  Set lnDispo = lnDispo - lnSize
.head 12 -  Set lnFormatDef = lnFormat
.head 12 -  Set j = 0
.head 9 +  Else If SalStrScan( '0123456789,.*', c ) >= 0
.head 10 -  ! Set lsSize = SalStrLeftX( lsFormat, j) || c
.head 10 -  Set lsSize = ''
.head 10 +  While ( j < SalStrLength( lsFormat ) ) and ( SalStrScan( ' 0123456789,.*', c ) >= 0 )
.head 11 -  Set lsSize = lsSize || c
.head 11 -  Set j = j + 1
.head 11 -  Set c = SalStrMidX( lsFormat, j, 1 )
.head 10 +  If c = '%'
.head 11 -  Set lcFormat[i] = cPct
.head 10 +  Else
.head 11 -  Set j = j - 1
.head 10 +  If lsSize = '*'
.head 11 -  Set lbDef = TRUE
.head 11 -  Set lnDef = i
.head 11 -  Set lnSize = 1
.head 11 -  Set lnSpaceBeforeDef = lnSpaceBefore
.head 11 -  Set lnSpaceAfterDef = lnSpaceAfter
.head 11 -  ! Set j = 0
.head 11 -  Set lnFormatDef = lnFormat
.head 10 +  Else
.head 11 +  If SalStrIsValidNumber( lsSize )
.head 12 -  Set lnSize = SalStrToNumber( lsSize )
.head 12 -  ! Set j = 0
.head 12 -  Set lnDispo = lnDispo - lnSize 
.head 9 +  ! If lnDef >= 0
.head 10 -  Set lnFormatDef = lnFormat
.head 10 -  Set lnSpaceBeforeDef = lnSpaceBefore
.head 10 -  Set lnSpaceAfterDef = lnSpaceAfter
.head 9 -  Set j = j + 1
.head 8 -  Call AddCell( pDoc, i, lnSize, lcFormat[i] )
.head 8 -  Call DefineCell( i, lnFormat, pnSize, 0, lnMinHeight )
.head 8 -  ! If ( lnSpaceBefore > -1 ) or ( lnSpaceAfter > - 1 )
.head 8 -  Call DefineCellPar( i, lnSpaceBefore, lnSpaceAfter )
.head 8 -  Set i = i - 1
.head 7 +  If lnDef >= 0
.head 8 -  Call AddCell( pDoc, lnDef, lnDispo, lcFormat[lnDef] )
.head 8 -  Call DefineCell( lnDef, lnFormatDef, pnSize, 0, 0 )
.head 8 -  ! If ( lnSpaceBeforeDef > -1 ) or ( lnSpaceAfterDef > - 1 )
.head 8 -  Call DefineCellPar( i, lnSpaceBeforeDef, lnSpaceAfterDef )
.head 5 -  !
.head 5 +  Function: __WriteMemo
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Long String: pls
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Long String: lls
.head 7 -  Long String: ls1
.head 7 -  Number: i
.head 7 -  Number: l
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set lls = RtfCodeHexa( pls )
.head 7 -  Set ls1 = lls
.head 7 -  Set i = SalStrScan( lls, '
' )
.head 7 +  While i >= 0
.head 8 -  Set ls1 = SalStrLeftX( lls, i - 1 )
.head 8 -  Call __Row.Write( ls1, SalStrLength( ls1 ) )
.head 8 -  Set s = cPar || '
'
.head 8 -  Call __Row.Write( s, SalStrLength( s ) )
.head 8 -  Set lls = SalStrMidX( lls, i + SalStrLength( '
' ) , SalStrLength( lls ) )
.head 8 -  Set i = SalStrScan( lls, '
' )
.head 7 -  Call __Row.Write( lls, SalStrLength( lls ) )
.head 5 +  Function: StartCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call BeginCell(  )
.head 5 +  Function: NextCell
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call EndCell(  )
.head 7 -  Call BeginCell(  )
.head 5 +  Function: Reset
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = __nNbrCells
.head 7 +  While i
.head 8 -  Call Cells[i].Clear(  )
.head 8 -  Set Cells[i].nBorderLW = 0
.head 8 -  Set Cells[i].nBorderRW = 0
.head 8 -  Set Cells[i].nBorderTW = 0
.head 8 -  Set Cells[i].nBorderBW = 0
.head 8 -  Set Cells[i].nBorderLS = 0
.head 8 -  Set Cells[i].nBorderRS = 0
.head 8 -  Set Cells[i].nBorderTS = 0
.head 8 -  Set Cells[i].nBorderBS = 0
.head 8 -  Set Cells[ i ].inType = 0
.head 8 -  Set Cells[ i ].String = ''
.head 8 -  Set Cells[ i ].Format = ''
.head 8 -  Set Cells[ i ].Date = DATETIME_Null
.head 8 -  Set Cells[ i ].Number = NUMBER_Null
.head 8 -  Set i = i - 1
.head 7 -  Set __nNbrCells = 0
.head 7 -  ! Set m_Keep = FALSE
.head 5 -  !
.head 5 +  ! Function: StrToRtf
.head 6 -  Description: 
.head 6 +  Returns 
.head 7 -  String: 
.head 6 +  Parameters 
.head 7 -  String: psValue
.head 6 -  Static Variables 
.head 6 +  Local variables 
.head 7 -  String: s2
.head 7 -  String: s
.head 7 -  String: s3
.head 7 -  Number: n
.head 7 -  String: s1
.head 7 -  Number: n1
.head 7 -  Boolean: bOk
.head 6 +  Actions 
.head 7 -  Set s = ''
.head 7 +  While SalStrFirstC( psValue, n )
.head 8 +  If ( n >= 32 ) and ( n <= 126 )
.head 9 -  Set s1 = SalNumberToChar( n )
.head 9 -  Set bOk = TRUE
.head 9 +  If bOk
.head 10 -  Set s3 = cTab
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 9 +  If bOk
.head 10 -  Set s3 = cTiretConditionnel
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 9 +  If bOk
.head 10 -  Set s3 = cEspaceInsep
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 9 +  If bOk
.head 10 -  Set s3 = cPar
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 9 +  If bOk
.head 10 -  Set s3 = cParSolidaireS
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 9 +  If bOk
.head 10 +  If ( s1 = '{' ) or ( s1 = '}' ) or ( s1 = '\\' ) 
.head 11 -  Set s1 = '\\' || s1
.head 9 -  Set s = s || s1
.head 8 +  Else 
.head 9 -  Set s1 = ''
.head 9 +  If n >= 32
.head 10 +  While n
.head 11 -  Set n1 = SalNumberMod( n, 16 )
.head 11 +  Select Case n1
.head 12 +  Case 0
.head 13 -  Set s1 = '0' || s1
.head 13 -  Break 
.head 12 +  Case 1
.head 13 -  Set s1 = '1' || s1
.head 13 -  Break 
.head 12 +  Case 2
.head 13 -  Set s1 = '2' || s1
.head 13 -  Break 
.head 12 +  Case 3
.head 13 -  Set s1 = '3' || s1
.head 13 -  Break 
.head 12 +  Case 4
.head 13 -  Set s1 = '4' || s1
.head 13 -  Break 
.head 12 +  Case 5
.head 13 -  Set s1 = '5' || s1
.head 13 -  Break 
.head 12 +  Case 6
.head 13 -  Set s1 = '6' || s1
.head 13 -  Break 
.head 12 +  Case 7
.head 13 -  Set s1 = '7' || s1
.head 13 -  Break 
.head 12 +  Case 8
.head 13 -  Set s1 = '8' || s1
.head 13 -  Break 
.head 12 +  Case 9
.head 13 -  Set s1 = '9' || s1
.head 13 -  Break 
.head 12 +  Case 10
.head 13 -  Set s1 = 'a' || s1
.head 13 -  Break 
.head 12 +  Case 11
.head 13 -  Set s1 = 'b' || s1
.head 13 -  Break 
.head 12 +  Case 12
.head 13 -  Set s1 = 'c' || s1
.head 13 -  Break 
.head 12 +  Case 13
.head 13 -  Set s1 = 'd' || s1
.head 13 -  Break 
.head 12 +  Case 14
.head 13 -  Set s1 = 'e' || s1
.head 13 -  Break 
.head 12 +  Case 15
.head 13 -  Set s1 = 'f' || s1
.head 13 -  Break 
.head 11 -  Set n = n - n1
.head 11 -  Set n = n / 16
.head 9 +  If s1 != ''
.head 10 +  While SalNumberMod( SalStrLength( s1 ), 2 )
.head 11 -  Set s1 = '0' || s1
.head 10 -  Set s = s || "\\'" || s1
.head 7 -  Return s
.head 5 +  Function: StrToRtf
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s2
.head 7 -  String: s
.head 7 -  String: s3
.head 7 -  Number: n
.head 7 -  String: s1
.head 7 -  Number: n1
.head 7 -  Boolean: bOk
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 +  While SalStrFirstC( psValue, n )
.head 8 +  If ( n >= 32 ) and ( n <= 126 )
.head 9 -  Set s1 = SalNumberToChar( n )
.head 9 -  Set bOk = TRUE
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cTab
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cPar
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = '\\intbl' || s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cEspaceInsep
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cParSolidaireS
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk and ( s1 = '\\' )
.head 10 -  Set s3 = cTiretConditionnel
.head 10 -  Set s2 = SalStrLeftX( psValue, SalStrLength( s3 ) - 1 )
.head 10 +  If s1 || s2 = s3
.head 11 -  Set bOk = FALSE
.head 11 -  Set s1 = s3
.head 11 -  Set psValue = SalStrMidX( psValue, SalStrLength( s3 ) - 1, SalStrLength( psValue ) )
.head 9 +  If bOk
.head 10 +  If ( s1 = '{' ) or ( s1 = '}' ) or ( s1 = '\\' ) 
.head 11 -  Set s1 = '\\' || s1
.head 9 -  Set s = s || s1
.head 8 +  Else
.head 9 -  Set s1 = ''
.head 9 +  If n >= 32
.head 10 +  While n
.head 11 -  Set n1 = SalNumberMod( n, 16 )
.head 11 +  Select Case n1
.head 12 +  Case 0
.head 13 -  Set s1 = '0' || s1
.head 13 -  Break
.head 12 +  Case 1
.head 13 -  Set s1 = '1' || s1
.head 13 -  Break
.head 12 +  Case 2
.head 13 -  Set s1 = '2' || s1
.head 13 -  Break
.head 12 +  Case 3
.head 13 -  Set s1 = '3' || s1
.head 13 -  Break
.head 12 +  Case 4
.head 13 -  Set s1 = '4' || s1
.head 13 -  Break
.head 12 +  Case 5
.head 13 -  Set s1 = '5' || s1
.head 13 -  Break
.head 12 +  Case 6
.head 13 -  Set s1 = '6' || s1
.head 13 -  Break
.head 12 +  Case 7
.head 13 -  Set s1 = '7' || s1
.head 13 -  Break
.head 12 +  Case 8
.head 13 -  Set s1 = '8' || s1
.head 13 -  Break
.head 12 +  Case 9
.head 13 -  Set s1 = '9' || s1
.head 13 -  Break
.head 12 +  Case 10
.head 13 -  Set s1 = 'a' || s1
.head 13 -  Break
.head 12 +  Case 11
.head 13 -  Set s1 = 'b' || s1
.head 13 -  Break
.head 12 +  Case 12
.head 13 -  Set s1 = 'c' || s1
.head 13 -  Break
.head 12 +  Case 13
.head 13 -  Set s1 = 'd' || s1
.head 13 -  Break
.head 12 +  Case 14
.head 13 -  Set s1 = 'e' || s1
.head 13 -  Break
.head 12 +  Case 15
.head 13 -  Set s1 = 'f' || s1
.head 13 -  Break
.head 11 -  Set n = n - n1
.head 11 -  Set n = n / 16
.head 9 +  If s1 != ''
.head 10 +  While SalNumberMod( SalStrLength( s1 ), 2 )
.head 11 -  Set s1 = '0' || s1
.head 10 -  Set s = s || "\\'" || s1
.head 7 -  Return s
.head 5 +  Function: Write
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = s || TRtfParagraphe.GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 +  If s != ''
.head 8 +  If ( SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1 ) or ( ( SalStrScan( '0123456789', SalStrRightX( s, 1 ) ) > -1 ) and ( SalStrScan( '0123456789', SalStrRightX( psValue, 1 ) ) > -1 ) )
.head 9 -  Set s = s || ' '
.head 8 -  Call __Row.Write( s, SalStrLength( s ) )
.head 7 -  Set s = StrToRtf( psValue )
.head 7 -  Call __Row.Write( s, SalStrLength( s ) )
.head 7 -  ! Set bWrite = TRUE
.head 5 +  Function: Writeln
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Call Write( psValue )
.head 7 -  Call NewPar(  )
.head 5 +  Function: WriteTab
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 7 -  Number: i
.head 7 -  String: as
.head 6 +  Actions
.head 7 -  ! Set n = SalStrTokenize( psValue, '', cTab, as )
.head 7 -  Set as = psValue
.head 7 -  Set n = SalStrScan( as, cTab )
.head 7 -  Set i = 0
.head 7 +  While n >= 0
.head 8 -  Set s = SalStrLeftX( as, n - 1 )
.head 8 +  If i
.head 9 -  Call Tab(  )
.head 8 -  Call Write( s )
.head 8 -  Set i = i + 1
.head 8 -  Set as = SalStrMidX( as, n + SalStrLength( cTab ) - 1, SalStrLength( as ) )
.head 8 -  Set n = SalStrScan( as, cTab )
.head 7 +  If i
.head 8 -  Call Tab(  )
.head 7 -  Call Write( as )
.head 5 +  Function: WritelnTab
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Call WriteTab( psValue )
.head 7 -  Call NewPar(  )
.head 5 +  Function: Tab
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 -  Set s  = s || '\\tab'
.head 7 +  If s != ''
.head 8 -  Set s = s || ' '
.head 7 -  Call __Row.Write( s, SalStrLength( s ) )
.head 5 +  Function: NewPar
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s   = '\\intbl\\par
'
.head 7 -  ! Set s = s || ' '
.head 7 -  Call __Row.Write( s, SalStrLength( s ) )
.head 5 +  Function: NewLine
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s   = '\\line
'
.head 7 -  ! Set s = s || ' '
.head 7 -  Call __Row.Write( s, SalStrLength( s ) )
.head 5 +  Function: BeginBlock
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Boolean:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Call __oStack.Push( this )
.head 7 -  Set s = ''
.head 7 -  ! If SectionModif( ) or TRtfParagraph.IsModified(  )
.head 7 -  ! Set s = '
'
.head 7 -  Set s = s || GetStrFmt(  )
.head 7 +  While SalStrRightX( s, 1 ) = ' '
.head 8 -  Set s = SalStrLeftX( s, SalStrLength( s ) - 1 )
.head 7 +  If ( s != '' ) and ( s != '
' )
.head 8 +  If SalStrScan( ' 0123456789', SalStrRightX( s, 1 ) ) = -1
.head 9 -  Set s = s || ' '
.head 7 -  Set s = s || '{'
.head 7 -  Call __Row.Write( s, SalStrLength( s ) )
.head 7 -  Set __nNbrBlock = __nNbrBlock + 1
.head 7 -  Return TRUE
.head 5 +  Function: EndBlock
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = '}'
.head 7 -  Call __Row.Write( s, SalStrLength( s ) )
.head 7 -  Set __nNbrBlock = __nNbrBlock - 1
.head 7 -  Call __oStack.Pop( this )
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 -  !
.head 5 +  Function: ParDefault
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set s   = '\\pard'
.head 7 -  Call TRtfParagraphe.Default(  )
.head 7 -  Set s   = s || '\\plain'
.head 7 -  Call TRtfChar.Default(  )
.head 7 -  Set s = s || ' '
.head 7 -  Call __Row.Write( s, SalStrLength( s ) )
.head 5 +  Function: Attr
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnAttr
.head 7 -  Number: pnFontSize
.head 7 -  ! Number: pnShading
.head 7 -  ! Number: pnMinHeight
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = ''
.head 7 -  ! Call ParDefault(  )
.head 7 +  If pnAttr & cBold
.head 8 -  Call Bold( TRUE )
.head 7 +  If pnAttr & cStrike
.head 8 -  Call Strike( TRUE )
.head 7 +  If pnAttr & cItalic
.head 8 -  Call Italic( TRUE )
.head 7 +  If pnAttr & cCaps
.head 8 -  Call Caps( TRUE )
.head 7 +  If pnAttr & cDoubleUnderline
.head 8 -  Call Underline( cDoubleUnderline )
.head 7 +  If pnAttr & cDotUnderline
.head 8 -  ! Set s = s || '\\uld'
.head 8 -  Call Underline( cDotUnderline )
.head 7 +  If pnAttr & cWordUnderline
.head 8 -  ! Set s = s || '\\ulw'
.head 8 -  Call Underline( cWordUnderline )
.head 7 +  If pnAttr & cUnderline
.head 8 -  ! Set s = s || '\\ul'
.head 8 -  Call Underline( cUnderline )
.head 7 +  If pnAttr & cParCenter
.head 8 -  ! Set s = s || '\\qc'
.head 8 -  Call Alignement( cParCenter )
.head 7 +  If pnAttr & cParRight
.head 8 -  ! Set s = s || '\\qr'
.head 8 -  Call Alignement( cParRight )
.head 7 +  If pnAttr & cParJust
.head 8 -  ! Set s = s || '\\qj'
.head 8 -  Call Alignement( cParJust )
.head 7 +  If pnAttr & cParSolidaire
.head 8 -  ! Set s = s || '\\keepn'
.head 8 -  Call ParagrapheSolidaire( TRUE )
.head 7 +  If pnAttr & cLineSolidaire
.head 8 -  ! Set s = s || '\\keep'
.head 8 -  Call LigneSolidaire( TRUE )
.head 7 +  If pnFontSize != 0
.head 8 -  ! Set s = s || '\\fs' || SalFmtFormatNumber( pnFontSize * 2, '0' )
.head 8 -  Call FontSize( pnFontSize )
.head 7 -  ! Set s = s || ' '
.head 7 -  ! Call SalFileWrite( pfh, s, SalStrLength( s ) )
.head 5 +  Function: WriteMemo
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Long String: pls
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Long String: lls
.head 7 -  Long String: ls1
.head 7 -  Number: i
.head 7 -  Number: l
.head 6 +  Actions
.head 7 -  ! Set lls = RtfCodeHexa( pls )
.head 7 -  Set ls1 = lls
.head 7 -  Set i = SalStrScan( lls, '
' )
.head 7 +  While i >= 0
.head 8 -  Set ls1 = SalStrLeftX( lls, i - 1 )
.head 8 -  Call Writeln( ls1 )
.head 8 -  ! Call RtfNewPar( pfh )
.head 8 -  Set lls = SalStrMidX( lls, i + SalStrLength( '
' ) , SalStrLength( lls ) )
.head 8 -  Set i = SalStrScan( lls, '
' )
.head 7 -  Call Write( lls )
.head 5 +  Function: LBFIntbl
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  String:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return '\\intbl'
.head 5 +  Function: SaveStringRTF
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psValue
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Call __Row.Write( psValue, SalStrLength( psValue ) )
.head 5 +  Function: OutData
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  FunctionalVar:
.head 8 -  Class: TStream
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return __Row
.head 5 -  !
.head 5 -  !
.head 5 +  Function: TOCIndex
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  String: psRef
.head 7 -  Number: pnLevel
.head 7 -  String: psT
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  String: s
.head 6 +  Actions
.head 7 -  Set s = '{\\tc'
.head 7 +  If pnLevel != 0
.head 8 -  Set s = s || '\\tcl' || SalFmtFormatNumber( pnLevel, '0' )
.head 7 +  If psT != ''
.head 8 +  If SalStrFirstC( psT, i )
.head 9 -  Set s = s || '\\tcf' || SalFmtFormatNumber( i, '0' )
.head 7 -  Set s = s || '\\v ' || psRef
.head 7 -  Set s = s || '}'
.head 7 -  Call __Row.Write( s, SalStrLength( s ) )
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 +  Functional Class: __TRtfStackPara
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  FunctionalVar: aTab[*]
.head 6 -  Class: TRtfParagraphe
.head 5 -  Number: nNbr
.head 4 +  Functions
.head 5 +  Function: ObjectDestructor
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set nNbr = 0
.head 7 -  Call SalArraySetUpperBound( aTab, 1, 0 )
.head 5 +  Function: Push
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: oPara
.head 8 -  Class: TRtfParagraphe
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = nNbr
.head 7 -  Set nNbr = nNbr + 1
.head 7 -  Call aTab[i].Copy( oPara )
.head 5 +  Function: Pop
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: oPara
.head 8 -  Class: TRtfParagraphe
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 +  If nNbr > 0
.head 8 -  Set nNbr = nNbr - 1
.head 8 -  Set i = nNbr
.head 8 -  Call oPara.Copy( aTab[i] )
.head 3 -  !
.head 3 -  !
.head 3 -  !
.head 3 +  Functional Class: TRtfTotalRow
.head 4 -  Description:
.head 4 -  Derived From
.head 4 -  Class Variables
.head 4 +  Instance Variables
.head 5 -  FunctionalVar: inCol[ * ]
.head 6 -  Class: TTotalColumn
.head 5 -  Number: inNbrCol
.head 4 +  Functions
.head 5 +  Function: GetNbrCol
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return inNbrCol
.head 5 +  Function: GetNumCol
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: i
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return inCol[ i ].GetNumCol( )
.head 5 +  Function: GetTotalCol
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: i
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Return inCol[ i ].GetTotal( )
.head 5 +  Function: Reset
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i
.head 8 -  Call inCol[ i ].SetNumCol( NUMBER_Null )
.head 8 -  Call inCol[ i ].SetTotal( NUMBER_Null )
.head 8 -  Set i = i - 1
.head 7 -  Set inNbrCol = 0
.head 5 +  Function: InitCol
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  Number: pnNoCol
.head 6 -  Static Variables
.head 6 -  Local variables
.head 6 +  Actions
.head 7 -  Set inNbrCol = inNbrCol + 1
.head 7 -  Call inCol[ inNbrCol ].SetTotal( 0 )
.head 7 -  Call inCol[ inNbrCol ].SetNumCol( pnNoCol )
.head 5 +  Function: Add
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pnRow
.head 8 -  Class: TRtfTableRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: c
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 -  Set c = inCol[ i ].GetNumCol( )
.head 8 -  Set n = pnRow.GetNumberCell( c )
.head 8 -  Call inCol[ i ].AddTotal( n )
.head 8 -  Set i = i - 1
.head 5 +  Function: Clear
.head 6 -  Description:
.head 6 -  Returns
.head 6 -  Parameters
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 -  Call inCol[ i ].SetTotal( 0 )
.head 8 -  Set i = i - 1
.head 5 +  Function: SetRow
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pnRow
.head 8 -  Class: TRtfTableRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: c
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 -  Set c = inCol[ i ].GetNumCol( )
.head 8 -  Set n = inCol[ i ].GetTotal( )
.head 8 -  Call pnRow.SetNumber( c, n, pnRow.GetFormatNumberCell( c ) )
.head 8 -  Set i = i - 1
.head 5 +  Function: SetRowNotNull
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pnRow
.head 8 -  Class: TRtfTableRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: c
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 -  Set c = inCol[ i ].GetNumCol( )
.head 8 -  Set n = inCol[ i ].GetTotal( )
.head 8 +  If n != NUMBER_Null
.head 9 -  Call pnRow.SetNumber( c, n, pnRow.GetFormatNumberCell( c ) )
.head 8 -  Set i = i - 1
.head 5 +  Function: GetTotal
.head 6 -  Description:
.head 6 +  Returns
.head 7 -  Number:
.head 6 +  Parameters
.head 7 -  Number: pnCol
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: c
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = inNbrCol
.head 7 +  While i 
.head 8 +  If pnCol = inCol[ i ].GetNumCol( )
.head 9 -  Set n = inCol[i].GetTotal( )
.head 9 -  Set i = 1
.head 9 -  Return n
.head 8 -  Set i = i - 1
.head 7 -  Return NUMBER_Null
.head 5 +  Function: Copy
.head 6 -  Description:
.head 6 -  Returns
.head 6 +  Parameters
.head 7 -  FunctionalVar: pTotal
.head 8 -  Class: TRtfTotalRow
.head 6 -  Static Variables
.head 6 +  Local variables
.head 7 -  Number: i
.head 7 -  Number: n
.head 6 +  Actions
.head 7 -  Set i = pTotal.GetNbrCol( )
.head 7 +  While i
.head 8 -  Call inCol[ i ].SetNumCol( pTotal.GetNumCol( i ) )
.head 8 -  Call inCol[ i ].SetTotal( pTotal.GetTotalCol( i ) )
.head 8 -  Set i = i - 1
.head 2 +  Default Classes
.head 3 -  MDI Window: cBaseMDI
.head 3 -  Form Window:
.head 3 -  Dialog Box:
.head 3 -  Table Window:
.head 3 -  Quest Window:
.head 3 -  Data Field:
.head 3 -  Spin Field:
.head 3 -  Multiline Field: cQuickMLField
.head 3 -  Pushbutton: cQuickCommander
.head 3 -  Radio Button:
.head 3 -  Option Button:
.head 3 -  ActiveX:
.head 3 -  Check Box:
.head 3 -  Child Table: cQuickTable
.head 3 -  Quest Child Window: cQuickDatabase
.head 3 -  List Box:
.head 3 -  Combo Box:
.head 3 -  Picture: cQuickPicture
.head 3 -  Vertical Scroll Bar:
.head 3 -  Horizontal Scroll Bar:
.head 3 -  Column:
.head 3 -  Background Text:
.head 3 -  Group Box:
.head 3 -  Line:
.head 3 -  Frame:
.head 3 -  Custom Control: cQuickGraph
.head 2 -  Application Actions
